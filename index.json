[{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Android changes: Android is one of the largest downstream consumers of our work. Our continuous integeration tests the Android trees with newer versions of LLVM to help catch any issues that will impact Android once they upgrade their version of LLVM, which can lag behind at times.\nANDROID: Incremental fs: Use ERR_CAST in handle_mapped_file() Build errors: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)\nntb_perf: Fix 64-bit division on 32-bit architectures (v1) arm64: vdso32: Small fixes for ld.lld 11 and CONFIG_DEBUG_INFO (v1) Miscellaneous fixes: These are fixes that don\u0026rsquo;t fit into a particular category but are important to ClangBuiltLinux. In this case, I noticed that Chimera Linux was carrying a patch downstream to enable the stackprotector on x86_64 when cross compiling, which typically means the --target flag is missing somewhere, which I fixed with this patch.\nx86/Kconfig: Fix CONFIG_CC_HAS_SANE_STACKPROTECTOR when cross compiling with clang (v1) Stable patches and backport requests: It is important to make sure that the stable trees are as free from issues as possible, as those are the trees that devices and users use; for example, Android and Chrome OS regularly merge from stable, so if there is a problem that will impact those trees that we fixed in mainline, it should be backported.\nApply 1e70212e031528918066a631c9fdccda93a1ffaa to 5.18 Warning fixes: These are patches to fix various warnings that appear with LLVM. I used to go into detail about the different warnings and what they mean, but the important takeaway for this section is that the kernel should build warning free, as all developers should be using CONFIG_WERROR, which will turn these all into failures. Maybe these should be in the build failures section\u0026hellip;\nmmc: sdhci-brcmstb: Initialize base_clk to NULL in sdhci_brcmstb_probe() (v1) soc: mediatek: SVS: Use DEFINE_SIMPLE_DEV_PM_OPS for svs_pm_ops (v1) drm/amd/display: Fix indentation in dcn32_get_vco_frequency_from_reg() (v1) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH] netfilter: conntrack: fix this -Wformat clang warning: Re: [PATCH] rtw88: 8821c: fix access const table of channel parameters Re: [PATCH] s390: disable -Warray-bounds Re: [PATCH v3] include/uapi/linux/swab.h: move explicit cast outside ternary Re: [PATCH] KVM: SVM: Hide SEV migration lockdep goo behind CONFIG_DEBUG_LOCK_ALLOC Re: [PATCH] hinic: Replace memcpy() with direct assignment Re: [PATCH] Documentation/llvm: Update Supported Arch table Re: [PATCH] Fix use of uninitialized variable in rts5261_init_from_hw, when efuse_valid == 1 Re: [PATCH 16/31] drm/amd/display: refactor function transmitter_to_phy_id Re: [PATCH] [RFC] Kbuild: change CONFIG_FRAME_WARN for 32-bit Re: [PATCH] scripts/Makefile.clang: set --target for host based on make -v Re: [PATCH for-next 03/10] io_uring: fix io_poll_remove_all clang warnings stage 4 \u0026amp; stage 5 Re: [PATCH] lib/test_printf.c: fix clang -Wformat warnings Issue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [PATCH 09/15] swiotlb: make the swiotlb_init interface more useful Re: [PATCH v11 1/4] trace: Add trace any kernel object Considering uninitialized function parameters UB LLD segfaults while linking drivers/scsi/megaraid/megaraid_mm.ko Re: [PATCH v3 4/4] rtw88: Fix Sparse warning for rtw8821c_hw_spec INIT_STACK_ALL_ZERO - Framework Laptop system freezes (kernel oops?) on boot error: write on a pipe with no reader \u0026quot;Unable to apply kernel patch\u0026quot; when git quiltimport works locally -Wframe-larger-than in sound/soc/intel/avs/path.c Contextual conflict between kspp and rcu trees Re: linux-next: Tree for Jun 15 (drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.c) -Wunused-but-set-variable building perf Re: [PATCH for-next v3 16/16] io_uring: mutex locked poll hashing Re: [GIT PULL] Char/Misc driver fixes 5.19-rc3 Re: [PATCH] kbuild: pass jobserver to cmd_ld_vmlinux.o Re: [TCWG CI] Regression caused by llvm: [GlobalOpt] Perform store-\u0026gt;dominated load forwarding for stored once globals Re: mainline build failure due to 281d0c962752 (\u0026quot;fortify: Add Clang support\u0026quot;) Triggered assertion from \u0026quot;mm: Add an assertion that PG_private and folio-\u0026gt;private are in sync\u0026quot; Re: [PATCH v1 1/2] arm64: vdso32: add ARM.exidx* sections Re: Regression for duplicate (?) console parameters on next-20220630 Tooling improvements These are changes to various tools that we use, such as our continuous integration setup, booting utilities, toolchain building scripts, or other closely related projects such as AOSP\u0026rsquo;s distribution of LLVM and TuxMake.\npatches: Add RISC-V inline asm fixes to mainline and -next Switch to self-hosted GitHub Actions for llvm-project Update to Linux 5.18 and update known good revision boot-uml.sh: Remove exec hack build-llvm.py: Add LLVM_DEFAULT_TARGET_TRIPLE when possible patches: mainline: Drop a RISC-V patch Improve shell script style ci.sh: Use release/14.x for testing kernel/build.sh: Support all*config for Hexagon, RISC-V, and s390 ci/test-clang.sh: Skip toolchain archive creation when run locally Improve podman compatibility Add support for arm64 to llvm-project Drop objtool patch on stable and 5.15 Fix tags and update Makefile workflow to match github: build-test-llvm-project: Add build-args Re-enable ChromeOS jobs boot-utils: Update patches: mainline: Add a fix for ARCH=arm allmodconfig patches: mainline: Drop watchdog patch Drop -next patches (June 21st, 2022) Disable ChromeOS jobs again Drop mainline patches (June 24th, 2022) kernel/build.sh: Print kernel version and small fix for header Enable ChromeOS jobs (round 3) Behind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Windows Subsystem for Linux instance, a Raspberry Pi 3 and 4, an Intel-based desktop, an AMD-based desktop, and an Intel-based laptop. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered. Special thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/june-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Android changes: Android is one of the largest downstream consumers of our work. Our continuous integeration tests the Android trees with newer versions of LLVM to help catch any issues that will impact Android once they upgrade their version of LLVM, which can lag behind at times.","title":"June 2022 ClangBuiltLinux Work"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build errors: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)\nriscv: Move alternative length validation into subsection (v1) riscv: Fix ALT_THEAD_PMA's asm parameters (v1) ath6kl: Use cc-disable-warning to disable -Wdangling-pointer (v1) Feature work: These patches focus on getting things that don\u0026rsquo;t currently work or happen but should. In this case, this series enables linking the PowerPC vDSO with ld.lld, which is necessary to avoid cryptic build failures when using Link Time Optimization (LTO), which is currently a work in progress.\nLink the PowerPC vDSO with ld.lld (v1, v2) Miscellaneous fixes: These are fixes that don\u0026rsquo;t fit into a particular category but are important to ClangBuiltLinux. In this case, this patch fixes a Control Flow Integrity (CFI) violation in the i915 driver, which I found while testing kCFI, a new CFI scheme specifically for the Linux kernel being developed in Clang/LLVM.\ndrm/i915: Fix CFI violation with show_dynamic_id() (v1) Stable backports: These are patches It is important to make sure that the stable trees are as free from issues as possible, as those are the trees that devices and users use; for example, Android and Chrome OS regularly merge from stable, so if there is a problem that will impact those trees that we fixed in mainline, it should be backported.\nWarning fixes for clang + x86_64 allmodconfig on 5.10 and 5.4 Warning fixes: These are patches to fix various warnings that appear with LLVM. I used to go into detail about the different warnings and what they mean, but the important takeaway for this section is that the kernel should build warning free, as all developers should be using CONFIG_WERROR, which will turn these all into failures. Maybe these should be in the build failures section\u0026hellip;\ni2c: at91: Initialize dma_buf in at91_twi_xfer() (v1) nvme: Ensure ret is always initialized in nvme_ns_head_chr_uring_cmd() (v1) misc: rtsx: Fix clang -Wsometimes-uninitialized in rts5261_init_from_hw() (v1) mailbox: qcom-ipcc: Fix -Wunused-function with CONFIG_PM_SLEEP=n (v1) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH v1 00/11] PCI/PM: Rework powering up PCI devices Re: uninitialized variables bugs Re: [PATCH v3 00/15] kbuild: yet another series of cleanups (modpost, LTO, MODULE_REL_CRCS) Re: [RESEND PATCH v1] x86/build: add -fno-builtin flag to prevent shadowing Re: [PATCH kernel] powerpc/llvm/lto: Allow LLVM LTO builds Re: [PATCH v4 00/14] kbuild: yet another series of cleanups (modpost, LTO, MODULE_REL_CRCS, export.h) Re: [GIT PULL] virtio: last minute fixup Initial statically linked clang image Re: [PATCH 4/8] s390/entry: workaround llvm's IAS limitations Re: [PATCH v5 00/12] kbuild: yet another series of cleanups (modpost, LTO, MODULE_REL_CRCS, export.h) Re: [PATCH 0/8] s390: allow to build with llvm's integrated assembler Re: [PATCH 4.19] MIPS: fix allmodconfig build with latest mkimage Re: [PATCH] misc: rtsx: Set setting_reg2 before use. Re: [RFC PATCH v2 00/21] KCFI support Re: [PATCH] can: mcp251xfd: silence clang's -Wunaligned-access warning Re: [PATCH 1/1] um: fix error return code in winch_tramp() -mharden-sls=all for x86 add github action workflow Epoch2 llvm-project: add epoch3 Re: [PATCH] drm/ssd130x: Only define a SPI device ID table when built as a module Re: [PATCH] ARM: entry: add .ltorg directive to keep literals in range Issue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: arch/x86/entry/entry: RFC on recent kernels building error with llvm 11.0.2 internal assembler Re: [PATCH] interconnect: Restore sync state by ignoring ipa-virt in provider count Re: [willy-pagecache:for-next 60/69] fs/ntfs/aops.c:378:12: warning: stack frame size (2216) exceeds limit (1024) in 'ntfs_read_folio' [BOLT] Minimum hardware requirements? Re: [PATCH 00/21] Folio patches for 5.19 Re: [TCWG CI] Regression caused by llvm: [GVN] Encode GEPs in offset representation Re: [PATCH v3 4/9] PCI/PM: Rework changing power states of PCI devices Re: [PATCH v3] random: use first 128 bits of input as fast init Re: ld.lld: error: inline assembly requires more registers than available at line 523 INIT_STACK_ALL_ZERO - Framework Laptop system freezes (kernel oops?) on boot Re: [PATCH v2] i2c: at91: use dma safe buffers Re: linux-next: build failure after merge of the amdgpu tree Pedantically warn about // comments in gnu89 mode Re: [PATCH bpf-next 8/9] libbpf: automatically fix up BPF_MAP_TYPE_RINGBUF size, if necessary [ELF] Align the end of PT_GNU_RELRO to max-page-size instead of common-page-size __aeabi_uldivmod in drivers/mtd/parsers/scpart.o __mulodi4 in lib/overflow_kunit.o Re: [linux-next:master 9995/11651] fs/buffer.c:2254:5: warning: stack frame size (2144) exceeds limit (1024) in 'block_read_full_folio' Suggest typoed directives in preprocessor conditionals \u0026quot;invalid input constraint '0' in asm\u0026quot; in arch/riscv/include/asm/errata_list.h objtool \u0026quot;no non-local symbols\u0026quot; error with tip of tree LLVM -Wframe-larger-than in sound/soc/intel/avs/path.c Empty download_url key Re: [linux-next:master 12308/12886] arch/x86/kvm/hyperv.c:1983:22: warning: shift count \u0026gt;= width of type [PowerPC] Implement XL compat __fnabs and __fnabss builtins. Re: [PATCH v1] driver core: Extend deferred probe timeout on driver registration Re: [TCWG CI] Regression caused by llvm: [InstCombine] fold icmp with sub and bool Re: [PATCH v5 5/7] null_blk: allow non power of 2 zoned devices Re: drivers/dma/imx-dma.c:1048:20: warning: cast to smaller integer type 'enum imx_dma_type' from 'const void *' CFI failure target: simpledrm_simple_display_pipe_mode_valid Build timeouts due to infrastructure error retries? Tooling improvements These are changes to various tools that we use, such as our continuous integration setup, booting utilities, toolchain building scripts, or other closely related projects such as AOSP\u0026rsquo;s distribution of LLVM and TuxMake.\nbuild-llvm.py: Add a note about LLVM commit 7d7771f34d14 for BOLT docker: clang-android: Update to r450784e (14.0.7) A couple of fixes for making tests pass on Arch Linux ci: Wire up Arch Linux package building Add support for ChromeOS boot-qemu.sh: Fix aarch64 KVM after cb0698a Fix ChromeOS runs build-llvm.py: Introduce \u0026quot;slim\u0026quot; PGO Disable ChromeOS jobs temporarily Enable the integrated assembler for s390 on -next Add objtool patch for stable and 5.15 Upgrade stable anchor to 5.18 Disable arm64 CFI builds on mainline for clang-{12,13} Test statically linked clang outside of Alpine Linux patches: 5.15: Fix objtool patch github: workflows: Update Docker actions Sink 'docker login' step to right before image push and other small cleanups github: Move to a composite action for llvm-project builds github: workflows: Rename llvm-project workflows Update checkout, download-artifact, and upload-artifact versions Upload toolchain tarball when build is successful Behind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Windows Subsystem for Linux instance, a Raspberry Pi 3 and 4, an Intel-based desktop, an AMD-based desktop, and an Intel-based laptop. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nI wrote a blog post as part of my work to get our llvm-project container builds self-hosted on GitHub Actions.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/may-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build errors: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)","title":"May 2022 ClangBuiltLinux Work"},{"content":"Recently, I started exploring setting up a self-hosted GitHub Actions runner for the work-in-progress LLVM builds that ClangBuiltLinux is looking to distribute on kernel.org, as GitHub Actions hosted runners are pretty underwhelming in terms of performance and we want to soup these builds up with Profile Guided Optimization. Additionallly, GitHub Actions does not have a hosted arm64 Linux option, which is becoming increasingly important with chips such as Apple\u0026rsquo;s M1 getting strong mainline Linux support.\nIn this guide, I\u0026rsquo;ll go over how I set up a Fedora virtual machine using libvirt to run GitHub Actions workflows, including some of the oddities I ran into. This is not intended to be an end all be all guide but I believe it is important to share knowledge, as I am unlikely to be the last person looking to do this.\nSet up libvirt I recommend running GitHub Actions in a virtual machine, which ensures that if you ever mess up a workflow or command, you are not risking damaging your host operating system. libvirt seems to be one of the most popular and well supported virtualization solutions on Linux so that is what I went with for this project.\nGetting libvirt installed and configured varies by distribution, so I cannot really get too specific here. There are guides for Arch Linux, Debian, and Fedora. The important steps are making sure that the libvirtd service is enabled and started and your user is a part of the libvirt group (or whatever the libvirt specific group is on your distribution).\nA few notes of issues/quirks I ran into:\nlibvirt has different URIs (system and session), which have different permissions. I hate using sudo if I do not have to ensure I am not messing my system up unnecessarily. By default, without root, you are in a user session, which only has access to QEMU\u0026rsquo;s user networking mode, instead of the default network, which is faster. Additionally, autostarting virtual machines on boot (which we want for a runner, which should be as available for jobs as possible) is only available for system URIs. If you are part of the libvirt group, you can access qemu:///system without root but you have to specifically request it via the --connect parameter to virsh and virt-install. To avoid doing that for every single command, you can the LIBVIRT_DEFAULT_URI environment variable to qemu:///session in your shell start up file (example for fish). This will make virsh and virt-install use the system URI by default so that everything \u0026ldquo;just works TM\u0026rdquo;.\nThe default network uses network address translation (NAT) via iptables to route traffic to and from the virtual machine. As a result, the virtual machine is not accessible to the network, which is just fine for our use case. If you need more flexibility, check out the libvirt Networking Handbook, which was very informative. I will be concerned with the default network for the rest of this guide.\nIf you are starting virtual machines on boot and you have set the machine to use KVM, the KVM modules must be in your initrd so that they are loaded before init starts, otherwise you might see an error like \u0026quot;unsupported configuration: Domain requires KVM, but it is not available. Check that virtualization is enabled in the host BIOS, and host configuration is setup to load the kvm modules.\u0026quot;. Again, this varies by distribution; for Arch Linux, you can add your vendor module (kvm_amd or kvm_intel) to the MODULES array in /etc/mkinitcpio.conf and regenerate all initrds with mkinitcpio -P.\nOnce it is installed, make sure that the default network is set to automatically start on boot:\n$ virsh net-autostart default Make sure that the default network is currently started:\n$ virsh net-start default If it fails saying it is already started, that is obviously fine.\nCreate and set up Fedora virtual machine GitHub Actions supports a few different distributions for the self-hosted runner application. I prefer Fedora as it is stable while still having up to date packages in its repositories so that is what this guide is going to cover but you can use a different operating system if you prefer; you\u0026rsquo;re just on your own for figuring out how to install the virtual machine using virt-install :)\nvirt-install is the command line tool for creating virtual machine and virsh is the command line tool for managing them. virt-manager is a graphical user interface that helps create and manage virtual machines. I use all of my Linux machines completely headless so this part of the guide is going to cover using the first two tools.\nvirt-install has a ton of different options, see the man page for a full explanation of what they do.\nRunning virt-install My comnmand on an x86_64 host looks like:\n$ virt-install \\ --name fedora \\ --vcpus $(math $(nproc) / 2) \\ --memory $(math $(nproc) x 1024) \\ --cpu host \\ --network network=default \\ --boot uefi \\ --location https://download.fedoraproject.org/pub/fedora/linux/releases/36/Server/$(uname -m)/os \\ --disk size=50,format=qcow2 \\ --virt-type kvm \\ --console pty,target_type=serial \\ --extra-args \u0026#34;console=ttyS0,115200n8\u0026#34; \\ --graphics none The vcpus, memory, and disk options will vary. The math command is specific to fish so you will need to supply actual numbers or use $(( $(nproc) / 2 ))/$(( $(nproc) * 2)) for bash/zsh. For my use case, I allocated half of the threads/cores of the host system to the virtual machine, 2GB of memory for each vCPU, and a 50GB disk image. The memory parameter is in MiB, so multiply how many gigabytes of memory you want by 1024.\nThe console, extra-args, and graphics values are due to running this machine headless; a graphical install might want something different, at which point I would probably just recommend using virt-manager.\nFor an aarch64 host, the command is almost the same:\n$ virt-install \\ --name fedora \\ --vcpus $(math $(nproc) / 2) \\ --memory $(math $(nproc) x 1024) \\ --cpu host-passthrough \\ --network network=default \\ --boot uefi \\ --location https://download.fedoraproject.org/pub/fedora/linux/releases/36/Server/\u0026#34;$(uname -m)\u0026#34;/os \\ --disk size=50,format=qcow2 \\ --virt-type kvm \\ --console pty,target_type=serial \\ --extra-args \u0026#34;console=ttyAMA0,115200\u0026#34; \\ --graphics none --cpu host-passthrough instead of --cpu host due to this bug.\nThe extra-args console= value is different.\nInstall Fedora using Anaconda\u0026rsquo;s text mode After running the virt-install command, you should see a bunch of kernel and systemd output then you should see the Anaconda installation page asking if you want to use VNC or the text based installer. I have not messed around with the VNC option, the text installer works fine in my experience.\nOnce the installer is loaded, move through each of the options. Here are some of my recommendations:\nCustomize the language and time zone to how you see fit. I set the NTP server to time.google.com. The installation location should be set to the URL of --location; I did not bother selecting any of the package groups they offered because I wanted to keep the runner environment as simple as possible. I always stick with the default partition (and I\u0026rsquo;ll go more into that later). In the networking options, I recommend setting the hostname to something unique so that you can potentially add multiple runners in the future (I used fedora-github-action-runner-\u0026lt;arch\u0026gt;-\u0026lt;num\u0026gt;, like fedora-github-actions-runner-x86_64-1). I set the root password to something strong and added a user account called runner that was not an administrator with no password so that the runner account was completely unpriviledged and it will be easy to log into the runner account for future configuration. Doing system administration will happen only under the root account. After everything is configured, run the installer by pressing b; after a while, you will see the installation completed and press Enter to reboot the virtual machine.\nConfiguring Fedora for GitHub Actions Once you are at the login screen, log into the root account. We are going change a few sshd configuration options to allow us to log into the virtual machine via ssh for administration, as the serial console is not so nice to work with.\nWe need to change the setting of logging into the root account via ssh. To start, we will allow logging into the root account via either password or private key:\n# sed -i \u0026#39;s/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config # systemctl restart sshd To get the virtual machine\u0026rsquo;s IP address, use virsh net-dhcp-leases default:\n$ virsh net-dhcp-leases default Expiry Time MAC address Protocol IP address Hostname Client ID or DUID ---------------------------------------------------------------------------------------------------------------------------- 2022-05-27 15:58:37 52:54:00:5c:24:6c ipv4 192.168.122.104/24 fedora-github-actions-vm 01:52:54:00:5c:24:6c If you have a private ssh key, you can now use ssh-copy-id to add your key to authorized_keys then change the PermitRootLogin value to prohibit-password. Otherwise, ignore this step and just rely on logging in via the root password.\n# sed -i \u0026#39;s/PermitRootLogin yes/PermitRootLogin prohibit-password/g\u0026#39; /etc/ssh/sshd_config # systemctl restart sshd Now you can press Ctrl + ] to exit the virsh console and log into the virtual machine via ssh:\n$ ssh root@... If you did not assign a password to your runner account, you need to allow logging in no password via ssh:\n# sed -i \u0026#39;s/^#PermitEmptyPasswords no/PermitEmptyPasswords yes/g\u0026#39; /etc/ssh/sshd_config # systemctl restart sshd If you have a private ssh key, you can now authorize it via ssh-copy-id to the runner account then flip the value you changed above; otherwise, ignore this step.\n# sed -i \u0026#39;s/^PermitEmptyPasswords yes/#PermitEmptyPasswords yes/g\u0026#39; /etc/ssh/sshd_config # systemctl restart sshd If you stuck with the default partitioning scheme during setup, we need to expand the root partition of our virtual machine, as for some reason, the Fedora Server installer only allocates 15GB.\n# dev_mapper=$(df -H | grep /dev/mapper/ | cut -d \u0026#39; \u0026#39; -f 1) # lvextend -l +100%FREE \u0026#34;$dev_mapper\u0026#34; # xfs_growfs \u0026#34;$dev_mapper\u0026#34; To use actions that use Docker containers, we need to actually install and configure Docker:\n# dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo # dnf install -y \\ containerd.io \\ docker-ce \\ docker-ce-cli \\ docker-compose-plugin # usermod -aG docker runner # systemctl enable --now docker I would recommend installing git to ensure you do not use the REST API to download repositories:\n# dnf install -y git After this, we are done configuring in the root account. Log into the runner account via ssh and make sure that Docker actually works:\n$ ssh runner@... $ docker run --rm hello-world Setting up GitHub Actions Once that works, go to the repository that you want to add the runner to, click on the Setting tab, click on the Actions option in the sidebar, click on Runners, and finally click on the green button \u0026ldquo;New self-hosted runner\u0026rdquo;. Click \u0026ldquo;Linux\u0026rdquo; and select the correct architecture of the virtual machine.\nFollow the Download instructions (they are copy and paste). The validation step has shasum -a 256, I had to change that to sha256sum on Fedora.\nRun the first step under the \u0026ldquo;Configure\u0026rdquo; section:\n$ ./config.sh --url ... --token ... For the second step, we are not going to use ./run.sh; instead, we are going to configure the systemd service that is generated from the ./config.sh step.\nFirst, we need to install the service. I am assuming that you did not add the runner account to the wheel group so sudo will not work; we will use su -c + the root password instead, as this is a one-time setup steup.\n$ su -c \u0026#34;./svc.sh install runner\u0026#34; Next, I recommend installing a \u0026ldquo;clean up\u0026rdquo; script to match the hosted GitHub Actions workflow, where every workflow run is completely clean. We do this before the service is actually started to ensure the variable is added to the environment.\n$ cat \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; \u0026gt;\u0026#34;$HOME\u0026#34;/cleanup.sh #!/usr/bin/env bash rm -frv \u0026#34;${GITHUB_WORKSPACE%/*}\u0026#34; EOF $ chmod +x \u0026#34;$HOME\u0026#34;/cleanup.sh SELinux is enabled on Fedora, which makes the GitHub Actions service unhappy; this impact this script as well, since it is running under the GitHub Actions service context.\n$ su -c \u0026#34;semanage fcontext --add --type initrc_exec_t $HOME/cleanup.sh\u0026#34; $ restorecon -v \u0026#34;$HOME\u0026#34;/cleanup.sh Add the script to the environment of the runner:\n$ echo \u0026#34;ACTIONS_RUNNER_HOOK_JOB_COMPLETED=$HOME/cleanup.sh\u0026#34; \u0026gt;\u0026gt;\u0026#34;$HOME\u0026#34;/actions-runner/.env We need to do the same SELinux workaround for the service script:\n$ su -c \u0026#34;semanage fcontext --add --type initrc_exec_t $HOME/actions-runner/runsvc.sh\u0026#34; $ restorecon -v \u0026#34;$HOME\u0026#34;/actions-runner/runsvc.sh Finally, we start the runner!\n$ su -c \u0026#34;./svc.sh start\u0026#34; With any luck, you will now see the service started and you should be able to refresh the Runner setup screen on GitHub to see your runner in an idle status.\nAt this point, if you want your runner to be available after a reboot of the host machine, mark it for autostart:\n$ virsh autostart fedora Domain \u0026#39;fedora\u0026#39; marked as autostarted $ virsh dominfo fedora Id: 1 Name: fedora UUID: 9385d2f8-2785-4aaf-8581-9d09f0d7a533 OS Type: hvm State: running CPU(s): 24 CPU time: 51390.2s Max memory: 50331648 KiB Used memory: 50331648 KiB Persistent: yes Autostart: enable Managed save: no Security model: none Security DOI: 0 Questions If you have any questions or comments, feel free to leave them in the comments down below or reach out to me on Twitter.\n","permalink":"https://nathanchance.dev/posts/github-actions-fedora-libvirt/","summary":"Recently, I started exploring setting up a self-hosted GitHub Actions runner for the work-in-progress LLVM builds that ClangBuiltLinux is looking to distribute on kernel.org, as GitHub Actions hosted runners are pretty underwhelming in terms of performance and we want to soup these builds up with Profile Guided Optimization. Additionallly, GitHub Actions does not have a hosted arm64 Linux option, which is becoming increasingly important with chips such as Apple\u0026rsquo;s M1 getting strong mainline Linux support.","title":"Setting up a self-hosted GitHub Actions runner in a Fedora virtual machine using libvirt"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build failures: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)\narm64: Improve HAVE_DYNAMIC_FTRACE_WITH_REGS selection for clang (v1) Downstream patches: Downstream consumers of our work are not always paying attention to the changes that we land every release so it is important to give them a little help. In this case, we had to disable CONFIG_FORTIFY_SOURCE for clang upstream since it was broken, which impacted Android. As this is an important security feature, it is important that it gets re-enabled once it is fixed, which is what the following change does.\nRevert \u0026quot;ANDROID: GKI: CONFIG_FORTIFY is broken in clang, so it has been disabled\u0026quot; Stable backports and patches: These are patches It is important to make sure that the stable trees are as free from issues as possible, as those are the trees that devices and users use; for example, Android and Chrome OS regularly merge from stable, so if there is a problem that will impact those trees that we fixed in mainline, it should be backported.\nBackport of 4013e26670c5 and 60210a3d86dc for 4.9 to 5.10 (v1) Fix two instances of -Wstrict-prototypes in drm/amd (v1) btrfs warning fixes for 5.15 and 5.17 Apply d799769188529abc6cbf035a10087a51f7832b6b to 5.17 and 5.15? Warning fixes: These are patches to fix various warnings that appear with LLVM. I used to go into detail about the different warnings and what they mean, but the important takeaway for this section is that the kernel should build warning free, as everyone should be using CONFIG_WERROR, which will turn these all into failures. Maybe these should be in the build failures section\u0026hellip;\nlib/raid6: Add -Wno-declaration-after-statement to NEON_FLAGS for clang \u0026lt; 14.0.1 (v1) drm/msm/gpu: Avoid -Wunused-function with !CONFIG_PM_SLEEP (v2) platform/x86: amd-pmc: Shuffle location of amd_pmc_get_smu_version() (v1) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH 1/3] kbuild: Change CFI_CLANG to depend on __builtin_function_start\nRe: [PATCH v2] cfi: Use __builtin_function_start\nRe: [tip: x86/build] x86/configs: Add x86 debugging Kconfig fragment plus docs\nRe: [PATCH] rtw89: ser: add a break statement\nRe: [PATCH] MAINTAINERS: add self as clang reviewer\nRe: [PATCH] drm/amd/display: fix 64 bit divide in freesync code\nRe: [PATCH] drm/amd/display: fix 64 bit divide in freesync code\nRe: [PATCH] ipc/sem: Remove redundant assignments\nRe: [PATCH] usb: typec: tipd: improve handling of failures in interrupt handlers\nRe: [PATCH] init/Kconfig: Remove USELIB syscall by default\nRe: [PATCH] fbcon: Fix delayed takeover locking\nRe: [PATCHv4] drm/amdgpu: disable ASPM on Intel Alder Lake based systems\nRe: [PATCH] spi: initialize status to success\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [next] riscv: Linux next-20220404 riscv defconfig builds failed.\nRe: Build perf with clang, failure with libperf\narm64 defconfig kernel (4.14.275) no longer boots after FEAT_LPA implementation in TCG\nRe: allmodconfig builds failing to link on arm64\nKernel building script not working for ARM64\nRe: [PATCH 1/1] um: fix error return code in winch_tramp()\nRe: [PATCH v3 14/17] fbcon: Move console_lock for register/unlink/unregister\nquestion: how to find out why a linking error happens?\nPGO clang crashes with BOLT instrumentation\nBOLT fails to instrument clang on AArch64 host\n[ELF] Assert on invalid GOT or PLT relocations\nRe: [tty:tty-linus 23/26] drivers/tty/n_gsm.c:939:13: warning: variable 'size' is used uninitialized whenever 'if' condition is false\nRe: [PATCH v2 05/11] smp: replace smp_call_function_single_async() with smp_call_private()\nRe: [PATCH] checksyscalls: ignore -Wunused-macros\nINIT_STACK_ALL_ZERO - System freezes (kernel oops?) on boot\nLTO on ARM 32bit ARM system fails\nRe: Android 11 clang toochain: kernel 5.18 build error with 32 bit target\n[VPlan] Replace use of needsVectorIV with VPlan user check.\n[BOLT] Minimum hardware requirements?\n[RISCV] Merge addi into load/store as there is a ADD between them\nTooling improvements These are changes to various tools that we use, such as our continuous integration setup, booting utilities, toolchain building scripts, or other closely related projects such as AOSP\u0026rsquo;s distribution of LLVM and TuxMake.\nDrop UML -next patch\ndocker: clang-android: Update to r450784b (14.0.4)\nTurn on ARCH=um builds again\ncheck_logs.py: Set execute bit for UML images before running 'boot-uml.sh'\nUpdate mainline patches (April 6, 2022)\nboot-qemu.sh: Use different CPU for arm64 with new QEMU + old kernel\ncheck_logs.py: Fix name of variable in run_boot()\nFix ARCH=um boot testing, part 2\nRemove mainline patches (April 14, 2022)\nEnable ARCH=hexagon allmodconfig on 5.15\nbuild-llvm.py: Dynamically link the instrumented stage against libLLVM\nDisable arm64 CFI builds on -next for clang-{12,13}\ndocker: clang-android: Update to r450784d (14.0.6)\ntc-build: Initial BOLT support\ngithub: workflows: Fix clang-version\nboot-qemu.sh: Use implementation defined pointer authentication algorithm\nBuild powerpc64le configs with LLVM=1 with LLVM 14\nboot-utils: Upgrade for implementation defined pointer authentication\nqemu: Update package list\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Windows Subsystem for Linux instance, a Raspberry Pi 3 and 4, an Intel-based desktop, an AMD-based desktop, and an Intel-based laptop. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nTwo new blog posts, which may help other developers over time:\nPackage a standalone Linux kernel using the Arch Linux Build System\nBisecting a Linux Kernel boot failure due to changed compiler flags\nI wrote a Python script for easily driving QEMU, which is useful for testing new changes or verifying issues in a safe and easy to debug manner.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/april-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build failures: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)","title":"April 2022 ClangBuiltLinux Work"},{"content":" I am a 27 year old Linux kernel and LLVM hacker, currently employed as an independent contractor through The Linux Foundation to maintain ClangBuiltLinux. I am interested in performance analysis, compilers, security, and operating systems. I completed my Bachelor of Science in Information Technology at Grand Canyon University in 2022.\nBelow are links to some of my open source contributions. If you have any questions about them, feel free to reach out to me with the links on the home page.\nClangBuiltLinux ClangBuiltLinux is a collaborative organization between several engineers across different companies like Google, Linaro, and IBM to improve building the Linux kernel with the LLVM tools such as clang and lld. I have contributed various fixes to the Linux kernel and LLVM, helped triage and debug issues on the issue tracker, improved the continuous integration setups (Travis CI based and TuxSuite / GitHub Actions based), developed a QEMU and buildroot boot framework, a Docker testing environment (former and current), and a set of toolchain build scripts for myself and others to use for consistent testing/developing.\nFlash Kernel I supported the Pixel 2 (XL) [walleye/taimen], Pixel (XL) [sailfish/marlin], OnePlus 6 (enchilada), OnePlus 5/T (cheeseburger/dumpling), and Nexus 6P (angler).\nAll of my kernels focused on stability/security by merging in the stable updates from kernel.org, any relevant updates from Qualcomm, and building with newer compilers to fix warnings during compilation. Below are the highlights for each kernel.\nPixel 2 (XL): First to merge in linux-stable and build with up to date versions of Clang. Added EAS 1.5 from kernel/common.\nPixel (XL): First standalone custom kernel to be compiled properly with Clang, fixing the vast majority of warnings.\nOnePlus 6: I recieved this device as part of OnePlus\u0026rsquo;s developer program. I was the first to merge in linux-stable and the updates from Code Aurora Forum, build with Clang, and port over the 32-bit vDSO for arm64 from the Pixel 2 kernels (initially created on a 4.4 base).\nMiscellaneous open source contributions android-linux-stable: Several Android kernel trees with the latest stable tags from kernel.org merged into them, along with conflict resolution notes and a how-to process for other developers and information for users to understand the process. Testing includes merging into my own Flash Kernel repositories linked above and building with all of the relevant defconfigs/compilers. I report results back to the stable tree maintainers, receiving praise for my efforts on a couple occasions (one and two). I streamlined the maintenance of these repos into a script.\nandroid-kernel-clang: Collected the core Clang patchset for Android kernels from the Pixel 2 and Chromium kernel repositories, supplementing them with fixes for warnings from out of tree code.\nAnyKernel3: A kernel flashing utility for TWRP, responsible for unpacking the boot image, applying any requested ramdisk changes, repacking the files, and flashing them to the boot image partition.\nkernel/common: Google\u0026rsquo;s common Android kernel.\nsonyxperiadev/kernel: The Linux kernel used for Sony\u0026rsquo;s Open Devices program.\nMiscellaneous interesting personal repos My environment: The scripts and tools I use for my workflow and personal configuration files, focusing on increasing productivity by decreasing manual intervention needed to doing repetitive tasks.\nWSL2-Linux-Kernel: My personal kernel for Windows Subsystem for Linux 2.\n","permalink":"https://nathanchance.dev/about/","summary":"I am a 27 year old Linux kernel and LLVM hacker, currently employed as an independent contractor through The Linux Foundation to maintain ClangBuiltLinux. I am interested in performance analysis, compilers, security, and operating systems. I completed my Bachelor of Science in Information Technology at Grand Canyon University in 2022.\nBelow are links to some of my open source contributions. If you have any questions about them, feel free to reach out to me with the links on the home page.","title":"About"},{"content":"Occasionally, compiling the Linux kernel with a new compiler flag will result in a boot failure. If you are lucky, there will be some output to the serial console but that may not happen if the issue happens in early boot code before the serial driver has loaded. When this happens, it usually requires building part of the kernel without the compiler flag (or the \u0026ldquo;negative\u0026rdquo; version of it) to try and figure out the exact translation unit and function that causes the problem. I\u0026rsquo;ll go over this process at a high level to help others who might encounter this same issue.\nI will honest up front, this process is not super clean cut; there is some \u0026ldquo;feel\u0026rdquo; about it, but I will do my best to explain that right up front. If any of this is confusing, please let me know where you were confused and I will do my best to clarify in this post for future travellers.\n1. Figure out what flag is causing the issue Hopefully you are not making multiple code generation flag changes at once ;) but if you are, you need to figure out which flag is causing the problem.\nThe whole preface of this blog post came from the ClangBuiltLinux issue INIT_STACK_ALL_ZERO - Framework Laptop system freezes (kernel oops?) on boot. The reporter already figured out that CONFIG_INIT_STACK_ALL_ZERO was responsible for the change, which we can see in the main kernel Makefile corresponds to -ftrivial-auto-var-init=zero:\n$ sed -n \u0026#39;826,832p\u0026#39; Makefile ifdef CONFIG_INIT_STACK_ALL_ZERO KBUILD_CFLAGS += -ftrivial-auto-var-init=zero ifdef CONFIG_CC_IS_CLANG # https://bugs.llvm.org/show_bug.cgi?id=45497 KBUILD_CFLAGS += -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang endif endif 2. Figure out if there is a \u0026ldquo;negative\u0026rdquo; flag Once the problematic flag has been uncovered, we want to know if the flag has a \u0026ldquo;negative\u0026rdquo; version; in other words, we want to know if there is a flag to turn off the problematic flag. In the case of -ftrivial-auto-var-init=zero, we can go to Clang\u0026rsquo;s cpmmand line reference and see that the default of -ftrivial-auto-var-init= is uninitialized, which means that -ftrivial-auto-var-init=uninitialized will \u0026ldquo;undo\u0026rdquo; -ftrivial-auto-var-init=zero. This allows us to append -ftrivial-auto-var-init=uninitialized to certain files to see if the issue disappears, which will allow us to discover the translation unit that has the issue.\nIf there is not a negative flag, you will have to resort to removing the flag from folders and translation units, which is possible, but I am not going to cover that in this post.\n3. Strategically start adding negative flag to translation units The Linux kernel\u0026rsquo;s build system (Kbuild) allows one to include flags for individual translation units (.o) and entire folders. You can read about the details of each in the Linux Kernel Makefiles documentation. First, we will use subdir-ccflags-y to add the negative flag to entire subfolders then slowly work towards individual flags. Picking the folder or folders that we start in is one of the hardest parts of this process, as it is not the same every single time.\nTo start, it is pretty safe to start with arch/\u0026lt;your_architecture\u0026gt;/Kbuild and mm/Makefile, as that is all code that runs early in boot, which would look like:\ndiff --git a/arch/x86/Kbuild b/arch/x86/Kbuild index 5a83da703e87..4bb2323eba7c 100644 --- a/arch/x86/Kbuild +++ b/arch/x86/Kbuild @@ -30,3 +30,5 @@ obj-$(CONFIG_KEXEC_FILE) += purgatory/ # for cleaning subdir- += boot tools + +subdir-ccflags-y := -ftrivial-auto-var-init=uninitialized diff --git a/mm/Makefile b/mm/Makefile index 4cc13f3179a5..30717aad76de 100644 --- a/mm/Makefile +++ b/mm/Makefile @@ -3,6 +3,8 @@ # Makefile for the linux memory manager. # +subdir-ccflags-y := -ftrivial-auto-var-init=uninitialized + KASAN_SANITIZE_slab_common.o := n KASAN_SANITIZE_slab.o := n KASAN_SANITIZE_slub.o := n If the issue is resolved with this diff, we have a known good kernel and a known bad kernel, which means it is possible to do further bisection. If the issue is not resolved, it means that these folders do not have the code responsible for the issue. The next place I would start is somewhere in drivers/, as it is possible that a driver problem can cause issues with the device fully starting up. For example, a problem in drivers/gpu/drm might result in no graphical output:\ndiff --git a/drivers/gpu/drm/Makefile b/drivers/gpu/drm/Makefile index c2ef5f9fce54..a3ed2f48fa84 100644 --- a/drivers/gpu/drm/Makefile +++ b/drivers/gpu/drm/Makefile @@ -3,6 +3,8 @@ # Makefile for the drm device driver. This driver provides support for the # Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher. +subdir-ccflags-y := -ftrivial-auto-var-init=uninitialized + drm-y := drm_aperture.o drm_auth.o drm_cache.o \\ drm_file.o drm_gem.o drm_ioctl.o \\ drm_drv.o \\ 4. Start moving down the folder that is problematic At this point, you will want to try and narrow the problem down to one top level folder (such as arch/\u0026lt;your_architecture\u0026gt;, drivers, or mm) so that you can focus on moving down the directory structure quickly.\nOnce you have the folder (I\u0026rsquo;ll be using arch/x86 as an example), you will want to find all the Makefiles that are directly below where you started. For example, in arch/x86:\n$ fd -d 2 Makefile arch/x86 arch/x86/Makefile arch/x86/Makefile.um arch/x86/Makefile_32.cpu arch/x86/boot/Makefile arch/x86/coco/Makefile arch/x86/crypto/Makefile arch/x86/entry/Makefile arch/x86/events/Makefile arch/x86/hyperv/Makefile arch/x86/ia32/Makefile arch/x86/kernel/Makefile arch/x86/kvm/Makefile arch/x86/lib/Makefile arch/x86/math-emu/Makefile arch/x86/mm/Makefile arch/x86/net/Makefile arch/x86/pci/Makefile arch/x86/platform/Makefile arch/x86/power/Makefile arch/x86/purgatory/Makefile arch/x86/realmode/Makefile arch/x86/tools/Makefile arch/x86/um/Makefile arch/x86/video/Makefile arch/x86/xen/Makefile We want to remove the original subdir-ccflags-y from the higher Makefile and move it down into the individual Makefiles. Once that is done, boot your kernel to make sure the issue is still fixed, as it should be.\nOnce that is done, remove the addition to half of the Makefile and see if the issue is resolved. If it is, we know the issue is in the folders that still have the negative flag. If it is not, we know the issue is in the folders that we just removed the negative flag from. From there, move the flags further and further down until you arrive at a folder with no subdirectories. I would recommend committing your changes via git, as that will make it easier to verify what kernel you are testing and undoing changes is much easier.\n5. Bisect individual translation units Once you have arrived at a folder with just Makefile and some .c files, you are ready to figure out the problematic translation unit (or units!).\nRemove any subdir-ccflags-y that you have added. We need to generate a set of CFLAGS for the individual translation units to test. Assuming you stil have the object files from your previous build, you can generate this using a shell command such as:\n$ for file in \u0026lt;subdir\u0026gt;/*.o; do echo CFLAGS_$(basename \u0026#34;$file\u0026#34;) := \u0026lt;negative_flag\u0026gt; done \u0026gt;\u0026gt;\u0026lt;subdir\u0026gt;/Makefile For example, if I were testing mm/:\n$ for file in mm/*.o; do echo CFLAGS_$(basename \u0026#34;$file\u0026#34;) := \u0026lt;negative_flag\u0026gt; done \u0026gt;\u0026gt;mm/Makefile At this point, make sure the issue is still fixed. If it is, do the same process as above by either deleting or commenting out the flags and seeing if the issue is still resolved. If it is, the issue is in one of the files that still has the flags applied. If the issue comes back, you know the issue is in one of the files that just had the flag removed. Repeat this process until you are left with a minimal set of files that does not have the issue.\n6. Bisect individual functions Once there is a set of translation units, it might be possible to further narrow down what function causes the problem using function or variable attributes. By this point, it might be obvious why there is a problem but if not, you will basically apply the attribute to the types that need it and do a similar process.\nIn the case of -ftrivial-auto-var-init=uninitialized, there is __attribute((uninitialized)), which can be applied to local variables, such as:\ndiff --git a/mm/hmm.c b/mm/hmm.c index 3fd3242c5e50..54f53bbe3632 100644 --- a/mm/hmm.c +++ b/mm/hmm.c @@ -235,7 +235,7 @@ static int hmm_vma_handle_pte(struct mm_walk *walk, unsigned long addr, struct hmm_vma_walk *hmm_vma_walk = walk-\u0026gt;private; struct hmm_range *range = hmm_vma_walk-\u0026gt;range; unsigned int required_fault; - unsigned long cpu_flags; + __attribute((uninitialized)) unsigned long cpu_flags; pte_t pte = *ptep; uint64_t pfn_req_flags = *hmm_pfn; From there, do the same process of applying the attribute, testing, and removing until you are left with a single set of variables. After that, analysis can commence.\nComments If you have any problems or need help, feel free to comment down below or reach out to me via email or Twitter! I will do my best to keep this post up to date over time.\n","permalink":"https://nathanchance.dev/posts/bisect-compiler-flag-problem-linux-kernel/","summary":"Occasionally, compiling the Linux kernel with a new compiler flag will result in a boot failure. If you are lucky, there will be some output to the serial console but that may not happen if the issue happens in early boot code before the serial driver has loaded. When this happens, it usually requires building part of the kernel without the compiler flag (or the \u0026ldquo;negative\u0026rdquo; version of it) to try and figure out the exact translation unit and function that causes the problem.","title":"Bisecting a Linux Kernel boot failure due to changed compiler flags"},{"content":"As a Linux kernel developer, I will often need to build and boot new kernels to hunt down issues or test new functionality for regressions. While it is possible to manually install these kernels on machines, it is easiest to use the distribution\u0026rsquo;s package manager, as the kernel does not need to be built on the machine it is being installed on. With .deb and .rpm-based systems, it is easy to build a kernel package within the kernel source itself, using the bindeb-pkg and binrpm-pkg targets respectively. However, for Arch Linux, my distribution of choice, that is not so simple. Furthermore, when doing certain types of development, such as bisecting an issue, it is more convenient to do all the building in an actual source tree, rather than one that is managed by the Arch Build System. The following process might not be the most efficient or optimal way to do this process (the Arch wiki has a whole article about doing a git bisect with a PKGBUILD) but it works for me :)\nThe general idea is to let makepkg only do the final packaging, which frees us up to run whatever commands we need in order to generate the kernel and modules.\nNOTE: This guide assumes some familiarity with the Arch Build System and building a Linux kernel.\n1. Build the kernel For the following example, we will build a mainline Linux kernel. First, grab the kernel source.\n$ git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/ $ cd linux Once the source is downloaded, set up the version string file like Arch does in the main linux PKGBUILD, which helps with identifying the current kernel running.\n$ scripts/setlocalversion --save-scmversion I recommend adding a suffix, such as -debug, which will help you make sure you are running the correct kernel.\n$ echo -debug \u0026gt;localversion.10-pkgname Grab the latest Arch Linux configuration to make sure that your kernel will have all the drivers that the stock kernel does. If you are running a stock kernel, it is available at /proc/config.gz:\n$ zcat /proc/config.gz \u0026gt;.config Otherwise, you can fetch it from the Arch Linux repo\n$ curl -LSso .config https://github.com/archlinux/svntogit-packages/raw/packages/linux/trunk/config Bring the configuration up to date without any input; if you do want to be prompted, use oldconfig instead of olddefconfig. There might be some warnings but they should not be problematic.\n$ make -j\u0026#34;$(nproc)\u0026#34; olddefconfig At this point, you can customize the kernel you are about to build by running make menuconfig. If you want to save some time compiling, consider using make localmodconfig to only build the modules that your system is doing to run. I recommend installing modprobed-db and passing in the database it generates like so:\n$ make -j\u0026#34;$(nproc)\u0026#34; LSMOD=$HOME/.config/modprobed.db localmodconfig Next, we dump the kernel version to a file, which we will use in the packaging stage to ensure our files all end up in the correct location.\n$ make -s kernelrelease \u0026gt;version Finally, we will build the kernel, which can take some time depending on your hardware and such.\n$ make -j\u0026#34;$(nproc)\u0026#34; 2. Set up PKGBUILD and packaging space Once the kernel is all built, we need to set up our PKGBUILD and packaging area.\nI usually maintain the packaging in a random folder on my hard drive. I will be using this random folder throughout the rest of the example, feel free to change it to wherever is convenient for you. For ease of iteration, which I will touch on later, I recommend you maintain this OUTSIDE of the git repository you are working in.\n$ pkgroot=\u0026#34;$HOME/tmp/linux-pkgbuild\u0026#34; $ mkdir -p \u0026#34;$pkgroot\u0026#34; Create \u0026quot;$pkgroot\u0026quot;/PKGBUILD with your favorite editor. My typical PKGBUILD for these situations looks like:\npkgname=linux-debug pkgver= pkgrel=1 arch=(x86_64) license=(GPL2) options=(\u0026#39;!strip\u0026#39;) package() { pkgdesc=\u0026#34;The Linux kernel and modules\u0026#34; depends=(coreutils kmod initramfs) optdepends=(\u0026#39;crda: to set the correct wireless channels of your country\u0026#39; \u0026#39;linux-firmware: firmware images needed for some devices\u0026#39;) provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE) replaces=(virtualbox-guest-modules-arch wireguard-arch) local pkgroot=\u0026#34;${pkgdir//\\/pkg\\/$pkgname/}\u0026#34; rm -rf \u0026#34;$pkgroot\u0026#34;/pkg cp -rv \u0026#34;$pkgroot\u0026#34;/pkg-ext \u0026#34;$pkgroot\u0026#34;/pkg } # vim:set ts=8 sts=2 sw=2 et: Basically, we are doing to manually package everything in pkg-ext/, then we are just going to copy that to pkg/, and let makepkg do the rest.\n3. Package the kernel Once the packaging folder and PKGBUILD have been set up, we are ready to put everything together! This is basically taken straight from the Arch Linux linux PKGBUILD, check the _package() function for any updates to this process that might occur down the road.\nSet up variable for future use, which ensures everything gets placed in the right location (pkgroot was set above, linux-debug might be different depending on your pkgname choice in your PKGBUILD):\n$ pkg=linux-debug $ pkgdir=$pkgroot/pkg-ext/$pkg $ modulesdir=\u0026#34;$pkgdir/usr/lib/modules/$(\u0026lt;version)\u0026#34; Install the kernel:\n$ install -Dm644 \u0026#34;$(make -s image_name)\u0026#34; \u0026#34;$modulesdir\u0026#34;/vmlinuz Set up pkgbase, which is needed for mkinitcpio:\n$ echo \u0026#34;$pkg\u0026#34; | install -Dm644 /dev/stdin \u0026#34;$modulesdir\u0026#34;/pkgbase Install modules:\n$ make -j\u0026#34;$(nproc)\u0026#34; DEPMOD=/doesnt/exist INSTALL_MOD_PATH=\u0026#34;$pkgdir\u0026#34;/usr INSTALL_MOD_STRIP=1 modules_install Remove build and source symlinks:\n$ rm \u0026#34;$modulesdir\u0026#34;/{build,source} Update pkgver in your PKGBUILD, which helps ensure you installed the correct kernel:\n$ sed -i \u0026#34;s/pkgver=.*/pkgver=$(git describe | sed \u0026#39;s/-/./g\u0026#39;)/g\u0026#34; \u0026#34;$pkgroot\u0026#34;/PKGBUILD Finally, package it up!\n$ cd \u0026#34;$pkgroot\u0026#34; $ makepkg -R After that, install it with pacman and configure your bootloader, just like you would as if you were installing an official kernel. Make sure not to remove the stock linux package, as you might run into issues that requires a revert!\nIteration This whole process is very easily scriptable. If you need to do this process back to back, I would recommend:\nRemoving $pkgroot/pkg, $pkgroot/pkg-ext, and $pkgroot/*.tar.zst before building the next kernel, as that will prevent you from accidentally packaging an old kernel (i.e., skipping the third step).\nRun git clean -fxdq in the linux folder between builds and repeat step 1 fully (aside from the initial clone), which will prevent weird build system cache invalidation issues.\nGetting help I am happy to correct any part of this guide that felt unnecessary or confusing or improve it with any additional information. Feel free to comment below or reach out to me via Twitter or email with any feedback!\n","permalink":"https://nathanchance.dev/posts/package-standalone-linux-kernel-with-abs/","summary":"As a Linux kernel developer, I will often need to build and boot new kernels to hunt down issues or test new functionality for regressions. While it is possible to manually install these kernels on machines, it is easiest to use the distribution\u0026rsquo;s package manager, as the kernel does not need to be built on the machine it is being installed on. With .deb and .rpm-based systems, it is easy to build a kernel package within the kernel source itself, using the bindeb-pkg and binrpm-pkg targets respectively.","title":"Package a standalone Linux kernel using the Arch Linux Build System"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Boot fixes: These patches fix boot failures that we have seen in testing. In this case, it is a User Mode Linux fix, which we are looking to enable in our continuous integration setup, as it is useful for quick testing.\num: Fix filtering '-mno-global-merge' (v1) Build failures: These are patches to fix various build errors that I found through testing different configurations with LLVM or were exposed by our continuous integration setup. The kernel needs to build in order to be run :)\ncrypto: virtio - Select new dependencies (v1)\narm64: Do not include __READ_ONCE() block in assembly files (v1)\nARM: Do not use NOCROSSREFS directive with ld.lld (v1)\nx86/ibt: Fix CC_HAS_IBT check for clang (v1)\nx86: Avoid CONFIG_X86_X32_ABI=y with llvm-objcopy (v1)\nFix CONFIG_X86_KERNEL_IBT for clang and ld.lld \u0026lt; 14.0.0 (v1)\nKbuild improvements: These are patches to improve or fix issues with how we build the kernel with LLVM. The first one is particularly notable, as it was requested by a high profile kernel developer.\nkbuild: Make $(LLVM) more flexible (v1, v2)\nRemove '-mno-global-merge' from KBUILD_CFLAGS (v1)\nWarning fixes: These are patches to fix various warnings that appear with LLVM. I used to go into detail about the different warnings and what they mean, but the important takeaway for this section is that the kernel should build warning free, as everyone should be using CONFIG_WERROR, which will turn these all into failures. Maybe these should be in the build failures section\u0026hellip;\ndrm/selftest: plane_helper: Put test structures in static storage (v1)\nKVM: x86: Fix clang -Wimplicit-fallthrough in do_host_cpuid() (v1)\nnetfs: Ensure ret is always initialized in netfs_begin_read() (v1)\nbtrfs: Remove unused variable in btrfs_{start,write}_dirty_block_groups() (v1)\nclocksource/drivers/imx-tpm: Move tpm_read_sched_clock() under CONFIG_ARM (v1)\ni2c: designware: Mark dw_i2c_plat_{suspend,resume}() as __maybe_unused (v1)\ndrm/msm/gpu: Avoid -Wunused-function with !CONFIG_PM_SLEEP (v1)\nPatch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH 1/3] [v3] Kbuild: move to -std=gnu11\nRe: [PATCH v2 01/39] kbuild: Fix clang build\nRe: [PATCH] um: clang: Strip out -mno-global-merge from USER_CFLAGS\nRe: [PATCH bpf-next v2 5/8] compiler-clang.h: Add __diag infrastructure for clang\n[Mips] support \u0026quot;sp\u0026quot; named register\nRe: [PATCH v2 0/2] *** Fix reformat_objdump.awk ***\nRe: [PATCH] virtio_ring: Initialize vring_size_in_bytes\nRe: [PATCH] ARM: fix compilation error when BPF_SYSCALL is disabled\nRe: [PATCH v2] kbuild: add --target to correctly cross-compile UAPI headers with Clang\nRe: [PATCH] arm64: Paper over ARM_SMCCC_ARCH_WORKAROUND_3 Clang issue\nRe: [PATCH v2] drm/amkfd: bail out early if no get_atc_vmid_pasid_mapping_info\nRe: [PATCH] powerpc: Replace ppc64 DT_RELACOUNT usage with DT_RELASZ/24\nRe: [PATCH] MIPS: Only use current_stack_pointer on GCC\nRe: [PATCH 0/4] [v4] Kbuild: std=gnu11 changes\nRe: [PATCH] ASoC: atmel: mchp-pdmc: Fix -Wpointer-bool-conversion warning\nRe: [PATCH] soc: qcom: smem: use correct format characters\nRe: [PATCH -next] sched/headers: ARM needs asm/paravirt_api_clock.h\n[Clang][NeonEmitter] emit ret decl first for -Wdeclaration-after-statement\nRe: [PATCH v2] riscv module: remove (NOLOAD)\nRe: [PATCH] x86/config: Make the x86 defconfigs a bit more usable\nRe: [PATCH -next] PCI: hv: Remove unused function hv_set_msi_entry_from_desc()\nRe: [PATCH] cifs: fix enum usage\nRe: [PATCH] x86/extable: prefer local labels in .set directives\nRe: [PATCH] Fix kernel build with LLVM=1\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [PATCH bpf-next v1 6/6] selftests/bpf: Add tests for kfunc register offset checks\nRe: [next] mips: clang-14-defconfig build regression\nRe: [PATCH 1/2] drm/amdkfd: judge get_atc_vmid_pasid_mapping_info before call\nARM: AT expected, but got NOCROSSREFS\naspeed_g5_defconfig \u0026quot;error: invalid operand for instruction\u0026quot;\nRe: [lpieralisi-pci:pci/rcar 2/2] drivers/pci/controller/pcie-rcar-host.c:139:3: error: instruction requires: data-barriers\nRe: [kvm:queue 210/210] arch/x86/kvm/cpuid.c:739:2: warning: unannotated fall-through between switch labels\nCONFIG_THUMB2_KERNEL=y boot failure after Spectre BHB fixes\nRe: [kvm:queue 182/205] \u0026lt;inline asm\u0026gt;:40:208: error: expected relocatable expression\nRe: [PATCH v2 8/8] media: i2c: ov5670: Add .get_selection() support\nRe: [ammarfaizi2-block:google/android/kernel/common/android-4.19-q-release 5202/7636] ld.lld: error: -plugin-opt=-: ld.lld: Unknown command line argument '-stack-alignment=8'. Try: 'ld.lld --help'\nRe: [GIT PULL] scheduler updates for v5.18\ns390 ext4 crash on -next\n[InstCombine] try to narrow shifted bswap-of-zext\nRe: [PATCH 1/1] um: fix error return code in winch_tramp()\nld.lld: error: \u0026lt;instantiation\u0026gt;:1:13: redefinition of 'found'\npcie-rcar-host.c:(.text.fixup+0x4): relocation R_ARM_JUMP24 out of range\nRe: [PATCH 2/4] hwmon: (asus-ec-sensors) implement locking via the ACPI global lock\ns390 defconfig fails to build after 4afeb670710efa5cd5ed8b1d9f2d22d6ce332bcc\nRe: [ammarfaizi2-block:google/android/kernel/common/android12-trusty-5.10 4036/5872] WARNING: modpost: vmlinux.o(.text+0x4111c4): Section mismatch in reference from the function memblock_bottom_up() to the variable .meminit.data:memblock\nTooling improvements Fix up check_logs.py and messages/documentation after scripts move\npatches: next: Replace warning hiding patch with proper fix\npatches: next: Drop drm patch\nDrop android-4.14 hack patch for ld.lld\nBuild most powerpc64le configs with LLVM=1 LLVM_IAS=1\nUpdate markdown badge alternative text\nworkflows: Bump actions/checkout to v3 (actions-workflows, containers, continuous-integration2, tc-build)\n[v2] Build most powerpc64le configs with LLVM=1 LLVM_IAS=1\ncheck_logs.py: Use proper syntax for removing problem matcher\nboot-qemu.sh: Do not set '-cpu' for 32-bit x86\nImprove default '-smp' value\nboot-qemu.sh: arm64: Pass 'lpa2=off' when necessary\nDrop arm64-fixes patches\nboot-utils: Update to latest main branch\npatches: Drop -next\nTest the latest stable release\nAdd support for ARCH=um\nAdd support for User Mode Linux\nUpdate to Linux 5.17 and update known good revision\nRevert 4eec5c448d09646659806afdd42b080a7002620f for stable\nDisable ARCH=um builds for now\nUpdate AOSP LLVM builds\nDisable ARCH=arm allyesconfig on -next\nUpdate mainline patches\nDisable ARCH=arm allyesconfig on mainline\nRemove Fedora i686 configuration\n[patches] Cherry pick CLS for: x86 mainline Linux kernel\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Windows Subsystem for Linux instance, a Raspberry Pi 3 and 4, an Intel-based desktop, an AMD-based desktop, and an Intel-based laptop. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered. Special thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/march-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Boot fixes: These patches fix boot failures that we have seen in testing. In this case, it is a User Mode Linux fix, which we are looking to enable in our continuous integration setup, as it is useful for quick testing.","title":"March 2022 ClangBuiltLinux Work"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Miscellaneous improvements: These are series or patches that do not really fit into any of the other categories I typically use with my reports.\nAllow CONFIG_DEBUG_INFO_DWARF5=y + CONFIG_DEBUG_INFO_BTF=y (v1) tools/resolve_btfids: Do not print any commands when building silently (v1) -Wenum-conversion: This warning occurs when one enumerated type is implicitly converted to another enumerated type, which is typically a bug, although it might not actually be a problem in practice if the used enum has the same value as the intended enum (which is the case here). It is still good to get it corrected, as the enums might not stay in sync.\ndrm/amdkfd: Use proper enum in pm_unmap_queues_v9() (v1) -Wimplicit-fallthrough: Clang\u0026rsquo;s -Wimplicit-fallthrough (enabled in commit dee2b702bcf0 (\u0026ldquo;kconfig: Add support for -Wimplicit-fallthrough\u0026rdquo;)) is more pedantic than GCC\u0026rsquo;s version, requiring all case statements to have a fallthrough annotation, not just ones that do not fallthrough to break or return. Clang\u0026rsquo;s version matches the kernel\u0026rsquo;s preference for switch statements, so keeping the kernel clean of these warnings is important, in case GCC ever allows a mode that conforms to the kernel\u0026rsquo;s preference.\nlib/maple_tree: Fix clang -Wimplicit-fallthrough in mte_set_pivot() (v1) -Wunaligned-access: This is a new warning introduced in clang-14 to help catch unaligned accesses on ARM, which can be expensive, as they have to go through the exception handler for fixups. The warning is quite noisy, so we shut it up for default builds, but we allow it to show up for W=1 to help prevent new instances from creeping in. This should eventually be enabled for default builds as well but cleaning up the instances will take time.\nMakefile.extrawarn: Move -Wunaligned-access to W=1 (v1, v2, stable backport) -Wunitialized / -Wsometimes-uninitialized: As always, Clang will catch uninitialized variables because GCC\u0026rsquo;s version of the warning was moved to W=2, which people rarely test with, due to the noise.\nio_uring: Fix use of uninitialized ret in io_eventfd_register() (v1) drm/stm: Avoid using val uninitialized in ltdc_set_ycbcr_config() (v1, v2) iio: accel: adxl367: Fix handled initialization in adxl367_irq_handler() (v1) -Wunneeded-internal-declaration: This is a really interesting warning that only Clang appears to have. When a variable is only used in a compile time expression (such as in sizeof() or typeof()), clang will warn about it, as the programmer might have intended to use it elsewhere. In this particular case, it is expected, but there have been other times where it is clearly a bug.\nmm/page_alloc: Mark pagesets as __maybe_unused (v1) -Wunused-function: This is not typically a Clang specific warning but in this case, only Clang caught it because GCC does not warn on static inline functions in .c files, whereas Clang does. We make Clang match GCC for a default build but Masahiro Yamada changed that behavior for W=1 to help clean up or fix unused code.\nftrace: Remove unused ftrace_startup_enable() stub (v1) -Wunused-variable: Another warning that is not Clang specific but it impacts our builds just like GCC so it is important to clean them up.\nproc: Avoid unused variable warning in pagemap_pmd_range() (v1) -Wvisibility: This warning merely tells a developer that they have declared a type within a function, which cannot be used outside of the function. GCC has a similar warning, and like the past few warnings, it is important to fix all warnings that appear.\nthermal: netlink: Fix parameter type of thermal_genl_cpu_capability_event() stub (v1) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH] tools: Ignore errors from which\u0026rsquo; when searching a GCC toolchain`\nRe: [PATCH v3] seq_file: fix NULL pointer arithmetic warning\nRe: [PATCH] kallsyms: ignore all local labels prefixed by '.L'\nRe: [PATCH] include: drop pointless __compiler_offsetof indirection\n[X86] Implement -fzero-call-used-regs option\nRe: [PATCH 1/1] Drivers: hv: vmbus: Rework use of DMA_BIT_MASK(64)\nRe: [PATCH] drm/amd/pm: fix enabled features retrieving on Renoir and Cyan Skillfish\nRe: [PATCH] drm/i915: fix build issue when using clang\nRe: [PATCH] spi: Fix warning for Clang build and simplify code\nRe: [PATCH v2] drm/i915: fix build issue when using clang\nRe: [PATCH] Documentation/llvm: refresh docs for LLVM=1\n[libc] Use '+' constraint on inline assembly\nRe: [PATCH] um: Allow builds with Clang\nRe: [PATCH] tools: fix unavoidable GCC call in Clang builds\nRe: [PATCH] arm64 module: remove (NOLOAD)\nRe: [PATCH] riscv module: remove (NOLOAD)\nRe: [PATCH] [PATCH] AARCH64: Add gcc Shadow Call Stack support\nRe: [PATCH] KVM: x86: Fix pointer mistmatch warning when patching RET0 static calls\nRe: [PATCH v21 2/2] dmaengine: tegra: Add tegra gpcdma driver\nRe: [PATCH] [v2] Kbuild: move to -std=gnu11\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [PATCH 5/5] drm/stm: ltdc: add support of ycbcr pixel formats\n[LLVM 15] Getting invalid-symbol-name-offset while linking with LLD\nSkipping BTF generation for net/netfilter/nf_conntrack_h323.ko because it's a Rust module\nRe: ld.lld: error: undefined symbol: socfpga_reset_init\nBoot hang with certain PowerPC configurations after da0e5b885b25cf4ded0fa89b965dc6979ac02ca9\n-Wgnu-variable-sized-type-not-at-end in include/linux/cgroup-defs.h\nRe: [PATCH V3 4/7] drm/amd/pm: correct the usage for 'supported' member of smu_feature structure\nRe: [PATCH 1/3] pwm: driver for qualcomm ipq6018 pwm block\nTurn on CONFIG_WERROR for arm64\nTurn on CONFIG_WERROR for x86_64\nBoot issue with CONFIG_ZERO_CALL_USED_REGS=y and _paravirt_ident_64()\nRecent infrastructure errors\n[AArch64] Adds SUBS and ADDS instructions to the MIPeepholeOpt.\nRe: arm64: clang-nightly: net/ipv4/tcp_input.c: clang: error: clang frontend command failed with exit code 139\nRe: kernel/trace/ftrace.c:7157:20: error: unused function 'ftrace_startup_enable'\nRe: [PATCH v6 7/7] kernfs: Replace per-fs rwsem with hashed ones.\n-Wattribute-warning in drivers/scsi/libfc/fc_elsct.c\n-Wattribute-warning in drivers/misc/habanalabs/common/firmware_if.c\n-Wattribute-warning in drivers/net/ethernet/huawei/hinic/hinic_devlink.c\n[clang] Assertion tripped in X86 FP Stackifier\nRe: BUG: Kernel NULL pointer dereference on write at 0x00000000 (rtmsg_ifinfo_build_skb)\n\u0026quot;ld.lld: error: section type mismatch for .plt\u0026quot; after LLVM commit 66f8ac8d3604d67599734c3fd272032e9448aca2\n[Question] Does build-llvm.py need an update for clang-14?\nRe: [PATCH v7 1/2] ACPI: APEI: explicit init HEST and GHES in apci_init\nRe: [PATCH v20 2/2] dmaengine: tegra: Add tegra gpcdma driver\n-Wpointer-type-mismatch in arch/x86/include/asm/kvm-x86-ops.h\n-Wdeclaration-after-statement in lib/raid6/ with proposed -std=gnu11\n-Wdeclaration-after-statement in arm_neon.h\n[DAG] Attempt to fold bswap(shl(x,c)) -\u0026gt; zext(bswap(trunc(shl(x,c-bw/2))))\n.plt section in modules with IBT\nRe: [PATCH v6 00/71] Introducing the Maple Tree\nFull LTO builds getting killed again?\nandroid-4.9 + clang-13 \u0026quot;Inconsistent kallsyms data\u0026quot;\nTooling improvements patches: Remove max20086-regulator.c patch from mainline\npatches: Remove mainline series\nBump llvm_tot anchor and LLVM_TOT_VERSION\nStop doing builds of linux-4.4.y\ndebian/build.sh improvements\nDrop CFI patch on android-mainline\nEnable CONFIG_DEBUG_INFO_BTF for Android and Fedora configs\ndocker: clang-android: Update to r445002\nRun generate.sh on pull requests and pushes\nAdd script to generate Markdown for CI badges\nSplit GitHub Actions and TuxSuite by toolchain version\nAdd support for clang-14\nInclude toolchain version in workflow name\nFix CI badges\nMove shell scripts to scripts/\nMove and update cron logic\nUpdate cron schedule logic\nMake it green (February 18th, 2022)\npatches: next: Drop net/netfilter/xt_socket.c patch\npatches: next: Add a patch to fix build with KVM_WERROR\npatches: mainline: Drop netfilter patch\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Windows Subsystem for Linux instance, a Raspberry Pi 3 and 4, an Intel-based desktop, an AMD-based desktop, and an Intel-based laptop. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered. Special thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/february-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Miscellaneous improvements: These are series or patches that do not really fit into any of the other categories I typically use with my reports.\nAllow CONFIG_DEBUG_INFO_DWARF5=y + CONFIG_DEBUG_INFO_BTF=y (v1) tools/resolve_btfids: Do not print any commands when building silently (v1) -Wenum-conversion: This warning occurs when one enumerated type is implicitly converted to another enumerated type, which is typically a bug, although it might not actually be a problem in practice if the used enum has the same value as the intended enum (which is the case here).","title":"February 2022 ClangBuiltLinux Work"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Stable patches: The stable trees are the trees that most users consume so keeping them building and as warning and issue free as reasonable is important.\n[PATCH 5.4] Input: touchscreen - Fix backport of a02dcde595f7cbd240ccd64de96034ad91cffc40 (v1) [PATCH RFC 4.9 0/5] Fix booting arm64 big endian with QEMU 5.0.0+ (v1) [PATCH 4.4,4.9] power: reset: ltc2952: Fix use of floating point literals (v1) Patches for clang and CONFIG_WERROR (arm64/x86_64) -Wpointer-bool-conversion: This warning is usually harmless, as it is typically just a developer checking if an array in the middle of a structure is NULL, which is not possible if the structure is not NULL, which would likely cause issues further up a call chain. In this one case, the fix was just to remove the check.\nclk: visconti: Remove pointless NULL check in visconti_pll_add_lookup() (v1) Other fixes: Yet another instance of an unsupported compiler flag causing issues with cc-option\u0026hellip; I hope that we can get all instances of these cleaned up and have a flag turned on that will prevent these weird failures but that will probably be a release or two out.\nMIPS: Loongson64: Clean up use of cc-ifversion, MIPS: Loongson64: Wrap -mno-branch-likely with cc-option (v1, v2) LLVM patches Android LLVM: Android\u0026rsquo;s version of LLVM is used by the Android kernel team so it is important to keep it working for them, as they are one of the largest consumers of this work.\nAdjust location of d7e089f2d6a5cd5f283a90ab29241d20d4fc3ed1 in PATCHES.json\n[patches] Cherry pick CLS for: ARCH=arm Linux kernel builds\nUpstream LLVM: This single patch was not accepted, as it was a workaround, rather than addressing the root cause of the issue.\n[clang] Ignore -fconserve-stack Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH v13 2/2] x86/sgx: Add an attribute for the amount of SGX memory in a NUMA node\nRe: [PATCH 0000/2297] [ANNOUNCE, RFC] \u0026quot;Fast Kernel Headers\u0026quot; Tree -v1: Eliminate the Linux kernel's \u0026quot;Dependency Hell\u0026quot;\nRe: [GIT PULL for v5.17-rc1] New year's media updates\nRe: [PATCH] [v3] x86/sgx: Fix NULL pointer dereference on non-SGX systems\nRe: [PATCH 0/2] *** Fix reformat_objdump.awk ***\n[Clang][CFG] check children statements of asm goto\nRe: [PATCH] objtool: prefer memory clobber \u0026amp; %= to volatile \u0026amp; __COUNTER__\nRe: [PATCH 1/1] script/sorttable: fix some initialization problems\nRe: [PATCH] Makefile: Fix build with scan-build\nRe: [PATCH] lib/crypto: blake2s: avoid indirect calls to compression function for Clang CFI\nRe: Patch \u0026quot;lib/Kconfig.debug: make TEST_KMOD depend on PAGE_SIZE_LESS_THAN_256KB\u0026quot; has been added to the 5.16-stable tree\nRe: [PATCH v3 1/3] string: Make stpcpy() possible to use\nRe: [PATCH 0/2] xor: enable auto-vectorization in Clang\nRe: [PATCHv3] powerpc: mm: radix_tlb: rearrange the if-else block\nRe: [PATCH 1/2] stack: Introduce CONFIG_RANDOMIZE_KSTACK_OFFSET\nRe: [PATCH v3] Kconfig.debug: Make DEBUG_INFO selectable from a choice\nRe: [PATCH] Kconfig.debug: Make DEBUG_INFO always default=n\nRe: [PATCH] usb: dwc3: xilinx: fix uninitialized return value\nRe: [PATCH] fortify: Update compile-time tests for Clang 14\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nFormatting of llvm-objdump trips up x86 insn_decoder_test\nAOSP LLVM r437112 is missing d7e089f2d6a5cd5f283a90ab29241d20d4fc3ed1\nppc32/CONFIG_ALTIVEC=y: frame-larger-than in arch/powerpc/lib/xor_vmx.c\nrelocation R_ARM_LDR_PC_G2 out of range\nRe: [TCWG CI] Regression caused by linux: mm: simplify try_to_unuse\narm64 big endian boot failures on linux-4.9.y\nRe: [PATCH v7 07/14] vdpa/mlx5: Support configuring max data virtqueue\nRe: [PATCH v2 1/2] kbuild: move headers_check.pl to usr/include/\n[SCEV] Sequential/in-order UMin expression, Re: [TCWG CI] Regression caused by llvm: [SCEV] Sequential/in-order UMin expression\nRe: [GIT PULL] Networking for 5.17\n[Clang/Test]: ename enable_noundef_analysis to disable-noundef-analysis and turn it off by default\nissue with volatile?\nRe: [PATCH v1 0/9] drivers: hv: dxgkrnl: Driver overview\nRe: [PATCH] ALSA: pcm: accept the OPEN state for snd_pcm_stop()\nRe: [PATCH v9 01/12] user_events: Add minimal support for trace_event into ftrace\ntest PPC with LLVM_IAS=1\nRe: [for-next][PATCH 10/31] scripts: ftrace - move the sort-processing in ftrace_init\nCFI failure in blake2s_update()\nRe: [TCWG CI] Regression caused by llvm: [cmake] Use GNUInstallDirs to support custom installation dirs.\nThin LTO + -Os gives vmlinux.o of almost the same size as thin LTO + -O2\nmake tinyconfig and turning on LTO (HAS_LTO_CLANG depends appears to have bug)\nRe: drivers/iio/adc/ti-tsc2046.c:242:62: warning: taking address of packed member 'data' of class or structure 'tsc2046_adc_atom' may result in an unaligned pointer value\nMany instances of -Wunaligned-access\nRe: fs/ntfs3/fsntfs.c:2248:41: warning: taking address of packed member 'de' of class or structure 'NTFS_DE_SII' may result in an unaligned pointer value\nRe: stable-rc 5.4 queue riscv tinyconfig build failed\nRe: [PATCH] ARM: stackprotector: prefer compiler for TLS based per-task protector\nselected processor does not support XXX in ARM mode\nINT DW_ATE_unsigned_56 Error emitting BTF type\nRe: [PATCH bpf-next v2 1/6] tools: Help cross-building with clang\nRe: arch/arm/lib/xor-neon.c:30:2: warning: This code requires at least version 4.6 of GCC\nRe: drivers/input/touchscreen/ads7846.c:705:24: warning: taking address of packed member 'data' of class or structure 'ads7846_buf' may result in an unaligned pointer value\nTooling improvements Spin down CFI trees for now\nqemu: Install git\npatches: android12-5.10: Add patch to fix Thumb2 kernel boot on newer QEMU\nboot-utils: Remove '--use-cbl-qemu'\npatches: Drop mainline and next\npatches: Drop 5.15 and 5.10\npatches: Apply hack patch to fix the build on android-mainline\nRevert #274\npatches: Add a series to fix ARCH=arm64 with mainline and next\ncheck-patches.sh: Check for patches but no '--patch-series'\nDrop clang-10 builds on mainline\nboot-qemu.sh: Support booting ARMv7 kernels under KVM on AArch64 hosts\n`Update to Linux 5.16 for PGO and update known good revision\npatches/mainline: Add a SCSI patch from -next\npatches: Remove -next\nRevert \u0026quot;patches/mainline: Add a SCSI patch from -next\u0026quot;\npatches: Remove tip\npatches: mainline: Add a patch for drivers/regulator/max20086-regulator.c\nDrop android12-5.10 patches\nEnable arm64 big endian build on -next with AOSP LLVM\nEnable x86_64 GCOV build with AOSP LLVM\nDisable CONFIG_DEBUG_INFO_BTF for gki_defconfig\nAdd builds for android13-5.15\nAdd pinctrl-thunderbay.c patches to arm64-fixes\nAdd blake2s CFI workaround patch for android-mainline\nboot-qemu.sh: Add 'arm' as an alias for 'arm32_v7'\nboot-qemu.sh: Add support for booting pmac32_defconfig\nDisable CONFIG_DEBUG_INFO_BTF for Fedora configs\nFix CONFIG_DEBUG_INFO_BTF=n for Fedora configs\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered. Special thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/january-2022-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Stable patches: The stable trees are the trees that most users consume so keeping them building and as warning and issue free as reasonable is important.\n[PATCH 5.4] Input: touchscreen - Fix backport of a02dcde595f7cbd240ccd64de96034ad91cffc40 (v1) [PATCH RFC 4.","title":"January 2022 ClangBuiltLinux Work"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Android patches: Android is one of the biggest downstream consumers of our work. Making sure that it stays working is incredibly important so that it can reach real users.\nRevert \u0026quot;ANDROID: disable INFINIBAND_QIB from allmodconfig build\u0026quot;\nANDROID: allmodconfig: Re-enable TEST_KMOD\nRevert \u0026quot;ANDROID: fix build error in arch/arm64/include/asm/arch_timer.h\u0026quot;\nBuild errors: This is a collection of patches that either fix build errors specific to clang or generally, in certain scenarios. We are slowly getting to the point where there are few build errors that are clang specific, which is good, as breakage is more likely to be dealt with by other people so that we can focus on other issues.\nMIPS: Loongson64: Use three arguments for slti (v1, v2)\nMIPS: Loongson2ef: Remove unnecessary {as,cc}-option calls (v1)\nx86/extable: Fix extable_type_reg macro with Clang LTO (v1)\nFix build errors with do_exit() to make_task_dead() transition (v1)\niwlwifi: mvm: Use div_s64 instead of do_div in iwl_mvm_ftm_rtt_smoothing() (v1)\nOther fixes: These are fixes that do not fit into a specific category. The first one was noticed while I was building kernels on a powerful arm64 server and the second came up during testing another patch.\nx86/boot/compressed: Move CLANG_FLAGS to beginning of KBUILD_CFLAGS (v1, v2)\nARM: davinci: da850-evm: Avoid NULL pointer dereference (v1)\n-Wbitwise-instead-of-logical: A new warning in LLVM exposed a few places in the kernel where bitwise operations were being used with boolean expressions with side effects, which may be undesirable. This was one of the last ones in the tree, which is important for keeping the warning enabled.\nsoc/tegra: fuse: Fix bitwise vs. logical OR warning (v2) -Wframe-larger-than=: The kernel cares about stack usage quite a bit so it enables -Wframe-larger-than= to warn about large amounts of stack usage. These warnings have been present for a while but until -Werror was enabled, there were often larger fires to fight, as these warnings are usually in configurations that are not going to run in the real world. Getting them cleaned up now is very important for Android so that they can enable -Werror for all configurations that they care about.\nstaging: greybus: fix stack size warning with UBSAN (v2)\ncxl/core: Remove cxld_const_init in cxl_decoder_alloc() (v1)\n-Wtypedef-redefinition: Trying to typedef something twice is almost always a bug. GCC does not warn on this but clang does so we need to clean these warnings up.\nmedia: atomisp: Do not define input_system_cfg2400_t twice (v1) LLVM patches [clang][driver] Warn when '-mno-outline-atomics' is used with a non-AArch64 triple Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH] nl80211: remove reload flag from regulatory_request\nUnexpected -Wuninitialized with asm goto with outputs\nRe: [PATCH] kcov: fix generic Kconfig dependencies if ARCH_WANTS_NO_INSTR\nAssertion `isa\u0026lt;X\u0026gt;(Val) \u0026amp;\u0026amp; \u0026quot;cast\u0026lt;Ty\u0026gt;() argument of incompatible type!\u0026quot;' failed\nRe: [PATCH v3] arm64: Enable KCSAN\nRe: [PATCH RFC 0/6] Bump minimum supported version of LLVM to 11.0.0\nerror: hardware TLS register is not supported for the arm sub-architecture\nRe: [PATCH v2] selftests: vDSO: parse: warning: fix assignment as a condition\nRe: [PATCH 00/12] IIO: clang W=1 warning cleanup.\nRe: Makefile: CC_IMPLICIT_FALLTHROUGH passed quoted as argument to gcc\nRe: [PATCH v5 5/5] powerpc/inst: Optimise copy_inst_from_kernel_nofault()\nRe: [PATCH] powerpc: platforms: cell: pervasive: fix clang -Wimplicit-fallthrough\nRe: [PATCH] power: reset: ltc2952: fix float conversion error\nRe: [PATCH v2] MIPS: Makefile: Remove \u0026quot;ifdef need-compiler\u0026quot; for Kbuild.platforms\nRe: [PATCH] Kconfig.debug: Make DEBUG_INFO selectable from a choice\n[PATCH v3 0/2] MIPS: Remove some code\n[llvm-objcopy] Fix handling of MIPS64 little endian files\n[PATCH 0/3] MIPS: Add support for LTO\nRe: [PATCH] x86: use builtins to read eflags\nRe: [PATCH] MIPS: Octeon: Fix build errors using clang\nRe: [PATCH] x86/sgx: Fix NULL pointer dereference on non-SGX systems\nRe: [patch V3 28/35] PCI/MSI: Simplify pci_irq_get_affinity()\nRe: [PATCH] gpio: sim: fix uninitialized ret variable\nRe: [PATCH] crypto: cleanup warning in qm_get_qos_value()\nRe: [PATCH v2] ARM: avoid literal references in inline assembly\nRe: [PATCH linux-next] tools: compiler-gcc.h::Keep compatible with non-clang compilers.\nRe: [PATCH] Fix compilation errors when using special directory\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nerror: expression requires 'long double' type support, but target 'x86_64-unknown-linux-gnu' does not support it\nllvm-objcopy produces corrupted .debug_str for elf32-x86-64 (X32 ABI) emulation (Z_DATA_ERROR)\n-Wshift-count-negative in drivers/net/ethernet/sfc/\nLTO + -Oz trigger seg. fault in ld.lld-13\ns390: ld.lld: error: unknown emulation: elf64_s390\nBoth LLVM_IAS=1 and =0 fail with ARCH=powerpc (kernel 5.16rc3)\nInconsistent build timeouts\nCONFIG_CPU_LOONGSON2F=y and LLVM_IAS=1 fails with arch/mips/loongson2ef/Platform:36: *** only binutils \u0026gt;= 2.20.2 have needed option -mfix-loongson2f-nop. Stop.\nllvm-objcopy: error: invalid output format: 'elf64-s390'\nmips: drivers/misc/xilinx_sdfec.c:787:8: error: couldn't allocate input reg for constraint 'r'\nerror: instruction requires a CPU feature not currently enabled in arch/mips/include/asm/mipsregs.h\nCONFIG_KEXEC=y gives build error on mips\nRISC-V relocation R_RISCV_HI20 out of range with CONFIG_CMODEL_MEDLOW=y\nmips llvm-objcopy: error: invalid symbol index: 67108864\nBuilds still running when client exits\nRe: [PATCH v6 21/21] cxl/core: Split decoder setup into alloc + add\nPlease merge c4582a689c2c74e0635309979176c7ada086f066 into release/13.x\nAssertion 'Symbol' failed with -fpatchable-function-entry=2 + -Oz AArch64\n\u0026quot;cannot insert node between set or sequence node and its filter children\u0026quot; in the Linux kernel\nerror: couldn't allocate input reg for constraint 'r' on MIPS when building the Linux kernel\nUnsupported compiler and assembler flags for MIPS\nllvm-objcopy: \u0026quot;error: invalid symbol index\u0026quot; with mips64el-linux-gnuabi64\nKernel build never starts\nRe: [PATCH v2] arm64/xor: use EOR3 instructions when available\nld.lld: error: section exceeds available address space (MIPS vmlinuz.bin)\nMIPS: vmlinuz does not boot if LD=ld.lld\nRe: drivers/pinctrl/bcm/pinctrl-bcm2835.c:412:14: warning: variable 'group' is used uninitialized whenever 'for' loop exits because its condition is false\nRe: ANNOUNCE: pahole v1.23 (BTF tags and alignment inference)\nRe: linux-next: Tree for Dec 14\n-Wmissing-braces in drivers/firmware/efi/libstub/efi-stub-helper.c\nRe: [linux-stable-rc:queue/5.10 6492/9999] ERROR: modpost: \u0026quot;raid6_2data_recov\u0026quot; [fs/btrfs/btrfs.ko] undefined!\nRe: [LKP] Re: [x86/mm/64] f154f29085: BUG:kernel_reboot-without-warning_in_boot_stage - clang KCOV?\nRe: [PATCH v13 2/2] x86/sgx: Add an attribute for the amount of SGX memory in a NUMA node\nRe: [patch V3 28/35] PCI/MSI: Simplify pci_irq_get_affinity()\nRe: [Intel-gfx] [PATCH v3 4/4] drm/i915/fbc: Register per-crtc debugfs files\nerror: hardware TLS register is not supported for the arm sub-architecture\nRe: [hyperv:hyperv-next 4/5] drivers/hv/vmbus_drv.c:2082:29: warning: shift count \u0026gt;= width of type\nerror: out of range pc-relative fixup value\n'-outline-atomics' is not a recognized feature for this target\nRe: [PATCH 09/10] kthread: Ensure struct kthread is present for all kthreads\nRe: [next] arm: current.h:53:6: error: out of range pc-relative fixup value\nIssue with booting multi_v5_defconfig kernel with GCC 11\nRe: [PATCH v2 05/15] scsi: hisi_sas: Fix some issues related to asd_sas_port-\u0026gt;phy_list\nx86 Thin LTO + allyesconfig causes ld.lld: error: kernel image bigger than KERNEL_IMAGE_SIZE [Clang/Test]: Rename enable_noundef_analysis to disable-noundef-analysis and turn it off by default\nTooling improvements patches: Drop dwc2 floating literal patch\ndocker: clang-android: Update to r433403b\nreadme.md: Add subscription link\nUpdate architectures list\nMake failures more obvious\nDrop -next clang-10 builds\nChange TuxSuite targets\nImprove check_logs.py output\ndocker: clang-android: Update to r437112\nUpdate patches (12-10-2021)\nImprovements around non-x86_64 native use\npatches: Drop android-mainline\ncheck_logs.py: Print build log and exit when patch fails to apply\nframe_larger_than.py: Support DW_TAG_enumeration_type\nMove to a container based boot workflow\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nAs I brought up last month, I finalized containerizing certain aspects of my environment scripts so that no matter what machine I am working on, I can have consistent access to recent versions of compilers and other development tools, independent of the host operating system. I believe this is extremely important for reproducing issues as well as avoiding issues such as broken dependencies or upgrades because all the tools are in a container, which is a lot easier to reset and start over from than the host operating system.\nLLVM moved from bugs.llvm.org to GitHub Issues, which necessitated updating any LLVM bug links in our issue tracker (similar to what I did for Linux kernel mailing list links in October). To ensure this does not happen again in the future, I documented best practices for links in our wiki.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/december-2021-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Android patches: Android is one of the biggest downstream consumers of our work. Making sure that it stays working is incredibly important so that it can reach real users.\nRevert \u0026quot;ANDROID: disable INFINIBAND_QIB from allmodconfig build\u0026quot;","title":"December 2021 ClangBuiltLinux Work"},{"content":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build errors: These are hard errors that appear for one reason or another. The first two are from a recent change in LLVM to avoid crashing the compiler (see the commit message for more details, I learned floating point literals exist in C). The third series is a resend that fixes ARCH=hexagon allmodconfig, which is an important target for us because ARCH=hexagon requires LLVM. Lastly, the final series fixes a generic issue uncovered by the kernel test robot with an ARCH=hexagon randconfig.\npower: reset: ltc2952: Fix use of floating point literals (v1, v2) usb: dwc2: hcd_queue: Fix use of floating point literal (v1, v2) Fixes for ARCH=hexagon allmodconfig (v2) Fix CONFIG_TEST_KMOD with 256kB page size (v1) Stable backports and patches: Keeping the stable kernels building is important because most people use them, rather than the development tree that we normally work against. Our CI has decent coverage of stable but we are looking to ramp that up going forward.\nPlease apply 3d5e7a28b1ea2d603dea478e58e37ce75b9597ab to 5.15, 5.14, and 5.10 (v1) scripts/lld-version.sh: Rewrite based on upstream ld-version.sh (v1) Apply a52f8a59aef46b59753e583bf4b28fccb069ce64 to 5.15 through 4.19 (v1) -Wimplicit-fallthrough: Now that -Wimplicit-fallthrough is enabled by default for clang-14 and newer thanks to the great work of Gustavo A.R. Silva, we will be able to catch potential issues such as the one fixed by commit 652b44453ea9 (\u0026ldquo;habanalabs/gaudi: fix missing code in ECC handling\u0026rdquo;).\nhwmon: (tmp401) Fix clang -Wimplicit-fallthrough in tmp401_is_visible() (v1) -Wsometimes-uninitialized/-Wuninitialized: Unfortunately, because the kernel is written in C, uninitialized variables continue to be an issue, especially since GCC\u0026rsquo;s -Wmaybe-uninitialized has been disabled by default since 5.7. These will continue to pop up until GCC can be fixed but it does not seem like that will occur anytime soon as it has been a deficiency for a long time; until then, we will continue to fix them.\nNFS: Avoid using error uninitialized in nfs_lookup() (v1) fpga: stratix10-soc: Do not use ret uninitialized in s10_probe() (v1, v2) -Wreturn-type: The kernel has this as a hard error because having a mismatched return type is clearly a bug. Unfortunately, this patch ended up being wrong, and the proper patch was applied to fixed it.\nsoc: ti: wkup_m3_ipc: Fix return type error in wkup_m3_rproc_boot_thread() (v1) Other series: Last year, we decided that LLVM 10.0.1 would be the minimum supported version for building the kernel. However, as time has gone on, the kernel has continued to stress clang and exposed more deficiencies that had to be fixed in the compiler; some times, we work around these deficiencies but other times, such as this, we have to bump the minimum supported version to avoid invasively changing the kernel.\nBump minimum supported version of LLVM to 11.0.0 (RFC) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nIncrease number of vp counters per site with PGO\nRe: [PATCH] riscv: fix building external modules\n[PATCH 0/3] Fix some W=1 clang Werror at staging/media\nRe: [PATCH] kconfig: Add support for -Wimplicit-fallthrough\nRe: [PATCH] omapfb: add one more \u0026quot;fallthrough\u0026quot; statement\nRe: [PATCH] soc/tegra: fuse: fix bitwice vs. logical warning\nRe: [PATCH] clocksource/drivers/arm_arch_timer: Force inlining of erratum_set_next_event_generic()\nRe: [PATCH] [v3] iwlwifi: pcie: fix constant-conversion warning\nRe: [PATCH] powerpc: mm: radix_tlb: rearrange the if-else block\n[PATCH 00/20] Solve the remaining issues with clang and W=1 on media\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nFortify error with a stable/released UTS_RELEASE\nRe: next/master build: 230 builds: 25 failed, 205 passed, 449 errors, 236 warnings (next-20211101)\nX86InstrInfo: Support immediates that are +1/-1 different in optimizeCompareInstr\nerror: expression requires 'long double' type support, but target 'x86_64-unknown-linux-gnu' does not support it\nRe: [dborkman-bpf:pr/bpf-tstamp 3/3] drivers/net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c:2482:44: warning: shift count \u0026gt;= width of type\n[Clang][LLVM][Attr] support btf_type_tag attribute\nInconsistent build timeouts\n[Clang/Test]: Rename enable_noundef_analysis to disable-noundef-analysis and turn it off by default\nerror: initializer element is not a compile-time constant\nerror: hardware TLS register is not supported for the arm sub-architecture\nBUILD_BUG() failed with arm64's gki_defconfig\nRe: [arm-platforms:hack/m1-pmu 8/8] drivers/perf/apple_m1_cpu_pmu.c:100:32: warning: initializer overrides prior initialization of this subobject\n2105a92748e83e2e3ee6be539da959706bbb3898 breaks x86_64 CFI\nTurn on CONFIG_WERROR for x86_64\nPoor fixit suggestion for an uninitialized then dereferenced pointer\nTurn on CONFIG_WERROR for arm64\ninlinable function call in a function with debug info must have a !dbg location\nAssertion `isa\u0026lt;X\u0026gt;(Val) \u0026amp;\u0026amp; \u0026quot;cast\u0026lt;Ty\u0026gt;() argument of incompatible type!\u0026quot;' failed\nld.lld: error: \u0026lt;inline asm\u0026gt;:25:2: macro 'extable_type_reg' is already defined\npolly causes compiler runtime error only on ARCH=arm\nRe: [PATCH v5] nl80211: reset regdom when reloading regdb\nRe: [PATCH 51/64] cachefiles: Implement the I/O routines\nRe: [PATCH v5 5/5] powerpc/inst: Optimise copy_inst_from_kernel_nofault()\nTooling improvements This month was mostly spent focusing on getting the CI green via the application of patches from the mainline list as well as slowly increasing our coverage through trees (latest LTS, 5.15) and builds (hexagon allmodconfig).\nUpdate mainline builds and patches\nFix more errors in next and mainline\nApply a patch to unbreak the Thumb2 build\nUpdate patches\nUpdate patches\nparse-debian-clang.sh: Remove newlines between information print outs\nkernel: Update to Linux 5.15\npatches: next: Remove return type error patch\npatches: Remove android-mainline\nAdd 5.15 trees\npatches: mainline: Drop this_cpu_has_cap patch\nFix 5.15 builds\nMake it green (11-18-2021)\nWork on misc-scripts\npatches/5.10: Drop scripts/lld-version.sh patch\nRemove CROSS_COMPILE_COMPAT and add CONFIG_COMPAT_VDSO=n build\npatches/5.15: Drop applied FORTIFY_SOURCE patch\nAdd Hexagon allmodconfig for mainline and next with LLVM 13+\npatches: mainline: Remove USB patch\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nI wrote a blog post about one of the bugs I triaged above so that I can remember how to do it in the future, as well as show others what reducing a C file looks like.\nDuring periods of downtime this month (i.e. not drowing in emails, triaging bugs, etc), I worked on containerizing some of my development environment. This allows me to potentially move from one development machine to another with minimal overhead, which can happen in the case of upgrading or failure, as well as have a consistent workspace, since everything is described in a Containerfile. It makes getting access to older versions of LLVM and GCC easier as well, as I can build a container from a version of Debian or Ubuntu without actually having to run it as my host system.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/november-2021-cbl-work/","summary":"Occasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches Build errors: These are hard errors that appear for one reason or another. The first two are from a recent change in LLVM to avoid crashing the compiler (see the commit message for more details, I learned floating point literals exist in C).","title":"November 2021 ClangBuiltLinux Work"},{"content":"My co-maintainer Nick Desaulniers wrote a great post about taking a several thousand line C file that exposed a compiler bug down to 12 lines with creduce. I thought I would do the same thing with a bug that only happens with link time optimization (LTO) in the Linux kernel, which is a bit of a different beast. Hopefully this post can help others reduce their own bugs and think about the best way to triage a bug.\nMake sure the bug is reproducible Any time that I receive a bug report on our GitHub issue tracker, I want to make sure it is reproducible for me so that I can investigate it in my environment with my tools. The report in question is issue #1215 and issue #1516. The second issue has a set of configurations that trigger the issue with either ARCH=x86_64 or ARCH=arm64; as I am working on an x86_64 server, it is probably going to be easier to work with the native architecture.\nI like to use tuxmake for initially reproducing bugs with Debian clang versions, as they are prepacked in Docker images. I won\u0026rsquo;t get into the specifics of how to use tuxmake in this post, its documentation is pretty good as it is and I am only going to use it for initially reproducing the issue. The reporter of issue #1516 mentions they are using the latest stable branch (linux-5.15.y) but I want to reproduce on mainline, as that is going to change how I approach this bug. If the bug is fixed on mainline and broken on stable, it means there was a fix somewhere that needs to be found and backported, which is much simpler than fixing an issue that is still present in the development tree.\n$ git show -s commit d58071a8a76d779eedab38033ae4c821c30295a5 (HEAD, tag: v5.16-rc3, origin/master) Author: Linus Torvalds \u0026lt;torvalds@linux-foundation.org\u0026gt; Date: Sun Nov 28 14:09:19 2021 -0800 Linux 5.16-rc3 $ echo \u0026#34;CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT=n CONFIG_KASAN=n CONFIG_GCOV_KERNEL=n CONFIG_COMPILE_TEST=n CONFIG_LTO_CLANG_FULL=y CONFIG_TRIM_UNUSED_KSYMS=y CONFIG_CFI_CLANG=y CONFIG_CFI_CLANG_SHADOW=y CONFIG_SHADOW_CALL_STACK=y CONFIG_INIT_STACK_ALL_ZERO=y\u0026#34; \u0026gt;kernel/configs/repro.config $ tuxmake \\ -a x86_64 \\ -k allmodconfig \\ -K repro.config \\ -r podman \\ -t clang-13 \\ LLVM=1 LLVM_IAS=1 default ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM13.0.1\u0026#39; Reader: \u0026#39;LLVM 13.0.1\u0026#39;) make[3]: *** [/home/nathan/cbl/worktrees/cbl-1215/scripts/Makefile.build:307: fs/overlayfs/overlay.lto.o] Error 1 ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM13.0.1\u0026#39; Reader: \u0026#39;LLVM 13.0.1\u0026#39;) make[3]: *** [/home/nathan/cbl/worktrees/cbl-1215/scripts/Makefile.build:307: fs/xfs/xfs.lto.o] Error 1 ... Okay, so the bug is reproducible locally. Now, I know that some of these configuration options are not needed to reproduce the issue. CONFIG_CFI_CLANG and CONFIG_CFI_CLANG_SHADOW do not currently work for x86_64. CONFIG_SHADOW_CALL_STACK is an arm64 only feature. CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT is not a user selectable Kconfig value (it is just bool, rather than bool \u0026quot;...\u0026quot;). CONFIG_INIT_STACK_ALL_ZERO and CONFIG_TRIM_UNUSED_KSYMS are a little suspect but let\u0026rsquo;s see if we can reproduce this bug without them to keep our scope more limited (fewer variables can make the bug easier to fix down the road).\nCONFIG_LTO_CLANG_FULL appears critical to the problem and CONFIG_KASAN, CONFIG_GCOV_KERNEL, and CONFIG_COMPILE_TEST all need to be disabled for it to be selected. So:\n$ echo \u0026#34;CONFIG_COMPILE_TEST=n CONFIG_GCOV_KERNEL=n CONFIG_KASAN=n CONFIG_LTO_CLANG_FULL=y\u0026#34; \u0026gt;kernel/configs/repro.config $ tuxmake \\ -a x86_64 \\ -k allmodconfig \\ -K repro.config \\ -r podman \\ -t clang-13 \\ LLVM=1 LLVM_IAS=1 default ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM13.0.1\u0026#39; Reader: \u0026#39;LLVM 13.0.1\u0026#39;) make[3]: *** [/home/nathan/cbl/worktrees/cbl-1215/scripts/Makefile.build:307: fs/overlayfs/overlay.lto.o] Error 1 ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM13.0.1\u0026#39; Reader: \u0026#39;LLVM 13.0.1\u0026#39;) make[3]: *** [/home/nathan/cbl/worktrees/cbl-1215/scripts/Makefile.build:307: fs/xfs/xfs.lto.o] Error 1 ... I: config: PASS in 0:00:07.230375 I: default: FAIL in 0:09:36.347980 I: build output in /home/nathan/.cache/tuxmake/builds/273 Alright, we have a decently minimal configuration (allmodconfig with full LTO) to work off of. Take note of the .../.cache/tuxmake/builds/273, that will come in handy later.\nReproduce the bug with the latest compiler We reproduced the bug with the latest Linux kernel development release but we used a released version of clang (13). For the same reason as above, we want to make sure the bug is not already fixed with the development branch, as duplicate reports waste developers\u0026rsquo; time. apt.llvm.org is a great resource for quickly getting access to a close to tip of tree clang to test with, if you are on Debian/Ubuntu or willing to work out of a Docker image. For the purpose of this tutorial, we are just going to build it from source. I developed a Python LLVM build script (build-llvm.py) as part of tc-build to help with situations like this.\nI will explain the flags below:\n--build-folder/--llvm-folder: By default, the script keeps everything self-contained; it builds the toolchain in build/ and it downloads the source to llvm-project/. I have a separate tree that I use for development so I provide these flags to point those folders to that tree. These will not be necessary under normal circumstances. --assertions: Turns on assertions in the LLVM source, which can help figure out the cause of the bug sooner, but it will make the compiler slower; it might not be worth the trade off depending on what you are reducing. --build-stage1-only: Shortens the build time, as the script normally builds a compiler and uses that compiler to build the final compiler (a two stage build). When using the toolchain for more than a triage, this should be omitted, as a two stage build can produce a more optimized compiler. --check-targets: Runs the check targets requested (clang will become check-clang) to make sure there are no current obvious issues with the development tree. --projects: Limits what we build to clang and ld.lld, as we do not need any other projects to reproduce this. --targets: Limits the available backends to just X86, which is the only one we need to reproduce the issue, to help speed up the build. $ $CBL_GIT/tc-build/build-llvm.py \\ --assertions \\ --build-folder $CBL_SRC/llvm-project/build \\ --build-stage1-only \\ --check-targets clang ll{d,vm{,-unit}} \\ --llvm-folder $CBL_SRC/llvm-project \\ --projects \u0026#34;clang;lld\u0026#34; \\ --targets X86 ... LLVM build duration: 0:06:02 LLVM toolchain installed to: /home/nathan/cbl/src/llvm-project/build/stage1 To use, either run: $ export PATH=/home/nathan/cbl/src/llvm-project/build/stage1/bin:${PATH} or add: PATH=/home/nathan/cbl/src/llvm-project/build/stage1/bin:${PATH} to the command you want to use this toolchain. Version information: ClangBuiltLinux clang version 14.0.0 (https://github.com/llvm/llvm-project 8d474f1d157530577f06ce3ef9187e1aaf31a59e) Target: x86_64-unknown-linux-gnu Thread model: posix InstalledDir: /home/nathan/cbl/src/llvm-project/build/stage1/bin LLD 14.0.0 (compatible with GNU linkers) After a little bit of time (or maybe a lot of time, depending on how fast your machine is), the script will spit out some information like above, which explains how we can use it.\nOne nice thing about tuxmake is that it generates a config file that we can use to reproduce issues later (that is why I mentioned taking note of the folder that tuxmake generates at the end). Thus, with the new toolchain and the old config, we can see if the issue is still reproducible:\n$ cp $HOME/.cache/tuxmake/builds/273/config .config $ PATH=$CBL_SRC/llvm-project/build/stage1/bin:$PATH \\ make -skj\u0026#34;$(nproc)\u0026#34; LLVM=1 LLVM_IAS=1 olddefconfig all ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) make[3]: *** [scripts/Makefile.build:307: fs/overlayfs/overlay.lto.o] Error 1 ... drivers/gpu/drm/i915/intel_pm.c:3065:12: error: use of bitwise \u0026#39;|\u0026#39; with boolean operands [-Werror,-Wbitwise-instead-of-logical] changed = ilk_increase_wm_latency(dev_priv, dev_priv-\u0026gt;wm.pri_latency, 12) | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ drivers/gpu/drm/i915/intel_pm.c:3065:12: note: cast one or both operands to int to silence this warning drivers/gpu/drm/i915/intel_pm.c:3065:12: error: use of bitwise \u0026#39;|\u0026#39; with boolean operands [-Werror,-Wbitwise-instead-of-logical] changed = ilk_increase_wm_latency(dev_priv, dev_priv-\u0026gt;wm.pri_latency, 12) | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ || drivers/gpu/drm/i915/intel_pm.c:3065:12: note: cast one or both operands to int to silence this warning 2 errors generated. ... drivers/power/reset/ltc2952-poweroff.c:162:28: error: expression requires \u0026#39;long double\u0026#39; type support, but target \u0026#39;x86_64-unknown-linux-gnu\u0026#39; does not support it data-\u0026gt;wde_interval = 300L * 1E6L; ^ drivers/power/reset/ltc2952-poweroff.c:162:21: error: expression requires \u0026#39;long double\u0026#39; type support, but target \u0026#39;x86_64-unknown-linux-gnu\u0026#39; does not support it data-\u0026gt;wde_interval = 300L * 1E6L; ^ drivers/power/reset/ltc2952-poweroff.c:163:41: error: expression requires \u0026#39;long double\u0026#39; type support, but target \u0026#39;x86_64-unknown-linux-gnu\u0026#39; does not support it data-\u0026gt;trigger_delay = ktime_set(2, 500L*1E6L); ^ 3 errors generated. ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) make[3]: *** [scripts/Makefile.build:307: fs/xfs/xfs.lto.o] Error 1 ... So the issue reproduces but we picked up a couple new issues by the nature of going to a development build of LLVM. These are not going to impact our triage but it is still good to fix them. Thankfully, patches to fix these issues exist on the mailing list:\n$ curl -LSs https://lore.kernel.org/lkml/20211014211916.3550122-1-nathan@kernel.org/raw | patch -Np1 patching file drivers/gpu/drm/i915/intel_pm.c Hunk #1 succeeded at 3062 (offset 12 lines). $ curl -LSs https://lore.kernel.org/lkml/20211105152049.2522250-1-nathan@kernel.org/raw | patch -Np1 patching file drivers/power/reset/ltc2952-poweroff.c Running the above command again should just show the two errors now.\nReproduce the issue outside of the build system The next step is getting the files that we need to reproduce the issue separated from the build system. We can choose to look at fs/overlayfs/overlay.lto.o or fs/xfs/xfs.lto.o; I am going to choose the former, as fs/overlayfs/ is a smaller directory than fs/xfs/.\nThe Linux kernel\u0026rsquo;s build system has a variable V=1 to see every build step, which we can dump to a text file for easy inspection and searching. Note: the -s flag needs to be dropped from make to get the full output.\n$ PATH=$CBL_SRC/llvm-project/build/stage1/bin:$PATH \\ make -kj\u0026#34;$(nproc)\u0026#34; LLVM=1 LLVM_IAS=1 olddefconfig clean all V=1 \u0026amp;\u0026gt;build.log First, we need to see how fs/overlayfs/overlay.lto.o is generated.\n$ rg fs/overlayfs/overlay.lto.o build.log 6011: ld.lld -m elf_x86_64 -mllvm -import-instr-limit=5 -r -o fs/overlayfs/overlay.lto.o --whole-archive fs/overlayfs/overlay.o ; ./tools/objtool/objtool orc generate --module --no-fp --no-unreachable --retpoline --uaccess --mcount fs/overlayfs/overlay.lto.o 6133:make[3]: *** [scripts/Makefile.build:307: fs/overlayfs/overlay.lto.o] Error 1 It comes from fs/overlayfs/overlay.o so we need to see how that is generated.\n$ rg fs/overlayfs/overlay.o build.log 29599: rm -f fs/overlayfs/overlay.o.symversions ; rm -f fs/overlayfs/overlay.o; llvm-ar cDPrsT fs/overlayfs/overlay.o fs/overlayfs/super.o fs/overlayfs/namei.o fs/overlayfs/util.o fs/overlayfs/inode.o fs/overlayfs/file.o fs/overlayfs/dir.o fs/overlayfs/readdir.o fs/overlayfs/copy_up.o fs/overlayfs/export.o 29634: ld.lld -m elf_x86_64 -mllvm -import-instr-limit=5 -r -o fs/overlayfs/overlay.lto.o --whole-archive fs/overlayfs/overlay.o ; ./tools/objtool/objtool orc generate --module --no-fp --no-unreachable --retpoline --uaccess --mcount fs/overlayfs/overlay.lto.o It comes from running llvm-ar on a bunch of .o files in fs/overlayfs/. Now we need to figure out which .o has the issue. This can be done by running the ld.lld command with a single .o files from the llvm-ar command (llvm-ar is only necessary for combining multiple .o files into one). For example, with fs/overlayfs/super.o:\n$ rm fs/overlayfs/overlay.o $ $CBL_SRC/llvm-project/build/stage1/bin/ld.lld -m elf_x86_64 -mllvm -import-instr-limit=5 -r -o fs/overlayfs/overlay.lto.o --whole-archive fs/overlayfs/super.o $ echo $? 0 So the issue is not with fs/overlayfs/super.c. Trying all the other files, we end up seeing the error in fs/overlayfs/file.c:\n$ rm fs/overlayfs/overlay.o $ $CBL_SRC/llvm-project/build/stage1/bin/ld.lld -m elf_x86_64 -mllvm -import-instr-limit=5 -r -o fs/overlayfs/overlay.lto.o --whole-archive fs/overlayfs/file.o ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) Okay, we have a single C file that can reproduce the issue, which we can reduce from. The Linux kernel allows us to generate a preprocessed file (.i) from source files (.c) directly, which is important for reduction purposes as it will be one file that can be built anywhere, rather than being tied to a build system and headers. The other thing we need is the build command for the object file (.o) so we know what flags to use for reproducing the issue. The kernel\u0026rsquo;s build system generates .cmd to show the command used to build the object file but these only show up when the object file can be successfully built. If you are reducing a build error on the object file, you can use the V=1 trick above to see the command. So, putting that all together:\n# Generate the \u0026#39;.i\u0026#39; and \u0026#39;.o\u0026#39; files $ PATH=$CBL_SRC/llvm-project/build/stage1/bin:$PATH \\ make -kj\u0026#34;$(nproc)\u0026#34; LLVM=1 LLVM_IAS=1 olddefconfig clean fs/overlayfs/file.{i,o} # Get the compiler command from the .cmd file $ head -1 fs/overlayfs/.file.o.cmd cmd_fs/overlayfs/file.o := clang -Wp,-MMD,fs/overlayfs/.file.o.d -nostdinc -I./arch/x86/include -I./arch/x86/include/generated -I./include -I./arch/x86/include/uapi -I./arch/x86/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -Qunused-arguments -fmacro-prefix-map=./= -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 --target=x86_64-linux-gnu -fintegrated-as -Werror=unknown-warning-option -Werror=ignored-optimization-argument -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -fcf-protection=none -m64 -falign-loops=1 -mno-80387 -mno-fp-ret-in-387 -mstack-alignment=8 -mskip-rax-setup -mtune=generic -mno-red-zone -mcmodel=kernel -DCONFIG_X86_X32_ABI -Wno-sign-compare -fno-asynchronous-unwind-tables -mretpoline-external-thunk -fno-delete-null-pointer-checks -Wno-frame-address -Wno-address-of-packed-member -O2 -Wframe-larger-than=2048 -fstack-protector-strong -Werror \u0026#34;-Wimplicit-fallthrough\u0026#34; -Wno-gnu -mno-global-merge -Wno-unused-but-set-variable -Wno-unused-const-variable -ftrivial-auto-var-init=pattern -fno-stack-clash-protection -pg -mfentry -DCC_USING_NOP_MCOUNT -DCC_USING_FENTRY -fno-lto -flto -fvisibility=hidden -falign-functions=64 -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-array-bounds -fno-strict-overflow -fno-stack-check -Werror=date-time -Werror=incompatible-pointer-types -Wno-initializer-overrides -Wno-format -Wno-sign-compare -Wno-format-zero-length -Wno-pointer-to-enum-cast -Wno-tautological-constant-out-of-range-compare -fsanitize=array-bounds -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=object-size -fsanitize=bool -fsanitize=enum -fsanitize-coverage=trace-pc -fsanitize-coverage=trace-cmp -DMODULE -DKBUILD_BASENAME=\u0026#39;\u0026#34;file\u0026#34;\u0026#39; -DKBUILD_MODNAME=\u0026#39;\u0026#34;overlay\u0026#34;\u0026#39; -D__KBUILD_MODNAME=kmod_overlay -c -o fs/overlayfs/file.o fs/overlayfs/file.c We can take that clang command and use it to generate fs/overlayfs/file.o from fs/overlayfs/file.i to make sure the issue is completely reproducible outside of the kernel\u0026rsquo;s build system. To do so, I like to copy the files into a separate folder and work within there.\n$ tmp_dir=$(mktemp -d) $ cp fs/overlayfs/file.i \u0026#34;$tmp_dir\u0026#34; $ cd \u0026#34;$tmp_dir\u0026#34; Now, the clang command has several flags in it that we do not need:\nAny of the flags prior to -Wall and define flags (-D...) since those are all preprocessor flags (the file has already been preprocessed at this stage). All of the warning flags (-W...) are pointless, as they cannot cause code generation to change. The --target flag is redundant, as we are on an x86_64 Linux platform, along with -fintegrated-as, as that is the default for x86_64 on Linux (it is only present in the command to make figuring out the assembler easier for the Kconfig stage). Lastly, we need to adjust the paths of the source files and output to be relative to our new temporary directory. So, we end up with:\nclang -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -std=gnu89 --target=x86_64-linux-gnu -fintegrated-as -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -fcf-protection=none -m64 -falign-loops=1 -mno-80387 -mno-fp-ret-in-387 -mstack-alignment=8 -mskip-rax-setup -mtune=generic -mno-red-zone -mcmodel=kernel -Wno-sign-compare -fno-asynchronous-unwind-tables -mretpoline-external-thunk -fno-delete-null-pointer-checks -O2 -fstack-protector-strong -mno-global-merge -ftrivial-auto-var-init=pattern -fno-stack-clash-protection -pg -mfentry -flto -fvisibility=hidden -falign-functions=64 -fno-strict-overflow -fno-stack-check -fsanitize=array-bounds -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=object-size -fsanitize=bool -fsanitize=enum -fsanitize-coverage=trace-pc -fsanitize-coverage=trace-cmp -c -o file.o file.i Now, we can put the commands that we need to reproduce the issue into a simple shell script. For the ld.lld, we do not care about the location of the output (-o ...) because we are not analyzing it, so I just dump it to /dev/null. I also know the -mllvm -import-instr-limit=5 is not critical for reproducing this bug so we can drop it here.\n$ cat test.sh #!/usr/bin/env bash llvm_bin=$CBL_SRC/llvm-project/build/stage1/bin $llvm_bin/clang -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -std=gnu89 --target=x86_64-linux-gnu -fintegrated-as -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -fcf-protection=none -m64 -falign-loops=1 -mno-80387 -mno-fp-ret-in-387 -mstack-alignment=8 -mskip-rax-setup -mtune=generic -mno-red-zone -mcmodel=kernel -Wno-sign-compare -fno-asynchronous-unwind-tables -mretpoline-external-thunk -fno-delete-null-pointer-checks -O2 -fstack-protector-strong -mno-global-merge -ftrivial-auto-var-init=pattern -fno-stack-clash-protection -pg -mfentry -flto -fvisibility=hidden -falign-functions=64 -fno-strict-overflow -fno-stack-check -fsanitize=array-bounds -fsanitize=shift -fsanitize=integer-divide-by-zero -fsanitize=object-size -fsanitize=bool -fsanitize=enum -fsanitize-coverage=trace-pc -fsanitize-coverage=trace-cmp -c -o file.o file.i $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o $ chmod +x test.sh $ ./test.sh ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) Before we move on, we should trim down the compiler flags, as some of them may not be necessary to reproduce the issue. Dropping flags after this point is definitely possible but doing it now can help creduce or cvise really tease out the source code that triggers the problem, as your interesting test can be written in a clearer manner (more on that later). There is not really any art to this; I will typically remove four to five flags at a time to see if I can reproduce the issue. If it does, the flags were not important but if it doesn\u0026rsquo;t, the flag needs to stick around (the Linux kernel is no longer buildable without optimizations so -Os/-O2/-O3 will almost always be needed). After running through that process with this issue, we end up with:\n$ cat test.sh #!/usr/bin/env bash llvm_bin=$CBL_SRC/llvm-project/build/stage1/bin $llvm_bin/clang -O2 -flto -fsanitize=object-size -c -o file.o file.i $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o $ ./test.sh ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) Sweet! We have a single preprocessed file that we can use to reproduce the issue with two simple commands. Now, we can reduce this input using either creduce or a more recent Python implementation called cvise. They work the same but I prefer cvise, as it appears to be faster for me and it produces more readable C code (as it keeps function and variable names from the original source).\nWriting a good interestingness test and running the reduction NOTE: This is distilled down from the official \u0026ldquo;Using C-Reduce\u0026rdquo; documentation. If I say something that contradicts the documentation, assume the documentation is correct (but drop me a note so I can tell).\ncreduce and cvise work by running a shell script against the input and checking the return code of the script to determine if the bug is still present (so the source can be reduced further) or not (so it can undo the test it just tried). 0 is considered \u0026ldquo;interesting\u0026rdquo; and non-zero is not (source is invalid, other build errors, etc).\nSo in this case, we might want our interestingness test to look something like:\n#!/usr/bin/env bash # Location of your built toolchain\u0026#39;s bin/ folder llvm_bin=$CBL_SRC/llvm-project/build/stage1/bin # If the source cannot be compiled with LTO and \u0026#39;-fsanitize=object-size\u0026#39;, it is not interesting (we know the source builds at the beginning) $llvm_bin/clang -O2 -flto -fsanitize=object-size -c -o file.o file.i || exit # If \u0026#34;error: Never resolved function from blockaddress\u0026#34; is present, the test is interesting (grep returns 0 when the string is found) $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o |\u0026amp; grep \u0026#34;error: Never resolved function from blockaddress\u0026#34; Running this, we get:\n$ ./test.sh ... ld.lld: error: Never resolved function from blockaddress (Producer: \u0026#39;LLVM14.0.0git\u0026#39; Reader: \u0026#39;LLVM 14.0.0git\u0026#39;) $ echo $? 0 Now, we want to make sure creduce/cvise gives us code that stresses the error under these specific conditions and not others. For this reason, I typically write two other tests within my interestingness test. The first is making sure that creduce/cvise does not introduce new warnings under either GCC and clang; this also makes sure the code is accepted by two compilers, which improves its quality. This directly contradicts note #3 in the cvise README but I have seen some dumb looking code generated from these tools so keeping it somewhat warning clean makes that less likely. The one downside of this is it typically makes the reduction take longer so keep that in mind if you decide to add it.\nFirst, let\u0026rsquo;s try to build the source with gcc (as mentioned above, the Linux kernel requires optimizations to build so we add -O2):\n$ gcc -O2 -c -o /dev/null file.i ... $ echo $? 0 Adding -Werror will turn all of the warnings that we currently see into errors so we need to add -Wno-error=... for the warnings that do show up. For gcc, I only see -Wattributes.\n$ gcc -O2 -Werror -Wno-error=attributes -c -o /dev/null file.i ... $ echo $? 0 Next, we want to test with clang in a similar manner, which we end up with:\n$ clang -O2 -Werror -Wno-error={address-of-packed-member,unused-value} -c -o /dev/null file.i ... $ echo $? 0 Lastly, I want GCC to try and catch any instances of -Waddress-of-packed-member or -Wunused-value that might crop up in various passes, which we cannot catch with clang because the source is not currently clean (we could try to fix that in the actual source file but this is a little bit easier).\nNow, we can throw these lines into our interestingness test:\n$ cat test.sh #!/usr/bin/env bash # Location of your built toolchain\u0026#39;s bin/ folder llvm_bin=$CBL_SRC/llvm-project/build/stage1/bin # New warnings or invalid source are not interesting (smoke test) gcc -O2 -Werror -Werror={address-of-packed-member,unused-value} -Wno-error=attributes -c -o /dev/null file.i || exit $llvm_bin/clang -O2 -Werror -Wno-error={address-of-packed-member,unused-value} -c -o /dev/null file.i || exit # If the source cannot be compiled with LTO and \u0026#39;-fsanitize=object-size\u0026#39;, it is not interesting (we know the source builds at the beginning) $llvm_bin/clang -O2 -flto -fsanitize=object-size -c -o file.o file.i || exit # If \u0026#34;error: Never resolved function from blockaddress\u0026#34; is present, the test is interesting (grep returns 0 when the string is found) $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o |\u0026amp; grep \u0026#34;error: Never resolved function from blockaddress\u0026#34; $ ./test.sh ... $ echo $? 0 The second test I like to add is only relevant if the issue is reproducible under a combination of flags. In these cases, I like to make sure the issue is not reproducible when using a subset of the flags, as that will sometimes help show the issue a little bit clearer (as I mentioned before when reducing down compiler flags). For example, the bug we are looking into is only reproducible with -flto when it is used in combination with -fsanitize=object-size so I want to make sure the issue does not show up when only using -flto or -fsanitize=object-size, as that would be a different bug than the one we are reducing. It would still be worth looking into but the reduced file would not be stressing the bug in the best way.\nAdding these tests would look something like:\n$ cat test.sh #!/usr/bin/env bash # Location of your built toolchain\u0026#39;s bin/ folder llvm_bin=$CBL_SRC/llvm-project/build/stage1/bin # New warnings or invalid source are not interesting (smoke test) gcc -O2 -Werror -Werror={address-of-packed-member,unused-value} -Wno-error=attributes -c -o /dev/null file.i || exit $llvm_bin/clang -O2 -Werror -Wno-error={address-of-packed-member,unused-value} -c -o /dev/null file.i || exit # If the source cannot be compiling and linked with \u0026#39;-fsanitize=object-size\u0026#39; without LTO, it is not interesting $llvm_bin/clang -O2 -fsanitize=object-size -c -o file.o file.i || exit $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o || exit # If the source cannot be compiled and linked with LTO without \u0026#39;-fsanitize=object-size\u0026#39;, it is not interesting $llvm_bin/clang -O2 -flto -c -o file.o file.i || exit $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o || exit # If the source cannot be compiled with LTO and \u0026#39;-fsanitize=object-size\u0026#39;, it is not interesting (we know the source builds at the beginning) $llvm_bin/clang -O2 -flto -fsanitize=object-size -c -o file.o file.i || exit # If \u0026#34;error: Never resolved function from blockaddress\u0026#34; is present, the test is interesting (grep returns 0 when the string is found) $llvm_bin/ld.lld -m elf_x86_64 -r -o /dev/null --whole-archive file.o |\u0026amp; grep \u0026#34;error: Never resolved function from blockaddress\u0026#34; $ ./test.sh ... $ echo $? 0 Now that we have a fully formed interestingness test, we can run cvise. Depending on how many tests it runs in parallel and the speed of your machine, this might take a while.\n$ cvise test.sh file.i 00:00:02 INFO ===\u0026lt; 13 \u0026gt;=== 00:00:02 INFO running 32 interestingness tests in parallel 00:00:02 INFO INITIAL PASSES 00:00:02 INFO ===\u0026lt; IncludesPass \u0026gt;=== 00:00:02 INFO ===\u0026lt; UnIfDefPass \u0026gt;=== 00:00:02 INFO ===\u0026lt; CommentsPass \u0026gt;=== 00:00:05 INFO (0.0%, 2217001 bytes, 31799 lines) ... Runtime: 5975 seconds Reduced test-cases: --- /home/nathan/cbl/creduce-files/cbl-1215/file.i --- struct fd { int file; } kmem_cache_alloc(), ovl_write_iter_real; struct { int dep_map; } * percpu_rwsem_release_sem; struct { void *ki_complete; } * is_sync_kiocb_kiocb; void *ovl_write_iter___trans_tmp_4; _Bool ovl_write_iter___trans_tmp_3; void lock_release(int *, long); static void percpu_rwsem_release(long ip) { lock_release(\u0026amp;percpu_rwsem_release_sem-\u0026gt;dep_map, ip); } int file_remove_privs(); long ovl_write_iter() { long ret = file_remove_privs(); if (ret) goto out_unlock; ret = (\u0026amp;ovl_write_iter_real)-\u0026gt;file; if (ret) goto out_unlock; ovl_write_iter___trans_tmp_3 = is_sync_kiocb_kiocb-\u0026gt;ki_complete == 0; if (ovl_write_iter___trans_tmp_3) { kmem_cache_alloc(); if (ovl_write_iter___trans_tmp_4) goto out; percpu_rwsem_release(({ __here: (long)\u0026amp;\u0026amp;__here; })); } out: out_unlock: return ret; } So the reduction took a little over an hour and a half and now it is a lot easier for an LLVM developer to take that small C program, transform it into LLVM IR, and figure out what is going wrong here. The difference is crazy (0.08% the original size!):\n$ wc -l file.i{,.orig} 37 file.i 44372 file.i.orig 44409 total Conclusion Providing developers a small, concise reproducer is important so that all their time can spent debugging and fixing the issue; otherwise, they are less likely to respond to the report, as it will take more work on their part than another issue where the reproducer is ready and available. Hopefully this post was informative! If there are any issues, comments, or improvements, feel free to reach out to me via email or Twitter.\n","permalink":"https://nathanchance.dev/posts/cvise-lto-kernel-bug/","summary":"My co-maintainer Nick Desaulniers wrote a great post about taking a several thousand line C file that exposed a compiler bug down to 12 lines with creduce. I thought I would do the same thing with a bug that only happens with link time optimization (LTO) in the Linux kernel, which is a bit of a different beast. Hopefully this post can help others reduce their own bugs and think about the best way to triage a bug.","title":"Reducing an LTO Linux kernel bug with cvise"},{"content":"This was a bit of a shorter month for me, as I took some vacation at the beginning of the month to recouperate and meet half of my girlfriend\u0026rsquo;s extended family and friends for the first time. Thankfully, the rest of the ClangBuiltLinux team was able to keep everything churning along in my absence and I was able to be super productive the rest of the month once I returned.\nOccasionally, I will forget to link something from the mailing list in this post. To see my full mailing list activity (patches, reviews, and reports), you can view it on lore.kernel.org.\nLinux kernel patches -Wbitwise-instead-of-logical: A new warning in LLVM exposed a few places in the kernel where bitwise operations were being used with boolean expressions with side effects, which may be undesirable (ChromeOS had a massive bug due to this behavior\u0026hellip;). Cleaning these up in the kernel was done with this patch and the following six here. Luckily, there were no bugs but getting the kernel free of this warning will allow new instances to pop up clearly.\nInput: touchscreen - Avoid bitwise vs logical OR warning (v1) drm/i915: Avoid bitwise vs logical OR warning in snb_wm_latency_quirk() (v1) staging: wlan-ng: Avoid bitwise vs logical OR warning in hfa384x_usb_throttlefn() (v1) platform/x86: thinkpad_acpi: Fix bitwise vs. logical warning (v1) nfp: bpf: Fix bitwise vs. logical OR warning (v1) lib: zstd: Add cast to silence clang's -Wbitwise-instead-of-logical (v1) soc/tegra: fuse: Fix bitwise vs. logical OR warning (v1) -Wenum-conversion: A simple implicit conversion between two different enumerated types, which can be a bug if the two values are not mapped in a one to one manner. Thankfully, the one instance of this warning that cropped up this month was not a true bug because the two enums had the same value but it was simple enough to clean up to keep the kernel warning free.\nregulator: lp872x: Remove lp872x_dvs_state (v1) -Wimplicit-fallthrough: I would argue one of the biggest deficiencies of C as a language is implicit fallthroughs in switch statements. There has been a lot of work done by Gustavo A.R. Silva to clean these up for both GCC and clang because they disagree in one specific case. These patches help keep the warning free of new instances in linux-next so that this warning can be turned on for clang in 5.16.\nice: Fix clang -Wimplicit-fallthrough in ice_pull_qvec_from_rc() (v1) net: ax88796c: Fix clang -Wimplicit-fallthrough in ax88796c_set_mac() (v1) ASoC: qdsp6: audioreach: Fix clang -Wimplicit-fallthrough (v1): -Winfinite-recursion: This is a super interesting warning and the first time I have ever seen an instance of this warning in the kernel since I started building with clang a little over three years ago. In the kernel, it is common to have a function name then the same function name with two underscores before it (e.g. foo() and __foo()) to signify that foo() holds a lock while __foo() does not so that more code can be reused. In this particular instance, __foo() was created but the newly created foo() was not updated properly.\niio: frequency: adrf6780: Fix adrf6780_spi_{read,write}() (v1) -Wpointer-bool-conversion: This warning points out that arrays in structures cannot be NULL when it is not the first member in said structure so the check does not do anything. The author may have intended to have a different check (such as the first element of the array being 0) or the check can just be removed. In this case, it was the latter.\nnet: ax88796c: Remove pointless check in ax88796c_open() (v1) -Wuninitialized/-Wsometimes-uninitialized: Unfortunately, because the kernel is written in C, uninitialized variables continue to be an issue, especially since GCC\u0026rsquo;s -Wmaybe-uninitialized has been disabled by default since 5.7. These will continue to pop up until GCC can be fixed but it does not seem like that will occur anytime soon as it has been a deficiency for a long time; until then, we will continue to fix them.\nmm/memory_failure: Initialize extra_pins in me_pagecache_clean() (v1) drm/msm/dpu: Remove commit and its uses in dpu_crtc_set_crc_source() (v1) net/mlx5: Add esw assignment back in mlx5e_tc_sample_unoffload() (v1) Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH] kasan: Always respect CONFIG_KASAN_STACK\nRe: [PATCH] compiler_types: mark __compiletime_assert failure as __noreturn\nRe: [PATCH] KVM: x86: avoid warning with -Wbitwise-instead-of-logical\nRe: [PATCH 3/3] arm64: vdso32: require CROSS_COMPILE_COMPAT for gcc+bfd\n[PATCH v2 0/4] compat vdso cleanups\n[PATCH 0/2] gcc-plugins: Explicitly document purpose and deprecation schedule\nRe: [PATCH] compiler-gcc.h: Define __SANITIZE_ADDRESS__ under hwaddress sanitizer\nRe: [PATCH] dma-buf: fix uninitialized variable usage in selftests\nRe: [PATCH] dma-buf: st: fix error handling in test_get_fences()\n[X86] Implement -fzero-call-used-regs option\n[ARM] Use hardware TLS register in Thumb2 mode when -mtp=cp15 is passed\nRe: [PATCH] ARM: Thumb2: avoid __builtin_thread_pointer() on Clang\nRe: [PATCH] kbuild: Support clang-$ver builds\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [Intel-gfx] [vfio:next 33/38] drivers/gpu/drm/i915/i915_pci.c:975:2: warning: missing field 'override_only' initializer\nRe: [v2 PATCH] crypto: api - Fix built-in testing dependency failures\nRe: How to check my LLVM toolchain is optimized for PGO and/or ThinLTO?\nRe: [tip:sched/core 14/47] kernel/sched/fair.c:893:22: error: variable 'p' set but not used\nRe: [BUG] [5.15] Compilation error in arch/x86/kvm/mmu/spte.h with clang-14\nLTO crash related to fortify\nRe: [PATCH 4/4] block: cleanup the flush plug helpers\nRe: i386: tinyconfig: perf_event.h:838:21: error: invalid output size for constraint '=q'\nModuleNotFoundError: No module named 'attr'\nApply 091bb549f7722723b284f63ac665e2aedcf9dec9 to 4.19\nTooling improvements patches: Drop RDMA patch from mainline\nUpdate patches\nactions-workflows: Initial shfmt action and workflow\nFetch metadata.json and use it to display clang checkout date and hash\npatches: Remove -next folder\ngithub: Add shellcheck and yapf workflows\ngithub: Switch to shared lint workflows\nci.sh: Build release/13.x\nRefresh patches\nbuild-llvm.py: Add '--llvm-folder'\npatches: android-mainline: Remove ARM futex patch\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nWhile researching an old issue, I noticed that some of the links were dead. As a result, I spent some time going through our issue tracker to replace all links to other archive sites (such as lkml.org, spinics.net, and marc.info) with canonical links to lore.kernel.org, as those links are expected to be stable and not disappear; even if they did, the message ID is in the URL so it can be looked up across the internet, rather than some arbitrary URL. There is nothing worse than looking into an old issue and having a dead link (I always think of this xkcd). There is a lot of mailing list discussions that come up later so being able to access that is of the utmost importance.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/october-2021-cbl-work/","summary":"This was a bit of a shorter month for me, as I took some vacation at the beginning of the month to recouperate and meet half of my girlfriend\u0026rsquo;s extended family and friends for the first time. Thankfully, the rest of the ClangBuiltLinux team was able to keep everything churning along in my absence and I was able to be super productive the rest of the month once I returned.","title":"October 2021 ClangBuiltLinux Work"},{"content":"Linux kernel patches tools: compiler-gcc.h: Guard error attribute use with __has_attribute (v1): The minimum version of GCC was raised to 5.1, which helped simplify a lot of code but caused issues for older versions of clang. This helps resolve it.\nHarden clang against unknown flag options (v2): A follow up.\nptp: ocp: Avoid operator precedence warning in ptp_ocp_summary_show() (v1, v2): An interesting warning around operator precedence, which will not be an issue in practice but now that Linus has decreed that warnings are unacceptable, it is important to clean them up!\nlocking/ww-mutex: Fix uninitialized use of ret in test_aa() (v1): More uninitialized variable usage biting us because GCC\u0026rsquo;s warning is turned off for the kernel.\nkasan: Always respect CONFIG_KASAN_STACK (v1): Clang\u0026rsquo;s asan-stack parameter shows high stack usage so it has been disabled but RISC-V\u0026rsquo;s implementation was not respecting that so this patch resolves that, meaning RISC-V\u0026rsquo;s allmodconfig target now builds completely clean with clang. asan-stack has been a topic of recent conversation so hopefully that can be resolved soon.\ndrm/kmb: Remove set_test_mode_src_osc_freq_target_{hi,low}_bits() (v1): Intel\u0026rsquo;s kernel test robot exposed a couple of instances of unused inline functions, which GCC will never warn about. Cleaning up dead code always helps with maintainability in the long run.\ndrm/amd: Guard IS_OLD_GCC assignment with CONFIG_CC_IS_GCC (v1): An instance where clang\u0026rsquo;s fake GCC version of 4.2.1 caused problems for us. Hopefully as time goes on, we will run into less of these as more people test with clang.\ndrm/amd: Initialize remove_mpcc in dcn201_update_mpcc() (v1): Another uninitialized warning\u0026hellip;\ndrm/amd: Return NULL instead of false in dcn201_acquire_idle_pipe_for_layer() (v1): Returning 0 or false when the function returns a pointer will cause a clang warning so that you either use NULL or change the value, just to make sure that is what was intended.\nPatch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\n9934a5b2ed5aa6e6bbb2e55c3cd98839722c226e breaks x86_64 ThinLTO\nRe: [PATCH] s390/unwind: use current_frame_address() to unwind current task\nRe: [PATCH] fix missing 'sys' package\nRe: [PATCH] Revert \u0026quot;Enable '-Werror' by default for all kernel builds\u0026quot;\nRe: [PATCH] lpfc: Fix compilation errors on kernels with no CONFIG_DEBUG_FS\nRe: [PATCH v2] gen_compile_commands: fix missing 'sys' package\nRe: [PATCH v2] lpfc: Fix compilation errors on kernels with no CONFIG_DEBUG_FS\nRe: [PATCH 0/4] Fix stack usage of DML\n[PATCH 00/10] raise minimum GCC version to 5.1\nRe: [PATCH] hardening: Default to INIT_STACK_ALL_ZERO if CC_HAS_AUTO_VAR_INIT_ZERO\nRe: [PATCH] gen_compile_commands: add missing sys import\nRe: [PATCH] powerpc: clean up UPD_CONSTR\nRe: [PATCH] lib/zlib_inflate/inffast: Check config in C to avoid unused function warning\nAdd .config artifact checker\nRe: [PATCH] [RFC/RFT]SCS:Add gcc plugin to support Shadow Call Stack\nRe: [PATCH v3] lib/zlib_inflate/inffast: Check config in C to avoid unused function warning\nRe: [PATCH v2] x86/setup: call early_reserve_memory() earlier\nproblem matcher updates\nRe: [PATCH v2] drm/vc4: Unselect PM\nRe: [PATCH] objtool: Teach get_alt_entry() about more relocation types\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: kernel/sched/core.c:5854:20: warning: unused function 'sched_core_cpu_deactivate'\nRe: [vmlinux.lds.h] d4c6399900: BUG:unable_to_handle_page_fault_for_address\nRe: [CI-NOTIFY]: TCWG Bisect tcwg_kernel/llvm-master-aarch64-mainline-allyesconfig - Build # 16 - Successful!\nRe: ❌ FAIL: Test report for kernel 5.14.0 (mainline.kernel.org-clang, f1583cb1)\nRe: [GIT PULL v2] Kbuild updates for v5.15-rc1\nRe: [linux-next:master 10023/11721] include/linux/memory_hotplug.h:312:26: warning: unused parameter 'group'\nRe: ❌ FAIL: Test report for kernel 5.14.0 (mainline.kernel.org-clang, 1dbe7e38)\nRe: [PATCH] Enable '-Werror' by default for all kernel builds\nRe: ipv4/tcp.c:4234:1: error: the frame size of 1152 bytes is larger than 1024 bytes [-Werror=frame-larger-than=]\nRe: ERROR: modpost: __mulodi4 [drivers/block/nbd.ko] undefined!\ndrivers/infiniband/hw/qib/qib_sysfs.c:413:1: error: static_assert expression is not an integral constant expression\nRISC-V KASAN does not disable asan-stack\nHigher stack use with KASAN on 32-bit ARM\n-Wframe-larger-than= in drivers/gpu/drm/amd/display/dc/calcs/dce_calcs.c\nRe: [mcgrof-next:20210908-firmware-builtin-v4 2/11] drivers/base/firmware_loader/builtin/main.c:36:6: error: no previous prototype for function 'firmware_is_builtin'\nRe: [dborkman:pr/bpf-cgrp 2/4] include/linux/cgroup-defs.h:771:70: warning: unused parameter 'skcd'\n\u0026quot;Patch series format unknown\u0026quot; with mbox file\nRe: linux: build faulure: error: \u0026quot;__has_attribute\u0026quot; is not defined\nQEMU 6.1.0 regression with CONFIG_THUMB2_KERNEL\nRe: ❌ FAIL: Test report for kernel 5.15.0-rc1 (mainline.kernel.org-clang, 80be5998)\nRe: clang: error: unsupported argument '-mimplicit-it=always' to option 'Wa,'\nRe: Odd pci_iounmap() declaration rules..\nRe: x86_64: clang-10: \u0026lt;instantiation\u0026gt;:2:2: error: unknown use of instruction mnemonic without a size suffix\nRe: [tip: x86/urgent] x86/setup: Call early_reserve_memory() earlier\nRe: [TCWG CI] Regression caused by linux: parisc: Declare pci_iounmap() parisc version only when CONFIG_PCI enabled\nRe: [Intel-gfx] [PATCH v3 03/13] drm/dp: add LTTPR DP 2.0 DPCD addresses\n[RISCV] Optimize (add (mul x, c0), c1)\nRe: [PATCH v3 1/6] drm/vc4: select PM (openrisc)\nRe: [PATCH v2] platform/x86: amd-pmc: Export Idlemask values based on the APU\nRe: next/master build: 209 builds: 5 failed, 204 passed, 5 errors, 1677 warnings (next-20210923)\nRe: drivers/gpu/drm/kmb/kmb_dsi.c:812:2: warning: unused function 'set_test_mode_src_osc_freq_target_low_bits'\nRe: [v2 PATCH] crypto: api - Fix built-in testing dependency failures\nRe: [PATCH bpf-next 06/13] xsk: optimize for aligned case\nRe: [PATCH v2 2/7] PCI: ACPI: PM: Do not use pci_platform_pm_ops for ACPI\nRe: [PATCH v7] hugetlbfs: Extend the definition of hugepages parameter to support node allocation\nTooling improvements Disable -Werror for pseries_defconfig for now\nCheck matrices for number of jobs\nDisable -Werror for now\ncheck_logs.py: Increase timeout for CONFIG_KASAN (part 2)\nMake mainline green\nDisable CONFIG_CFI_CLANG=y x86_64 builds with clang-12\nA couple of small fixes\nSwitch to directory-based patch management\nDisable boot for CONFIG_KASAN_SW_TAGS=y on clang-11 and clang-12\npatches: Add futex patch to android-mainline\nDisable some builds to make -next green\ncheck_logs.py: Handle equals sign in configuration value\npatches: Update FPU patch to upstream submission\npatches: Remove FPU patch for -next and -tip\ncheck_logs.py: Try multiple times to fetch items with exponential backoff\nAdd problem matchers for depmod, dtc, and modpost\nRemove lto-cfi-tip patches\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nThis month, we had a few conferences: the LLVM Distributors Conference, the ClangBuiltLinux meetup, and Linux Plumbers Conference. It was super helpful for interfacing with the greater LLVM and Linux kernel community and reorient ourselves going into the next year. I gave a talk at the ClangBuiltLinux meetup around our continuous integration.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/september-2021-cbl-work/","summary":"Linux kernel patches tools: compiler-gcc.h: Guard error attribute use with __has_attribute (v1): The minimum version of GCC was raised to 5.1, which helped simplify a lot of code but caused issues for older versions of clang. This helps resolve it.\nHarden clang against unknown flag options (v2): A follow up.\nptp: ocp: Avoid operator precedence warning in ptp_ocp_summary_show() (v1, v2): An interesting warning around operator precedence, which will not be an issue in practice but now that Linus has decreed that warnings are unacceptable, it is important to clean them up!","title":"September 2021 ClangBuiltLinux Work"},{"content":"Linux kernel patches [PATCH] dmaengine: idxd: Remove unused status variable in irq_process_work_list(): Not a clang specific warning but it impacts builds where I use -Werror, as kernel builds should be as warning clean as possible.\n[PATCH] ASoC: Intel: boards: Fix CONFIG_SND_SOC_SDW_MOCKUP select: Not a clang specific warning but Kconfig warnings such as this can potentially be build errors later due to incorrect dependency selection so it is important to fix them when they pop up.\n[PATCH] scripts/recordmcount.pl: Remove check_objcopy() and $can_use_local: The kernel has certain version checks in place that do not always work with LLVM tools due to different version outputs. This was an easy cleanup because the kernel checks for certain tool versions before building, which provides an airtight reason to remove other version checks for versions older than the mandatory one.\n[PATCH] netfilter: ipset: Fix maximal range check in hash_ipportnet4_uadt(): A fix for a simple programming error but this was important to catch because the fixed patch was destined for the current merge window as it was in the netfilter tree, rather than netfilter-next tree, and it is a security patch.\n[PATCH] PCI: Always initialize dev in pciconfig_read: Another small fix for an uninitialized variable warning.\n[PATCH] cpuidle: pseries: Mark pseries_idle_proble() as __init | [PATCH] powerpc/xive: Do not mark xive_request_ipi() as __init: The kernel marks certain functions as \u0026ldquo;init\u0026rdquo;, meaning that their memory is discarded once the kernel has fully loaded. As a result, the kernel has a tool that checks that all init functions are only called from other init functions and not functions that can run at any point. This commit fixes a warning that clang had because it did not inline a function like GCC did, which is a common reason for these warnings. Whether or not it is an actual issue in practice does not matter, it is important to clean these up to avoid spooky warnings.\n[PATCH 0/4] staging: r8188eu: Fix clang warnings: A new version of another driver in the staging directory was introduced without being compiled with clang so this series cleans up the warnings that it found. Eventually, I hope that compiling with both compilers will become easy enough that everyone does it automatically but that is a long-term and lofty goal :)\n[PATCH] net: ethernet: stmmac: Do not use unreachable() in ipq806x_gmac_probe(): objtool is an object file validator for x86_64 (and maybe other architectures in the future), which warns when the assembly of a file might have potential issues, which may be compiler bugs. In this particular case, it was easy enough to just fix the code in question but this is most likely related to another open issue that we currently have.\n[PATCH] staging: r8188eu: os_dep: Hoist vmalloc.h include into osdep_service.h: Another ARCH=hexagon build fix, which I have mentioned in previous posts is the only architecture in the tree that only compiles with LLVM, meaning we must keep it building.\n[PATCH] mm/hugetlb: Initialize page to NULL in alloc_buddy_huge_page_with_mpol(): A common theme throughout all of these posts is fixing uninitialized variables, because Linus disabled GCC\u0026rsquo;s -Wmaybe-uninitialized several releases ago because there are a lot of false positives due to GCC doing its analysis after inlining and optimization. Fun fact, I actually learned today that clang has a similar warning, -Wconditional-uninitialized, which in my testing appears to be just as noisy as GCC\u0026rsquo;s, but it is off by default. -Wsometimes-uninitialized was split off from it and added to -Wuninitialized because it does not suffer from the same issues (\u0026ldquo;sometimes\u0026rdquo; is more definitive than \u0026ldquo;maybe\u0026rdquo;).\n[PATCH 0/3] staging: r8188eu: Fix -Wuninitialized instances from clang: -Wuninitialized (a common GCC/clang flag) was disabled for this new driver and someone enabled it without testing it with clang so this series cleans up those warnings.\n[PATCH] drm/i915/selftest: Fix use of err in igt_reset_{fail, nop}_engine(): Another -Wuninitialized warning :^)\n[PATCH] iwlwifi: mvm: Fix bitwise vs logical operator in iwl_mvm_scan_fits() | [PATCH] staging: rtl8192u: Fix bitwise vs logical operator in TranslateRxSignalStuff819xUsb() | [PATCH] lib/zstd: Fix bitwise vs logical operators: A proposed warning in clang exposed a few instances where \u0026amp; was used instead of \u0026amp;\u0026amp; with boolean values. This is not always a bug but it is much clearer to use the logical operators because of short circuiting; b will not be evaluated in if (a \u0026amp;\u0026amp; b) if a is false, whereas it will be in if (a \u0026amp; b), which caused a bug in ChromeOS.\n[PATCH] bus: ti-sysc: Add break in switch statement in sysc_init_soc() | [PATCH] drm/radeon: Add break to switch statement in radeonfb_create_pinned_object() | [PATCH] scsi: st: Add missing break in switch statement in st_ioctl(): In the quest to enable -Wimplicit-fallthrough, which is a little bit more pedantic with clang over GCC (a known difference which neither party is interested in changing), I sent a few patches to mark case statements with break. This version of the warning can find bugs so it is important to get it enabled so CI systems can start catching them.\nRe: Patch \u0026quot;vmlinux.lds.h: Handle clang's module.{c,d}tor sections\u0026quot; has been added to the 5.13-stable tree: A stable backport for a commit that I submitted upstream so that Android and ChromeOS do not regress.\n[PATCH] fs/ntfs3: Remove unused variable cnt in ntfs_security_init(): A simple clean up of a variable that was unused.\n[PATCH 1/3] kbuild: Remove -Wno-format-invalid-specifier from clang block: Clean up of our clang warning section in the main Makefile, which is important for future travelers.\n[PATCH] kbuild: Switch to 'f' variants of integrated assembler flag: A small clean up of the flags used for the integrated assembler, as it has been brought up a few times in various code reviews.\n[PATCH] f2fs: Add missing inline to f2fs_sanity_check_cluster() stub: The kernel uses inline on stubs to avoid unused function warnings; this patch adds one that was missing.\n[PATCH 1/2] ALSA: hda/sigmatel - Sink stac_shutup() into stac_suspend(): CONFIG_PM=n builds are not often tested, which can cause warnings with suspend and resume functions. This was uncovered on s390, which removed support for CONFIG_PM.\n[PATCH] rtlwifi: rtl8192de: Fix initialization of place in _rtl92c_phy_get_rightchnlplace()\n[PATCH 0/2] Harden clang against unknown flag options: There are some optimization flags that GCC has which clang does not implement and it issues a warning about that. When these flags are added to the compiler flags unconditionally, it causes all cc-option and cc-disable-warning calls (which test support for compiler flags) to fail, meaning that certain warnings or options do not get enabled/disabled, annoying developers. This series resolves the particular instance that Intel\u0026rsquo;s Oday bot ran across in randconfig testing and makes sure that we catch these issues quicker in the future.\n[PATCH] cxgb4: Properly revert VPD changes: A botched revert introduced some uninitialized variables so this commit resets the file properly.\n[PATCH 0/3] drm/i915: Enable -Wsometimes-uninitialized: -Wuninitialized and -Wsometimes-uninitialized were disabled separately for i915 (because it enables -Wall -Wextra to help catch bugs), even though the latter is a sub-warning of the former (meaning that if -Wuninitialized is disabled, so is -Wsometimes-uninitialized). This series cleans up some instances of the warning then enables it again so that i915 gets coverage like the rest of the kernel.\n[PATCH] drm/i915: Clean up disabled warnings: This patch came about from my investigation of the optimization flag issue that I mentioned above. This helps avoid the warnings because we eliminate a few cc-disable-warning calls.\n[PATCH] cxl/core: Avoid using dev uninitialized in devm_cxl_add_decoder()\n[PATCH] crypto: sm4 - Do not change section of ck and sbox: A warning from GNU as that only appears when compiling with clang. Subtle but important to get right.\n[PATCH 1/3] MAINTAINERS: Update ClangBuiltLinux mailing list: We moved mailing lists so that we get archival along with the rest of the kernel through lore.kernel.org and we no longer have to deal with spam ourselves.\n[PATCH] x86/setup: Explicitly include acpi.h: A build error that was introduced during the merge window, which is unfortunate because that is what linux-next is for.\nLLVM patches [clang] Expose unreachable fallthrough annotation warning: The commit message is fairly self explanatory; this is necessary to enable clang\u0026rsquo;s -Wimplicit-fallthrough. Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\nRe: [PATCH 3/3] isystem: delete global -isystem compile option\nRe: [PATCH v6 3/3] Documentation/llvm: update CROSS_COMPILE inferencing\nRe: [PATCH v2] compiler_attributes.h: move __compiletime_{error|warning}\nRe: [PATCH] slub: fix kmalloc_pagealloc_invalid_free unit test\nLLVM build of RISCV kernel fails with relocation R_RISCV_PCREL_HI20 out of range\nRe: [PATCH v3] riscv: explicitly use symbol offsets for VDSO\nRe: [PATCH] kbuild: check CONFIG_AS_IS_LLVM instead of LLVM_IAS\nRe: [PATCH v2] scripts/Makefile.clang: default to LLVM_IAS=1\nRe: [PATCH v2] clang-tools: Print information when clang-tidy tool is missing\nRe: [PATCH] Makefile: remove stale cc-option checks\nRe: [PATCH] x86/build: remove stale cc-option checks\n[Clang] Extend -Wbool-operation to warn about bitwise and of bools with side effects\nRe: [PATCH] kbuild: Fix 'no symbols' warning when CONFIG_TRIM_UNUSD_KSYMS=y\n[PATCH 0/7] kbuild: remove cc-option-yn\nRe: [PATCH v2 1/7] Compiler Attributes: Add __alloc_size() for better bounds checking\nRe: [PATCH][next] fs/ntfs3: Fix fall-through warnings for Clang\nRe: [PATCH][next] staging: r8188eu: Fix fall-through warnings for Clang\nRe: [GIT PULL] Enable -Wimplicit-fallthrough for Clang for 5.14-rc7\nRe: [PATCH v3 0/5] Enable -Warray-bounds and -Wzero-length-bounds\nRe: [PATCH] ARM: select HAVE_FUTEX_CMPXCHG\nRe: [PATCH] powerpc/bug: Cast to unsigned long before passing to inline asm\nRe: [PATCH] powerpc/ptdump: Fix generic ptdump for 64-bit\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [CI-NOTIFY]: TCWG Bisect tcwg_kernel/llvm-release-aarch64-next-allmodconfig - Build # 26 - Successful!\nRe: [CI-NOTIFY]: TCWG Bisect tcwg_kernel/llvm-release-arm-stable-allyesconfig - Build # 4 - Successful!\nRe: [CI-NOTIFY]: TCWG Bisect tcwg_kernel/llvm-master-aarch64-next-allyesconfig - Build # 14 - Successful!\nRe: [PATCH v3] ucounts: add missing data type changes\nRe: [gustavoars-linux:for-next/clang-fallthrough 1/1] warning: fallthrough annotation in unreachable code/\nwarning: objtool: can't find jump dest instruction\nSROA: Enhance speculateSelectInstLoads\nError: make variable 'LLVM_IAS' value invalid '0'\nRe: [block:io_uring-fops.v6 58/64] io_uring.c:undefined reference to __compiletime_assert_833\u0026rsquo;`\nRe: [PATCH] mm/mempolicy: fix a race between offset_il_node and mpol_rebind_task\nFedora i686 config \u0026quot;traps: PANIC: double fault, error_code: 0x0\u0026quot; in test_atomic64()\nERROR: modpost: \u0026quot;__mulodi4\u0026quot; [drivers/block/nbd.ko] undefined!\n-Wshift-count-negative in drivers/net/ethernet/sfc/\n[CVP] processSwitch: Remove default case when switch cover all possible values.\nRe: [dhowells-fs:netfs-folio-regions 11/28] fs/netfs/read_helper.c:979:13: warning: variable 'folio' is uninitialized when used here\nRe: [linux-next:master 6632/9522] include/linux/pm_opp.h:458:58: warning: unused parameter 'dev'\nobjtool warning in cfg80211_edmg_chandef_valid() with ThinLTO\nRe: [linux-next:master 8858/10077] fs/statfs.c:131:3: warning: 'memcpy' will always overflow; destination buffer has size 64, but size argument is 84\nRe: [PATCH v2 2/2] powerpc/bug: Provide better flexibility to WARN_ON/__WARN_FLAGS() with asm goto\nFedora i686 config minus CONFIG_FORTIFY_SOURCE error in arch/x86/include/asm/checksum_32.h\nRe: [PATCH v4 4/4] powerpc/ptdump: Convert powerpc to GENERIC_PTDUMP\n-Warray-bounds warning with asm goto in impossible switch cases\nRe: [PATCH v5 17/31] target/arm: Enforce alignment for LDM/STM\nRe: [GIT PULL] s390 updates for 5.15 merge window\nTooling improvements Add some distribution configurations\nEnable sanitizer builds\nUpdate llvm_tot anchor and LLVM_TOT_VERSION file\nAdd separate distribution configuration build set\nExplicitly specify LLVM_IAS=0\nDisable CONFIG_ATOMIC64_SELFTEST for Fedora's i686 config\nError out if builds.json is not found\ncheck_logs.py: Increase timeout for CONFIG_KASAN_SW_TAGS builds\nUpdate to Linux 5.14 for PGO and update known good revision\nTest CONFIG_KASAN on s390 with clang-13+\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered. Special thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/august-2021-cbl-work/","summary":"Linux kernel patches [PATCH] dmaengine: idxd: Remove unused status variable in irq_process_work_list(): Not a clang specific warning but it impacts builds where I use -Werror, as kernel builds should be as warning clean as possible.\n[PATCH] ASoC: Intel: boards: Fix CONFIG_SND_SOC_SDW_MOCKUP select: Not a clang specific warning but Kconfig warnings such as this can potentially be build errors later due to incorrect dependency selection so it is important to fix them when they pop up.","title":"August 2021 ClangBuiltLinux Work"},{"content":"Linux kernel patches [PATCH] Hexagon: Export raw I/O routines for modules: Hexagon is a digital signal processor architecture by Qualcomm, which is a little special in terms of the Linux kernel because it is the only architecture that does not have a GCC backend so LLVM has to be used to build it, meaning that it is important to keep it building. This patch fixes an issue with allmodconfig, which enables us to build a wide variety of code and verify the compiler is able to handle all of it.\n[PATCH] arm64: Restrict ARM64_BTI_KERNEL to clang 12.0.0 and newer: There was an issue with LLVM\u0026rsquo;s implementation of ARM\u0026rsquo;s Branch Target Identification, a feature of the ARMv8.5 instruction set, which causes a lot of warnings for clang 11.x. To clear up the build, we just disable this option so that users who need access to it will just upgrade their toolchains.\nANDROID: generate_initcall_order.pl: Use two dash long options for llvm-nm: This was an Android specific issue that impacted our CI due to an upstream LLVM change. The benefit of doing this in Android\u0026rsquo;s kernel/common tree now is that their update to LLVM 13.x+ will be smooth and all Android devices that track it (which is the majority of devices being updated in the wild) will automatically get that change, resulting in one less bug to triage.\n[PATCH 4.9 1/2] iommu/amd: Fix backport of 140456f994195b568ecd7fc2287a34eadffef3ca and [PATCH 4.9 2/2] tipc: Fix backport of b77413446408fdd256599daf00d5be72b5f3e7c6: A series of fixes for the 4.9 series of kernels, which Intel\u0026rsquo;s kernel test robot notified us about. The first one is less likely to happen but I am very surprised nobody reported any issues with the second commit considering the pointer is completely uninitialized. It is important to monitor backports because the kernel moves so rapidly that it is easy to make these kinds of contextual mistakes.\n[PATCH] drm/exynos: Always initialize mapping in exynos_drm_register_dma(): A build warning that is harmless in the vast majority of configurations because the hardware that this driver will actually be running on will have one of the two IOMMU configs enabled but it is important to clean up build warnings so that actual issues can be easily caught.\n[PATCH] hexagon: Clean up timer-regs.h: A build warning that was noticed with ARCH=hexagon allmodconfig, which builds a large amount of the kernel. This target has uncovered two bugs in the Hexagon backend in LLVM so it is important to keep it as warning free as possible so that errors can be easily caught.\n[PATCH] bsg: Fix build error with CONFIG_BLK_DEV_BSG_COMMON=m: This was not a bug as a result of clang in and of itself but it did impact my ability to build OpenSUSE\u0026rsquo;s config for i386, which I am trying to enable in our CI to increase build coverage. This patch was not accepted as struct bsg_class_device was removed in a subsequent patch so this is only a bisect risk.\n[[PATCH] vmlinux.lds.h: Handle clang's module.{c,d}tor sections](https://lore.kernel.org/r/20210730223815.1382706-1-nathan@kernel.org/): A change in LLVM causes .text.asan.module_ctor, .text.asan.module_d tor, and .text.tsan.module_ctor` sections to appear, which have to be explicitly handled in the kernel\u0026rsquo;s linker script to avoid warnings with the linker. As it turns out, not handling them results in panics while running the KASAN KUnit tests, which is usually explained by the fact that the linker can choose to stick the section wherever and if there is a call to it in a section that is too far away, the call goes off into nowhere.\nLLVM patches [test] Fix tools/gold/X86/comdat-nodeduplicate.ll on non-X86 hosts: A simple text fix that I noticed by building LLVM on my Raspberry Pi 4, which has helped catch a few Linux kernel bugs as well. Patch review and input For the next sections, I link directly to my first response in the thread when possible but there are times where the link is to the main post. My responses can be seen inline by going to the bottom of the thread and clicking on my name.\nReviewing patches that are submitted is incredibly important, as it helps ensure good code quality due to catching mistakes before the patches get accepted and it can help get patches accepted faster, as some maintainers will blindly pick up patches that have been reviewed by someone that they trust.\n[PATCH v3 0/2] Kbuild: lto: add make version checking for MODVERSIONS\nRe: [PATCH] clang-tools: Print information when clang-tidy tool is missing\nRe: [PATCH] arm64: drop CROSS_COMPILE for LLVM=1 LLVM_IAS=1\nRe: [PATCH v4] kallsyms: strip LTO suffixes from static functions\n[PATCH v2 0/2] infer CROSS_COMPILE from SRCARCH for LLVM=1 LLVM_IAS=1\nRe: [PATCH] atm: idt77252: clean up trigraph warning on ??) string\nRe: [PATCH] compiler_attributes.h: move __compiletime_{error|warning}\n[PATCH v2 0/3] Fix clang -Wunused-but-set-variable warnings\nRe: [PATCH 2/2] mt76: fix build error implicit enumeration conversion\nRe: [PATCH] nfc: s3fwrn5: fix undefined parameter values in dev_err()\nRe: [PATCH] riscv: explicitly use symbol offsets for VDSO\nIssue triage and reporting The unfortunate thing about working at the intersection of two projects is we will often find bugs that are not strictly related to the project, which require some triage and reporting back to the original author of the breakage so that they can be fixed and not impact our own testing. Some of these bugs fall into that category while others are issues strictly related to this project.\nRe: [PATCH v15 06/12] swiotlb: Use is_swiotlb_force_bounce for swiotlb data bouncing\nBooting a kernel with -smp under KVM hangs when host kernel is compiled with CFI\nllvm-objdump: error: 'vmlinux': not a dynamic object with pseries_defconfig\n\u0026quot;Not a NOP\u0026quot; warning when booting i386_defconfig\n[SystemZ] Support the 'N' code for the odd register in inline-asm.\n-Wimplicit-fallthrough in -next\n-Wimplicit-fallthrough needlessly warning about unreachable code\nmore 32b ARM targets\nRe: how can we test the hexagon port in mainline\narch/arm64/include/asm/archrandom.h giving build errors\nRe: [PATCH v2 09/79] ALSA: als300: Allocate resources with device-managed APIs\nRe: [PATCH v2 14/79] ALSA: cs4281: Allocate resources with device-managed APIs\nRe: [PATCH v2 39/79] ALSA: korg1212: Allocate resources with device-managed APIs\nRe: [PATCH] Input: serio - make write method mandatory\nError linking kernel/futex.o\nInfinite loop in drivers/hwmon/aspeed-pwm-tacho.c on ARCH=riscv allmodconfig\nOrphan section warnings from .text.asan.module_{c,d}tor\nspecified sha does not exist\n[CI-NOTIFY]: TCWG Bisect tcwg_kernel/llvm-release-aarch64-next-allnoconfig - Build # 10 - Successful!\nRe: [powerpc][next-20210727] Boot failure - kernel BUG at arch/powerpc/kernel/interrupt.c:98!\nRe: [patch 6/7] slub: fix unreclaimable slab stat for bulk free\nTooling improvements We maintain a few different repos that help make our lives easier, such as toolchain build scripts, QEMU wrapper scripts, and continuous integration so that we catch and triage issues sooner.\nUpdate powerpc64le builds\nDisable s390 builds for clang 12 and earlier on mainline\nEnable LLVM_IAS=1 for MIPS\nEnable more configurations for ARCH=arm\nAdd some distribution configurations\nAdd ARCH=riscv allmodconfig\nboot-qemu.sh: Add '--no-kvm' option\nUpgrade to 5.13.6, update known good revision, and enable Hexagon\nboot-qemu.sh: Add '--smp' flag\nboot test defconfig+sanitizers (WIP)\nBehind the scenes Every day that there is a new linux-next release, I rebase and build a few different kernel trees then boot and runtime test them on several different machines, including a Raspberry Pi 3 and 4, HP desktop, ASUS laptop, and Hyper-V and VMware platforms on my workstation. This is not always visible because I do not report anything unless there is something broken but it can take up to a few hours each day, depending on the amount of churn and issues uncovered.\nThere are times where I have to test a patch series behind the scenes, which results in a Tested-by: tag in the end but no public mailing list posts. This month, that happened with Will Deacon\u0026rsquo;s series here.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/july-2021-cbl-work/","summary":"Linux kernel patches [PATCH] Hexagon: Export raw I/O routines for modules: Hexagon is a digital signal processor architecture by Qualcomm, which is a little special in terms of the Linux kernel because it is the only architecture that does not have a GCC backend so LLVM has to be used to build it, meaning that it is important to keep it building. This patch fixes an issue with allmodconfig, which enables us to build a wide variety of code and verify the compiler is able to handle all of it.","title":"July 2021 ClangBuiltLinux Work"},{"content":"Linux kernel patches ANDROID: sched: Gate sched_stat tracepoint exports on CONFIG_SCHEDSTATS: One of those instances where a tangential change in the Android trees broke our continuous integration. Our CI tests some 32-bit ARM configurations because certain Android OEMs care about them but these configs are not tested by the actual Android team, meaning we find breakage that they do not.\n[PATCH net-next] net: ks8851: Make ks8851_read_selftest() return void: clang implemented GCC\u0026rsquo;s -Wunused-but-set-variable and this instance was found by Intel\u0026rsquo;s kernel test robot. Rather simple fix but it is important to fix warnings as they crop up so that the build stays as clean as possible so that the real issues are easily visible.\n[PATCH net-next] net: ethernet: rmnet: Restructure if checks to avoid uninitialized warning: Uninitialized variable warnings are always worrisome because using an uninitialized variable results in undefined behavior and could be a security problem if the attacker were able to control or read the contents. In this particular instance, it was just that clang could not understand that the variable was always initialized because of how the code was structure so I rearranged it to make it cleaner to both humans and the compiler.\n[PATCH] btrfs: Remove total_data_size variable in btrfs_batch_insert_items(): btrfs turns on some extra warnings for their code, known in the kernel as W=1 because of the variable that is passed to make. This cleans up one of those instances, which will be visible in a normal build.\n[PATCH] scsi: elx: efct: Do not use id uninitialized in efct_lio_setup_session(): Unlike the uninitialized warning above, this one is legitimate and it shows up in a debug print so it is important to get a proper value.\n[PATCH] scsi: elx: efct: Eliminate unnecessary boolean check in efct_hw_command_cancel(): A fairly uninteresting warning from clang but it can be a bug occasionally so it is important to clean them up.\n[PATCH] scripts/min-tool-version.sh: Raise minimum clang version to 13.0.0 for s390: The s390 folks had their compiler team implement support for even/odd register pair in LLVM, which means that older versions of LLVM are broken in non-obvious ways, so we codify this requirement before the build can even start. This is unfortunate because LLVM 13.0.0 is still in development at this point but using the tip of tree versions of LLVM is not all that scary because of LLVM\u0026rsquo;s aggressive \u0026ldquo;revert to green\u0026rdquo; policy, meaning the tree is intended to be \u0026ldquo;release worthy\u0026rdquo; at any point.\n[PATCH] scsi: lpfc: Reduce scope of uuid in lpfc_queuecommand(): A small build error that I noticed in a few of the configurations that I test. Unfortunately, this was not accepted because it was fixed by just declaring the variable outside of the CONFIG_SCSI_LPFC_DEBUG_FS at the top of the function.\n[PATCH net-next] net/mlx5: Use cpumask_available() in mlx5_eq_create_generic(): Yet another instance of -Wpointer-bool-conversion, which happens in certain configurations. This was solved through a helper function in the early days of ClangBuiltLinux so we use that again here.\n[PATCH] KVM: PPC: Book3S HV: Workaround high stack usage with clang: This warning has been around since the beginning of the year or so, which was starting to become annoying for a few parties, including the kernel test robot. This is now fixed in LLVM 13.0.0 but this workaround still buys us a decent amount of stack space so it is probably worth keeping around for a while.\n[PATCH] mailbox: imx: Avoid using val uninitialized in imx_mu_isr(): Switch statements with default cases that do not do anything sort of defeats the purpose of the default case in my opinion, as clang points out here, so we avoid the warning and make it obvious to the developer that this switch statement will need to be updated.\n[PATCH 1/2] ACPI: bgrt: Fix CFI violation: My girlfriend had a laptop lying around that she was not using anymore so I threw an SSD in it and installed Linux on it for testing. Virtualized testing is nice because it scales really well but it is no replacement for running on real hardware to test various device specific drivers. In this case, I found an issue in an ACPI table driver with Control Flow Integrity, which was rather easy to fix, and now allows the computer to boot with CFI enabled in enforcing mode.\n[PATCH 4.4 to 4.19] Makefile: Move -Wno-unused-but-set-variable out of GCC only block: A stable specific backport of an upstream patch that I sent so that there are not new warnings for downstream users such as Android, which is where I discovered this.\nANDROID: Add CONFIG_LLD_VERSION and UPSTREAM: x86, lto: Pass -stack-alignment only on LLD \u0026lt; 13.0.0: An Android specific backport so that our continuous integration would stay building with tip of tree LLVM. The Android LLVM team picks a particular revision of LLVM then stays on that for a few months, just cherry-picking reverts and features as needed so they will not run into this for a bit but it is better to get ahead of the curve. After all, that is the entire point of this project :)\n[PATCH] ALSA: usb-audio: scarlett2: Fix for loop increment in scarlett2_usb_get_config: This bug was rather fun for me as I learned a bit about C that I did not know. Casting an increment does not do anything because a cast is an rvalue and the increment operator only works on lvalues. I did not do very well in my \u0026ldquo;Principles of Programming Languages\u0026rdquo; class before switching degrees but I do remember that distinction. This patch went through quite a few revisions but it did get picked up eventually.\n[PATCH net-next] net: sparx5: Do not use mac_addr uninitialized in mchp_sparx5_probe(): More and more uninitialized warnings :( unfortunately, GCC does not warn about uninitialized variables in the kernel after commit 78a5255ffb6a (\u0026ldquo;Stop the ad-hoc games with -Wno-maybe-initialized\u0026rdquo;) because GCC does its variable initiailization analysis after inlining, which can be somewhat confusing at different optimization levels. clang\u0026rsquo;s analysis happens much easier, which makes it a little dumber at times, but it also makes it a little more reliable when it comes to stack variables with if and switch statements in my experience.\nLLVM patches [BitCode] Add noprofile to getAttrFromCode(): A latent bug in LLVM was exposed by a prior change that we needed for the kernel, resulting in broken LTO and CFI builds so I fixed it up with a simple patch and test. Patch review and input For the next sections, I link directly to my response when possible but there are times where the link is to the main post and my response can be seen inline.\nRe: [PATCH] MAINTAINERS: Expand and relocate PGO entry\nRe: [PATCH v2 1/1] pgo: Fix allocate_node() v2\nRe: [PATCH v3 1/1] pgo: Fix allocate_node() v2\nRe: [PATCH v3 16/16] objtool,x86: Rewrite retpoline thunk calls\nRe: [PATCH RFC] x86: remove toolchain check for X32 ABI capability\nUpdate to Linux 5.12.9 and add missing packages on Archlinux/Manjaro\nRe: [kbuild-all] Re: kernel/rcu/tree.c:2073:23: warning: stack frame size of 2704 bytes in function 'rcu_gp_kthread'\nRe: [PATCH] platform/x86: dell-wmi-sysman/think-lmi: Make fw_attr_class global static\n[PATCH v2 0/4] iio: Drop use of %hhx and %hx format strings\nRe: [PATCH v3] scsi: ufs: Fix a possible use before initialization case\nRe: [PATCH] x86/Makefile: make -stack-alignment conditional on LLD \u0026lt; 13.0.0\nRe: [PATCH v2 1/1] x86/Makefile: make -stack-alignment conditional on LLD \u0026lt; 13.0.0\nRe: [PATCH 1/1] Makefile: Pass -warn-stack-size only on LLD \u0026lt; 13.0.0\nRe: [PATCH rdma-next v2 00/15] Reorganize sysfs file creation for struct ib_devices\n[PATCH v2 0/3] no_profile fn attr and Kconfig for GCOV+PGO\n[PowerPC] Combine 64-bit bswap(load) without LDBRX\nRe: [PATCH v2] kallsyms: strip LTO suffixes from static functions\nIssue triage and reporting ld.lld: error: drivers/gpu/drm/amd/amdgpu/amdgpu.lto.o: SHT_SYMTAB_SHNDX has 79046 entries, but the symbol table associated has 79048\nRe: [PATCH] riscv: mm: init: Consolidate vars, functions\nRe: drivers/net/ethernet/micrel/ks8851_common.c:995:6: warning: variable 'ret' set but not used\nAssertion `(IK == IK_FpInduction || Step-\u0026gt;getType()-\u0026gt;isIntegerTy()) \u0026amp;\u0026amp; \u0026quot;StepValue is not an integer\u0026quot;' failed\nx86_64 allmodconfig + CONFIG_LTO_CLANG_THIN=y compile time regression\nld.lld segmentation fault for CONFIG_X86_X32 check with binutils master branch\nllvm-objcopy produces corrupted .debug_str for elf32-x86-64 (X32 ABI) emulation (Z_DATA_ERROR)\nRe: [PATCH v5] platform/x86: firmware_attributes_class: Create helper file for handling firmware-attributes class registration events\nRe: [PATCH v1 2/3] scsi: ufs: Optimize host lock on transfer requests send/compl paths\nRe: [PATCH 01/13] objtool: Rewrite hashtable sizing\nRe: [linux-next:master 7012/7430] include/linux/compiler_types.h:328:38: error: call to '__compiletime_assert_183' declared with attribute error: unexpected size in kmalloc_index()\nRe: [PATCH v3 16/16] objtool,x86: Rewrite retpoline thunk calls\nRe: [linux-next:master 9529/10007] mm/hugetlb.c:1591:9: warning: no previous prototype for function 'hugetlb_basepage_index'\nRe: drivers/crypto/talitos.c:3328:12: warning: stack frame size of 1040 bytes in function 'talitos_probe'\nRe: [next] [clang] x86_64-linux-gnu-ld: mm/mremap.o: in function `move_pgt_entry': mremap.c:(.text+0x763): undefined reference to `__compiletime_assert_342'\nRe: [PATCH v9 21/31] elx: efct: Hardware IO and SGL initialization\nRe: [PATCH v2 2/2] mm/zbud: don't export any zbud API\n[InstrProfiling] Make __profd_ unconditionally private for ELF\nRe: [PATCH 2/2] arm64: insn: move AARCH64_INSN_SIZE into \u0026lt;asm/insn.h\u0026gt;\nRe: [PATCH v4 1/2] media: rc: new driver for USB-UIRT device\nRe: arch/powerpc/kvm/book3s_hv_nested.c:264:6: error: stack frame size of 2304 bytes in function 'kvmhv_enter_nested_guest'\nRe: [PATCH v8 4/6] KVM: PPC: Book3S HV: Nested support in H_RPT_INVALIDATE\nLLVM bb1dc876ebb8a2eef38d5183d00c2db1437f1c91 breaks arm64 builds\nRe: how can we test the hexagon port in mainline\nRe: linux-next: build failure after merge of the net-next tree\nHexagon backend crash in drivers/md/persistent-data/dm-bitset.c\nRe: [PATCH v15 06/12] swiotlb: Use is_swiotlb_force_bounce for swiotlb data bouncing\nTooling improvements Deal with most of the current fires\nEnable pseries_defconfig (ppc64) again\nUpdate list of Arch Linux packages\nUpgrade Linux to 5.12.9 and add a PowerPC build fix\nkernel/build.sh: Fix patch application with two PGO kernel runs\nRe-enable Hexagon on -next\nDisable s390 builds for clang 12 and earlier on -next\nUpdate the start time of the -next jobs\nREADME.md: Clarify that latest version of distribution should be used whenever possible\ncheck_logs.py: Do not use number of errors to fail the build\nUse ld.bfd for powerpc64le on -next with LLVM 11\nEnable CONFIG_COMPAT_VDSO for arm64\nRemove CROSS_COMPILE_COMPAT for upstream 5.4\nMove RISC-V back to ld.bfd on 5.10\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/june-2021-cbl-work/","summary":"Linux kernel patches ANDROID: sched: Gate sched_stat tracepoint exports on CONFIG_SCHEDSTATS: One of those instances where a tangential change in the Android trees broke our continuous integration. Our CI tests some 32-bit ARM configurations because certain Android OEMs care about them but these configs are not tested by the actual Android team, meaning we find breakage that they do not.\n[PATCH net-next] net: ks8851: Make ks8851_read_selftest() return void: clang implemented GCC\u0026rsquo;s -Wunused-but-set-variable and this instance was found by Intel\u0026rsquo;s kernel test robot.","title":"June 2021 ClangBuiltLinux Work"},{"content":"This month felt longer than others but I feel like that was because I was a lot more spread out in the work that I was doing. Let\u0026rsquo;s dive in, shall we?\nLinux kernel patches / backports [PATCH] fbmem: Correct position of '__maybe_unused' in proc_fb_seq_ops: A common mistake people make is splitting \u0026ldquo;struct \u0026rdquo; with an attribute, in this case \u0026ldquo;__maybe_unused\u0026rdquo;, which clang warns about while GCC does not. This causes a warning in all of our builds. Unfortunately, this patch did not actually make it into mainline because Linus fixed it himself.\n[PATCH] vmlinux.lds.h: Handle decrypted data section with !SMP: Kees Cook enabled orphan section warnings in 5.10, which means the linker will warn when a section is not handled by a linker script. Intel\u0026rsquo;s 0day bot turned up a randconfig that triggers a warning that will probably never be seen otherwise so I sent a patch to get that cleared up.\nBackport of 1139aeb1c521 for all supported stable branches: This was a series of backports to the stable kernels for a warning about intentional misalignment, which impacted ChromeOS and will impact Android when they upgrade their version of clang.\nUPSTREAM: crypto: arm/curve25519 - Move '.fpu' after '.arch': Our continuous integration tests Android trees since they are one of the biggest downstream consumers of our work (go figure, Google started this\u0026hellip;) and this upstream patch is needed to build ARCH=arm allmodconfig.\n[PATCH] Revert \u0026quot;ASoC: q6dsp: q6afe: remove unneeded dead-store initialization\u0026quot;: Two patches that fixed the same Clang static analyzer warning were merged, which actually ended up introducing use of an uninitialized variable, which Intel\u0026rsquo;s 0day build robot thankfully pointed out to us.\nRevert \u0026quot;UPSTREAM: usb: gadget: f_uac2: validate input parameters\u0026quot;: A mismerge in the Android trees broke our continuous integration so I sent this in to get it working again.\n[PATCH] x86: Fix location of '-plugin-opt=' flags: Someone reported a panic in the AMDGPU driver, which I helped track down to the fact that the stack alignment was not being passed along to the linker for LTO due to a Makefile variable clobber. This patch fixes it up and ensures we do not have something like this happen again. This will eventually be added to LLVM\u0026rsquo;s IR so that this flag is not necessary.\n[PATCH 0/3] hexagon: Fix build error with CONFIG_STACKDEPOT and select CONFIG_ARCH_WANT_LD_ORPHAN_WARN: The Hexagon architecture is special because it is the only architecture in the kernel that cannot be built with GCC; it can only be built with LLVM. Qualcomm got it working upstream in v5.13-rc1 then within a couple of weeks, it was broken again because of some unnoticed bitrot. This patch series fixes it up and helps make sure it should not happen again.\n[PATCH] powerpc/barrier: Avoid collision with clang's __lwsync macro: An upstream LLVM change broke all of our PowerPC builds back to 4.14 due to a builtin macro defintion coliding with an already existing defintion in arch/powerpc. This patch fixes it up by undefining the macro because the kernel does not want the builtin version.\n[PATCH] MAINTAINERS: Add Clang CFI section: This patch solidifies the path for CFI patches to go upstream.\nPatch review and input This month had quite a lot of review and patch testing, maybe more than the previous month. Code review is so critical for the success of these projects so it is important to do it quickly and well due to the velocity of both LLVM and Linux. There When possible, I link directly to my response but sometimes, the link is to the main post and my response can be seen inline.\n[AArch64] Adds a pre-indexed paired Load/Store optimization for LDR-STR.\nRe: CFI violation in drivers/infiniband/core/sysfs.c\nRe: [PATCH v3] arm64: vdso: remove commas between macro name and arguments\nRe: [PATCH 4.19 ONLY v4] arm64: vdso: remove commas between macro name and arguments\nRe: [PATCH v2 dwarves] btf: Remove ftrace filter\nRe: [PATCH kernel v2] powerpc/makefile: Do not redefine $(CPP) for preprocessor\nRe: [PATCH kernel v3] powerpc/makefile: Do not redefine $(CPP) for preprocessor\nRe: [PATCH] HID: i2c-hid: fix format string mismatch\nRe: [PATCH] iio: si1133: fix format string warnings\nRe: [PATCH] mm/shuffle: fix section mismatch warning\nRe: [PATCH] kcsan: fix debugfs initcall return type\nRe: [PATCH] riscv: Use -mno-relax when using lld linker\nRe: [PATCH] [v2] platform/surface: aggregator: avoid clang -Wconstant-conversion warning\nRe: [PATCH] drm/msm/dsi: fix 32-bit clang warning\nRe: [PATCH] arm64: Define only {pud/pmd}_{set/clear}_huge when usefull\nRe: [PATCH v2 3/4] memory: tegra124-emc: Fix compilation warnings on 64bit platforms\n[RESEND PATCH 0/4] iio: Drop use of %hhx and %hx format strings\nRe: [PATCH v2] powerpc/powernv/pci: fix header guard\nRe: [PATCH 00/13] Reorganize sysfs file creation for struct ib_devices\nRe: [PATCH v3] kcov: add __no_sanitize_coverage to fix noinstr for all architectures\nRe: [PATCH 1/6] pgo: modules Expose module sections for clang PGO instumentation.\nRe: [PATCH 2/6] pgo: modules Add definitions in pgo/pgo.h for modules\nRe: [PATCH 3/6] pgo: modules Add module profile data export machinery.\nRe: [PATCH 5/6] pgo: modules Fixup memory leak.\nRe: [PATCH 6/6] pgo: Fixup code style issues.\nRe: [PATCH] pgo: rename the raw profile file to vmlinux.profraw\nRe: [PATCH v9] pgo: add clang's Profile Guided Optimization infrastructure\nIssue triage and reporting As always, a little bit all over the place, LLVM and kernel issues, revisiting old problems, and triaging/reporting new ones :)\nFAIL: Test report for kernel 5.12.0 (mainline.kernel.org-clang, 10a3efd0)\n[InlineCost] Enable the cost benefit analysis on FDO\narm64 defconfig + full LTO failure\npanic in rcu_do_batch for full lto\ns390 all{mod,yes}config __ashlti3 and __lshrti3 after LLVM commit 1886aad9d03b\nllvm-NN-linker-tools Debian package\nRe: [BUG mips llvm] MIPS: malformed R_MIPS_{HI16,LO16} with LLVM\nRe: [PATCH v1 2/2] memory: tegra: Enable compile testing for all drivers\nRe: [broonie-misc:asoc-5.14 5/23] sound/soc/qcom/qdsp6/q6afe.c:1213:18: warning: variable 'port_id' is uninitialized when used here\nRe: arch/powerpc/kernel/optprobes.c:34:1: error: unused function 'is_kprobe_ppc_optinsn_slot'\nSupport CROSS_COMPILE_COMPAT\nRe: -Wconstant-conversion in drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c\nmissing mflr/mtlr (link register save/restore) when using inline asm w/ \u0026quot;lr\u0026quot; clobber\nRe: [next] x86_64 defconfig failed with clang-10\nRe: [PATCH v3] mm, slub: change run-time assertion in kmalloc_index() to compile-time\nRe: [PATCH v5 3/9] mm/mremap: Use pmd/pud_poplulate to update page table entries\nRe: [staging:staging-next 201/268] drivers/staging/rtl8723bs/core/rtw_security.c:89:6: warning: stack frame size of 1120 bytes in function 'rtw_wep_encrypt'\nAssertion `(IK == IK_FpInduction || Step-\u0026gt;getType()-\u0026gt;isIntegerTy()) \u0026amp;\u0026amp; \u0026quot;StepValue is not an integer\u0026quot;' failed\nStack alignment plugin option boot failure with CONFIG_CFI_CLANG\n51d334a845a082338735b0fdfc620a4b15fa26fe breaks x86_64 ThinLTO + dynamic ftrace\nRe: [PATCH v2] fb_defio: Remove custom address_space_operations\n[InstCombine] Fix miscompile on GEP+load to icmp fold (PR45210)\nTooling improvements Way more continuous integration work this time around, namely due to the additional testing with Android\u0026rsquo;s LLVM and regressions or changes upstream.\nDisable boot for ppc32 on mainline\nkernel/build.sh: Update name of source flag and variable\nkernel: Update to Linux 5.12\nAdd problem matcher\nEnable LLVM_IAS=1 for Android arm32 allmodconfig with LLVM 13\nAdd problem matcher\nFix problem matcher\nBuild arm64 with CFI on mainline and next\nEnable LLVM_IAS=1 for Android arm32 allmodconfig with LLVM 13\nWire up builds with AOSP LLVM\nUpdate artifact upload name\nutils.py: Fix crash with LLVM_VERSION=android\nboot-utils: Add support for m68k\nEnable LLVM_IAS=1 for 32-bit ARM on mainline and next with LLVM 13\nFixup the Hexagon jobs and optimize around BOOT=0\nbuild-llvm.py: Update known good revision\nbuild-llvm.py: Fix handling of '--projects'\nkernel/build.sh: Build more ARCH=arm configs\ngenerator.yml: Disable arm64 big endian build with AOSP LLVM\nNotating \u0026quot;failed but unrelated to ClangBuiltLinux\u0026quot; builds\nEnable boot for ppc32 on -next and mainline with LLVM 13\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work. ","permalink":"https://nathanchance.dev/posts/may-2021-cbl-work/","summary":"This month felt longer than others but I feel like that was because I was a lot more spread out in the work that I was doing. Let\u0026rsquo;s dive in, shall we?\nLinux kernel patches / backports [PATCH] fbmem: Correct position of '__maybe_unused' in proc_fb_seq_ops: A common mistake people make is splitting \u0026ldquo;struct \u0026rdquo; with an attribute, in this case \u0026ldquo;__maybe_unused\u0026rdquo;, which clang warns about while GCC does not. This causes a warning in all of our builds.","title":"May 2021 ClangBuiltLinux Work"},{"content":"Another month down! Feels like I just wrote the March 2021 post\u0026hellip; but I suppose that is what happens when your project moves super quickly :)\nLinux kernel patches [PATCH] ACPI / CPPC: Replace cppc_attr with kobj_attribute: I discovered this issue as part of my testing of Sami Tolvanen\u0026rsquo;s Control Flow Integrity series (more on that below). There are probably many more of these lurking because this pattern is hard to spot without runtime testing. As I have time amongst all of the other issues and such, I will be testing the x86 variant of CFI on several different servers, trying to flush out all of the different issues there.\n[PATCH] block: Disable -Walign-mismatch for blk-mq.c: A new warning in clang pointed this out. Unfortunately, the alignment mismatch is expected so I initially sent this patch silencing the warning but it seems like there might be a better solution.\n[PATCH] MIPS: generic: Update node names to avoid unit addresses: The latest version of U-Boot caused all generic MIPS configurations to stop building, which disrupted my local testing. To get back to a working state, I send this patch.\n[PATCH] crypto: arm/curve25519 - Move '.fpu' after '.arch': Debian\u0026rsquo;s clang, which we use for testing in our continuous-integration, includes an out of tree patch that turns off NEON in armv7 by default, causing a build error when trying to build ARCH=arm allmodconfig. Moving the .fpu after .arch fixes the issue because .arch overrides the previous .fpu directive.\n[PATCH] arm64: alternatives: Move length validation in alternative_{insn,endif}: More integrated assembler fixes. This is similar to another fix that went into the tree last year, this should make it so we never see this issue again, hopefully\u0026hellip;\n[PATCH 1/2] x86/events/amd/iommu: Fix sysfs type mismatch and [PATCH 2/2] perf/amd/uncore: Fix sysfs type mismatch: More type mismatches from CFI testing. These should have been found and fixed during commit ebd19fc372e3 but it does not look like anyone has tested CFI on a more recent AMD CPU.\n[PATCH] drm/tegra: Fix shift overflow in tegra_shared_plane_atomic_update: Just a small clang warning patch.\n[PATCH] kbuild: Add $(KBUILD_HOSTLDFLAGS) to 'has_libelf' test: During a regular kernel build, compiling and linking happen in two separate phases, using the variables $(CC) and $(LD), so it is easy to ensure that you are using only the tools that you want. An ultimate goal of ClangBuiltLinux is to be able to build the kernel in an environment free of GCC and binutils and these two variables make it easy to ensure that happens. However, during the host tools building, compiling and linking happens through only the compiler, like a more standard userspace project, and that means that the compiler\u0026rsquo;s default linker is used, unless -fuse-ld= is provided via the command line. If a project is not able to change their default linker but still wants to test in a hermetic environment, -fuse-ld=lld needs to work properly but without this patch, it does not. This came up during testing from Google, where they have a Docker image that only includes the tools needed for a kernel build so if there is a call to a tool that does not exist, the build errors.\n[PATCH] powerpc: Avoid clang uninitialized warning in __get_user_size_allowed: Clang\u0026rsquo;s static analysis pointed out a false positive, which was fixed in one place but not another, causing a build failure in our CI due to -Werror in arch/powerpc.\n[PATCH] Makefile: Move -Wno-unused-but-set-variable out of GCC only block: Clang\u0026rsquo;s implementation of this warning is coming down the pipeline so this disables it like GCC in a default build. Ideally, we want to enable rather than disable warnings but this is a special case because it is also disabled for GCC by default.\n[PATCH] x86: Enable clang LTO for 32-bit as well: LTO was merged in 5.12 for arm64 and x86_64. In my testing, I noticed that 32-bit x86 works fine and there is some interest in this.\nPatch review and input When possible, I link directly to my response but sometimes, the link is to the main post and my response can be seen inline.\nRe: [PATCH v5 00/18] Add support for Clang CFI\noverlay: Exit rcS script so it only runs once\nRe: [PATCH 3/3] kbuild: fix false-positive modpost warning when all symbols are trimmed\n[PATCH 0/2] gcov: re-fix clang-11 support\nRe: [PATCH v4 12/12] exec: Fix overlap of PAGE_ANON and PAGE_TARGET_1\nRe: [PATCH v9] pgo: add clang's Profile Guided Optimization infrastructure\nRe: [PATCH] arm64: vdso32: drop -no-integrated-as flag\nRe: [PATCH v2] arm64: vdso32: drop -no-integrated-as flag\n[Aarch64] handle \u0026quot;o\u0026quot; inline asm memory constraints\nRe: [PATCH] KVM: x86: Fix implicit enum conversion goof in scattered reverse CPUID code\nRe: [PATCH] x86/boot/compressed: enable -Wundef\nRe: [PATCH] stack: replace \u0026quot;o\u0026quot; output with \u0026quot;r\u0026quot; input constraint\nHexagon CI coverage\n[PowerPC] Handle inline assembly clobber of link regsiter\nAssertion MI-\u0026gt;getOperand(0).isReg()\u0026rsquo; failed`\nIssue triage and reporting A lot more issues in upstream LLVM this month and I ran into two regressions with external tools. Thankfully, those were quick to be resolved so testing could get back on track. As with previous months, the link is usually to the main post/issue and my input can be seen throughout.\nqemu-aarch64-static \u0026quot;Illegal instruction\u0026quot; with debootstrap\nCFI violation in drivers/infiniband/core/sysfs.c\nmkimage regression when building ARCH=mips defconfig Linux kernel\ninconsistent ORC unwind table entries in file: vmlinux in /scripts/sorttable vmlinux\n-Wframe-larger-than= in sound/core/control_led.c\nperl spam when running tuxmake without a runtime\nclang-nightly arm toolchain outdated?\nundefined symbol: __compiletime_assert_177 in firmware/stratix10-rsu.o\nppc44x_defconfig has stopped booting on next\n\u0026quot;error: expected assembly-time absolute expression\u0026quot; in arch/arm64/kernel/entry.S\narch/arm64/kvm/perf.c:58:36: error: implicit declaration of function 'perf_num_counters'\nRe: [PATCH 2/3] habanalabs: support legacy and new pll indexes\ns390: Issue around the ALTERNATIVE macro with integrated-as\nerror: couldn't allocate output register for constraint 'x'\n-Wsometimes-uninitialized in arch/powerpc/include/asm/uaccess.h\nRe: [PATCH v7] powerpc/irq: Inline call_do_irq() and call_do_softirq()\n[Passes] Add relative lookup table converter pass\n[DebugInfo] Use variadic debug values to salvage BinOps and GEP instrs with non-const operands\n\u0026quot;Not a NOP\u0026quot; warning when booting i386_defconfig\nGeneralize getInvertibleOperand recurrence handling slightly\nchkobjdump.awk: no default action when using llvm-objdump\nFormatting of llvm-objdump trips up x86 insn_decoder_test\nRe: Very slow clang kernel config ..\n5.12 boot failure when ThinLTO is enabled\n-Wconstant-conversion in drivers/platform/surface/surface_aggregator_registry.c\nTooling improvements A little all over the place this month, no major work now that the continuous integration setup is stable and the other tools are working well.\nbuild-llvm.py: Build compiler-rt builtins\nbuildroot: Check init.d action to avoid double version print out\ndebian/build.sh: qemu-debootstrap -\u0026gt; debootstrap\nMake it green as of 4-26-2021\nboot-qemu.sh: Do not set earlycon for arm32_v6\nEnable LLVM_IAS=1 for arm32 allmodconfig on android-mainline\nBehind the scenes Three things that were more behind the scenes this month:\nClangBuiltLinux did a bug scrub on two days, where we sat down in Google Meet and worked on a shared Google Doc to try and see if we could reproduce old issues. I think we ended up touching somewhere around 100 issues, closing several issues that are no longer relevant. This will allow us to stay focused and work through a clean backlog as we have time in the future. It is the balance of dealing with new issues while finding time to work on the old or getting more people involved with the project ;)\nI did a lot of testing of the Control Flow Integrity series on both arm64 (which I mention above) and x86_64. Unfortunately, the x86_64 testing became moot when the x86 maintainers basically NAK\u0026rsquo;d the series in its current form. I will continue testing in May, hoping to tease out any failures so that those are all resolved by the time the series is ready for a new revision.\nI received a BeagleV board as part of their beta program for the sake of testing clang built kernels on it. I messed around with it a little bit already, I will continue this in May.\nSpecial thanks to: Google and the Linux Foundation for sponsoring my work! ","permalink":"https://nathanchance.dev/posts/april-2021-cbl-work/","summary":"Another month down! Feels like I just wrote the March 2021 post\u0026hellip; but I suppose that is what happens when your project moves super quickly :)\nLinux kernel patches [PATCH] ACPI / CPPC: Replace cppc_attr with kobj_attribute: I discovered this issue as part of my testing of Sami Tolvanen\u0026rsquo;s Control Flow Integrity series (more on that below). There are probably many more of these lurking because this pattern is hard to spot without runtime testing.","title":"April 2021 ClangBuiltLinux Work"},{"content":"Another month, another post about the work that I have done as a kernel/compiler developer! One of the highlights this month is that I got LLVM commit access so I can merge my own patches into LLVM, which I did twice so far.\nLinux kernel patches powerpc/fadump: Mark fadump_calculate_reserve_size as __init: LLVM 13 switched over to the New Pass Manager (NPM), which has impacted some inlining decisions, which in turn exposed some bugs in section annotations. The kernel places certain functions and variables into specific sections that are discarded and freed after init. If a non-init function calls an init function, that is technically a use-after-free so the kernel warns when this happens. In this particular case, identical_pvr_fixup() was not marked as __init and it was not getting inlined so the calls to identify_cpu() and of_get_flat_dt_prop() resulting in the modpost warnings. In practice, this is not an issue because identical_pvr_fixup() is only called from __init context but it is important to get these things right so that real warnings can easily be caught.\npowerpc/prom: Mark identical_pvr_fixup as __init: Same situation as above :)\nMakefile: Remove '--gcc-toolchain' flag and Makefile: Only specify '--prefix=' when building with clang + GNU as: These two patches clean up our clang specific compiler flags. I noticed that we specify --prefix= with a full path after commit ca9b31f6bb9c (\u0026ldquo;Makefile: Fix GCC_TOOLCHAIN_DIR prefix for Clang cross compilation\u0026rdquo;), meaning that --gcc-toolchain= is unnecessary because the kernel uses nothing within the sysroot usually provided by GCC. As a follow up, specifying --prefix= is only necessary when we are using the GNU assembler.\nARM: Make UNWINDER_ARM depend on ld.bfd or ld.lld 11.0.0+: A workaround for a bug in all LLD versions prior to 11.0.0. The kernel\u0026rsquo;s minimum supported version of LLVM is 10.0.1, meaning that if something is broken with LLVM 10.0.1+, it must be fixed or worked around. KernelCI has run into this as their testing plan is now the minimum supported version of LLVM and the latest stable version.\nriscv: Fix CONFIG_FUNCTION_TRACER with clang: This series fixes build errors on RISC-V when CONFIG_FUNCTION_TRACER is set. This was a rather fun series to develop but at the same time, incredibly frustrating because of how it evolved. Unfortunately, it requires a kind of ugly workaround due to an LLVM bug (more on that below). I am hoping that it will be picked up before Linux 5.12 is released but it is not like it cannot be backported to stable.\nriscv: Use $(LD) instead of $(CC) to link vDSO: In traditional projects, the linker is never directly invoked; instead, the compiler is called and it calls the linker implicitly. For the kernel, it is the other way around: the compiler is only used to build .o files and the linker is directly invoked on them, except in certain vDSO Makefiles. We have been working on getting rid of this and making the behavior consistent over the kernel so that ld.lld can be used in more places, as clang by default defauls to calling ld.bfd.\nFix cross compiling x86 with clang: Back in December, someone reported that x86 was not cross compilable due to a lack of the --target= flag. This is not a very common task as x86 is the dominant architecture but arm64 is starting to become more common, especially with Apple\u0026rsquo;s M1 chip. This series adds the --target= flag to specific subdirectories that have hand rolled KBUILD_CFLAGS (which is an antipattern that should really be avoided but simple fix for now).\nLLVM patches I contributed a few small patches to LLVM this month:\ndebuginfo-tests: Fix check-gdb-mlir-support build after MLIR API change in a4bb667d831c: A MILR API change that was not reflected back in the MILR debuginfo-tests.\n[RISCV] Fix mcount name: This is the LLVM side of the RISC-V function tracing series above. Somehow, LLVM used a different name for the mcount symbol than GCC did, which needed to be fixed. Thankfully, LLVM already had the plumbing inside of it for this, I just had to hook into it for RISC-V and add some tests.\nlibc: Default LIBC_INSTALL_PREFIX to ${CMAKE_INSTALL_PREFIX}: While working on the full toolchain tc-build series below, I ran into this issue while running ninja install.\nPatch review and input I feel like I gave more input/review this month than I have before, which is never a bad thing :) Being a quick reviewer for others incentivizes them to give you a quick review in return. For some of the links below, I linked the top message/patch; my full input can be seen at the bottom by clicking on my name.\n[PATCH] Fix ld-version.sh script if LLD was built with LLD_VENDOR\n[PATCH 1/4] kbuild: remove LLVM=1 test from HAS_LTO_CLANG\n[PATCH] MIPS: Add comment about CONFIG_MIPS32_O32 in loongson3_defconfig when build with Clang and Re: [PATCH v2] MIPS: Make MIPS32_O32 depends on !CC_IS_CLANG\nRe: [PATCH] KVM: arm64: Don't use cbz/adr with external symbols\nRe: [PATCH] kbuild: dummy-tools: adjust to scripts/cc-version.sh\n[PATCH] gcov: fix clang-11+ support\nRe: [PATCH] kbuild: fix ld-version.sh to not be affected by locale\nThumb2 ias\nGcov\nspin down LTO builds of Sami's LTO tree\nAdd Android ARCH=arm LLVM_IAS=1 5.4+ coverage\nArm android cleanup\ndebian: build.sh: add missing quotes to MODULES_FOLDER\nfix -g\nIssue triage and reporting Healthy dose of LLVM regressions and Linux kernel build failures due to new functionality.\n[mlir] Simplify various pieces of code now that Identifier has access to the Context/Dialect\n[mlir][IR] Refactor the internal implementation of Value\n[AST] Add generator for source location introspection\n[RISCV] Add basic cost modelling for fixed vector gather/scatter.\n(continuous-integration2) incomplete logs?\nBuild failures with LLVM 13.0.0-++20210330111113+6d2fb3cefba6-1~exp1~20210330091825.3874\nclang-12: error: unsupported option '-fpatchable-function-entry=8' for target 'riscv64-unknown-linux-gnu'\nIssue around hyp_panic while building aarch64 allmodconfig with ThinLTO\nFaild to build qcacld-3.0 on msm-5.4 kernel\n-Walign-mismatch in include/linux/efi.h\na0e2bf7cb7006b5a58ee81f4da4fe575875f2781 in -next breaks compiling with CFI\nmcount problem on RISC-V\nld.lld: error in arch/arm64/kernel/vmlinux.lds\nRe: [PATCH 3/4] certs: Add ability to preload revocation certs\n-Walign-mismatch in block/blk-mq.c\nRe: [PATCH 2/2] zonefs: Fix O_APPEND async write handling\nRe: Clang: powerpc: kvm/book3s_hv_nested.c:264:6: error: stack frame size of 2480 bytes in function 'kvmhv_enter_nested_guest'\nRe: [PATCH v8 09/13] phy: tegra: xusb: Add wake/sleepwalk for Tegra210\n8ec7ea3ddce7379e13e8dfb4a5260a6d2004aa1c causes more stack usage on PowerPC\nTooling patches I focused on streamlining our boot utilities, increasing the build coverage, and improving the toolchain build scripts.\nbuildroot: Speed up build times\nboot-qemu.sh: Add support for earlycon\nEnable LTO testing on mainline and -next\nDrop CONFIG_UBSAN_UNSIGNED_OVERFLOW from all*configs\ngithub: Add check-clang.sh workflow\ngenerate_workflow.py: Drop usedForSecurity in hashlib call\nChange MIPS base config\nutils.py: Fix get_cbl_name() for mipsel\nMove Android back to ThinLTO for now\nAdd support for arm64 trees\nTest allmodconfig with LTO and defconfig with full LTO\nEnable i386 builds on older trees\nDisable pseries_defconfig on LLVM 12\nboot-utils: Update\nCompletely spin down LTO builds on Sami's tree\nSupport for Clear Linux\nUpdate to Linux 5.11.3 and bump the known good revision\nSimplify the flags in build-binutils.py\nbuild-binutils.py: Remove '--with-sysroot' configuration flag\nMake script more friendly to being used system-wide/LLVM development and add more kernel PGO options\nConclusion When dealing with various issues all at once, it is hard to see any progress being made so doing these status reports is a great way to help keep myself grounded and realize that progress is indeed being made. There are some cool things in development such as Sami Tolvanen\u0026rsquo;s Control Flow Integrity series, which is high priority for testing on arm64. Stay tuned for more on that!\n","permalink":"https://nathanchance.dev/posts/march-2021-cbl-work/","summary":"Another month, another post about the work that I have done as a kernel/compiler developer! One of the highlights this month is that I got LLVM commit access so I can merge my own patches into LLVM, which I did twice so far.\nLinux kernel patches powerpc/fadump: Mark fadump_calculate_reserve_size as __init: LLVM 13 switched over to the New Pass Manager (NPM), which has impacted some inlining decisions, which in turn exposed some bugs in section annotations.","title":"March 2021 ClangBuiltLinux Work"},{"content":"As some of you may or may not know by now, I am now employed by the Linux Foundation to help improve Linux security. The primary way that I am doing that is through the work I do for ClangBuiltLinux, of which I am an official maintainer.\nLinux kernel patches First and foremost, I am a Linux kernel developer, meaning that I love sending kernel patches. Getting familiar with git send-email and the standard Linux kernel workflow can be difficult but now that I am used to it, I find other things cumbersome.\nSome of the patches that I sent in February are as follows:\narm64: Make CPU_BIG_ENDIAN depend on ld.bfd or ld.lld 13.0.0+: I did not do a whole ton of heavy lifting on this, it is mostly thanks to Fangrui Song that this is possible. Getting proper big endian support for AArch64 is not the biggest deal because it is not super common except in networking but more support is more support. One less configuration option that has to be toggled :)\nqemu_fw_cfg: Make fw_cfg_rev_attr a proper kobj_attribute: This one is particularly nasty. Indirect function calls through function pointers can be a major security threat in C, where they can be used in ROP chains. Clang\u0026rsquo;s Control Flow Integrity is a way to guard this, where indirect function calls have their parameters checked to attempt to make sure that the function call has not been hijacked. This support is currently out of tree but patches like this are critical for getting it pushed upstream. This patch fixes a CFI failure in the qemu_fw_cfg driver, where attempting to read the firmware revision will cause the kernel to panic when it is read.\nMakefile: Remove # characters from compiler string: A report came in that AMD\u0026rsquo;s Optimzing C/C++ Compiler (AOCC, based on LLVM/Clang) could not build the kernel as it would error out due to the # symbol in the version string (which starts a comment in Make and is required to be escaped). Kconfig does not support escaping # yet so the easiest fix is to just remove that symbol if it is present. AOCC may come in handy later if it has certain optimizations that the kernel can take advantage of\ndrm/i915: Enable -Wuninitialized: -Wuninitialized has become a very important warning over the past year of so because GCC\u0026rsquo;s version (-Wmaybe-uninitialized) was disabled by Linus in 5.7. i915 maintains a separate set of CFLAGS from the rest of the kernel and this was disabled before -Wuninitialized became smarter in newer LLVM versions so this commit re-enables it. I had this patch locally for a while with another workaround but Arnd Bergmann pointed out that other workaround is no longer necessary so this can be enabled for everyone!\ndrm/amd/pm/swsmu: Avoid using structure_size uninitialized in smu_cmn_init_soft_gpu_metrics: Speaking of -Wuninitialized\u0026hellip; here is an instance where it proves useful. Using uninitialized stack memory is never a good idea and can even be a security issue depending on the context. Linux himself pointed this out and accurately explaining that while the default: case never happens, it still should not do this.\nPatch review and input In open source development, patch review is a currency to barter with. In order to have your own patches reviewed quickly, it is in your best interest to review patches quickly yourself. Below are some of the patches that I provided review on, which helps ensure the kernel\u0026rsquo;s quality. Some of these reviews span multiple messages, which can be viewed at the bottom of the page.\next4: Enable code path when DX_DEBUG is set\nscripts: switch some more scripts explicitly to Python 3\nkbuild: fix duplicated flags in DEBUG_CFLAGS\nmm/mremap: fix BUILD_BUG_ON() error in get_extent\ncrypto: octeontx2 - fix -Wpointer-bool-conversion warning\nx86/efi: Remove EFI PGD build time checks\nclang_tools:gen_compile_commands: Change the default source directory\ngen_compile_commands: prune some directories\nkbuild: remove ld-version macro\nkbuild: check the minimum linker version in Kconfig\nvmlinux.lds.h: catch more UBSAN symbols into .data\nARM: Implement Clang's SLS mitigation (v1)\nARM: Implement Clang's SLS mitigation (v3)\nARM: kprobes: rewrite test-arm.c in UAL\nx86: remove toolchain check for X32 ABI capability\nlinux/compiler-clang.h: define HAVE_BUILTIN_BSWAP*\nMakefile: reuse CC_VERSION_TEXT\nfirmware_loader: Align .builtin_fw to 8\niwlwifi: mvm: add terminate entry for dmi_system_id tables\nIssue triage and reporting As a maintainer, it is important to address issues that are reported to you as well as report issues to other people when you do not have the expertise to deal with them yourself. ClangBuiltLinux is at the intersection of three major projects: the Linux kernel, the LLVM compiler collection, and QEMU (as we use it for boot testing the kernels we build in our CI). We work with a few major continuous integration systems such as KernelCI, Continuous Kernel Integration (CKI), and the Oday team from Intel, which results in reports that need to be looked at.\nI will not go into too many details but here are some of the issues that I responded to or reported during February.\nclang-12: error: unsupported option '--64\n-Wframe-larger-than in= in arch/powerpc/kvm/book3s_hv_nested.c\n__field_overflow in drivers/net/ipa/ipa_main.c with clang-10\nAssertion in mm/memcontrol.c when building x86_64 allyesconfig with -O3\nFAILED unresolved symbol vfs_truncate (corresponding LKML thread)\nFAIL: Test report for kernel 5.11.0-rc7 (mainline.kernel.org-clang)\ninvalid syntax in conditional- Kernel 5.10.14 on OpenSUSE 15.2 with AOCC\ndrm/amd/display: Add Freesync HDMI support to DM\ngcc invoked even with passing CC=clang to make\nx86 ThinLTO: BUG: unable to handle page fault\nFAIL: Test report for kernel 5.11.0 (mainline.kernel.org-clang)\nPANICKED: Test report for kernel 5.11.0-rc6 (mainline.kernel.org-clang)\nAssertion 'ContinueAfterFailure \u0026amp;\u0026amp; \u0026quot;Shouldn't have kept evaluating on failure.\u0026quot;' failed.\nTooling patches ClangBuiltLinux has a few different repos that we maintain to ease our workload. The first of which is the boot-utils repo, which houses a few scripts to make booting the Linux kernels that we build in QEMU easier. QEMU is a rather unwieldy program, as it has a LOT of flags and it is not immediately obvious which ones should and should not be used for testing. We use this locally on our workstations as well as in our continuous integration (more on that in a second). This month I contributed:\nboot-utils: Add RISC-V to use '--use-cbl-qemu'\nUpdate to latest stable buildroot and add arm64 big endian\nboot-utils: Add support for booting Debian images\nboot-utils: Only allow '--use-cbl-qemu' with s390\nTo help us easily track regressions in the kernel, we have started relying very heavily on TuxSuite and GitHub Actions for our continuous integration. This month I spent a lot of time trying to get us more coverage of various trees and configurations that have proved problematic in the past. In its current state, ClangBuiltLinux is in the \u0026ldquo;turning on the lights\u0026rdquo; phase (starting up), this is a major step in the \u0026ldquo;keeping them running\u0026rdquo; phase (stabilizing), and once that is stable, we can focus on adding features and polish as people request them (new development).\nRe-enable boot on 4.14 for x86_64\nAdd support for testing CONFIG_THUMB2_KERNEL\nci2: Rework YAML generation\nEnable booting MIPS and PowerPC kernels ci2: Regenerate android-4.14 TuxSuite and workflow file\nci2: Add all*config builds\nAdd \u0026quot;all\u0026quot; target to generate.sh\nEnable some more -next builds\nllvm_tot is now 13\nDisable pseries_defconfig on LLVM 13\nAdd support for LLVM 12\nEnable more some more configs on 5.10 and next\nDisable certain PowerPC builds with LLVM 11\nAdd Sami's LTO/CFI tree\nAdd support for arm64 big endian\nEnable ld.lld for mips big endian\nAdd support for testing -tip\nMove back to Ubuntu's qemu-system-riscv64\nDisable x86_64 all{mod,yes}config for clang-10 on mainline\nEnable LTO testing on mainline and -next\nI maintain a set of Python build scripts for LLVM and binutils so that people can easily test with the latest versions of these tools in a contained environment (by default, the script does not touch anything outside of the repository). A small set of updates to these this month for improved testing and verification:\nLinux 5.10.14 and binutils 2.36.1\nci.sh: Use release/12.x for build testing/\nLastly, we have had to ship a couple of QEMU binaries to get access to features that we need for testing or to work around issues with distribution versions of QEMU. The work in this area this month was concerned with the latter. Ubuntu shipped a broken qemu-system-riscv64 binary, which I actually fixed upstream in the 5.0.1 stable series, but Ubuntu misses that fix in a set of security backports to 4.2. I shipped a fixed binary in this repo for our CI, reported the issue to Ubuntu upstream, then reverted it in our repo when it was available.\nAdd qemu-system-riscv64\nqemu-binaries: Remove copy of qemu-system-riscv64\nConclusion I hope this has been interesting to follow along with. I am very excited that I get paid to do this full time now. Going foward, I am going to try streaming on Twitch once a week to try and get people involved with Linux kernel development, so that they can see that it is a rewarding path and that it is possible to succeed in it. If you have any questions, feel free to reach out to me using any of the information on my home page!\n","permalink":"https://nathanchance.dev/posts/february-2021-cbl-work/","summary":"As some of you may or may not know by now, I am now employed by the Linux Foundation to help improve Linux security. The primary way that I am doing that is through the work I do for ClangBuiltLinux, of which I am an official maintainer.\nLinux kernel patches First and foremost, I am a Linux kernel developer, meaning that I love sending kernel patches. Getting familiar with git send-email and the standard Linux kernel workflow can be difficult but now that I am used to it, I find other things cumbersome.","title":"February 2021 ClangBuiltLinux Work"},{"content":"Before Google+ shut down, I had a post on there giving a brief overview of git bisect, which a lot of people found useful. Unfortunately, I forgot to save it and move it somewhere else before the shutdown deadline. As a result, I am going to redo it here and spice it up a bit.\nOne caveat before I start: there is great official documentation for git bisect, from which I have taken quite a bit of information. If I say something that contradicts what the documentation says, assume the documentation is right.\nWhat is git bisect? git bisect allows you to find out specifically which change or commit caused a particular issue. This can be a build error/warning, test failure, or a runtime issue. It does this by taking a good commit and a bad commit then running a binary search on it using your input through git bisect good or git bisect bad. I will give an overview of how exactly to do this in the next section.\nThis tool is incredibly powerful because it massively cuts down the time that it takes to hunt down exactly where something went wrong. There are times where you might pull in two hundred commits and run into a weird error in a file that was not touched by any of those commits. Without git bisect, testing all two hundred changes individually would take a long time. Additionally, it saves you from manually binary searching yourself. I did this once when I was a git noob and it was not fun.\nHow to do a bisect Find a good commit.\ngit bisect only works when there was a point where the issue did not happen. If the issue has happened since the beginning of the project then it is not a regression and the problem will have to be isolated and solved via other means.\nStart the bisect.\nYou start a bisect by running git bisect start \u0026lt;bad_commit\u0026gt; \u0026lt;good_commit\u0026gt;. If your current HEAD is the bad commit, you can just put HEAD for \u0026lt;bad_commit\u0026gt;. These can be branches, tags, or raw commit hashes. For example, if I was bisecting a bug in the Linux kernel that happened between 5.5 and 5.6, I would run git bisect start v5.6 v5.5..\nRun the test case.\nThis can be anything that you need to do to verify the issue. For example, if you are bisecting a bug in a compiler like clang or GCC, you might build the compiler from the current source then take that freshly built compiler and run it to see if it produces the bug. If you are bisecting a kernel not booting, build the kernel and try to boot it.\nA word of caution: Make sure that your test case is as objective and reliable as possible. The result of git bisect is only as accurate at the results of the test case. I was tracking down some boot flakiness in the Linux kernel a couple of weeks ago and there were times where the same kernel would boot one time and not boot another time. To make sure of the result when bisecting, I did a boot ten times over and only considered it passing when it booted all ten times.\nRun git bisect good or git bisect bad based on that result\nThis is pretty self explanatory. If the current source reproduces the bug, run git bisect bad. If it does not, run git bisect good.\nRepeat steps 3 and 4 until git produces a bad commit.\ngit bisect will tell you how many more runs it approximately has to do before it can find a bad commit so you are not left in the dark. When git bisect has converged on the commit, it will print out the commit hash and its message.\nConfirm result.\nOnce git bisect is done, you are left either on the bad commit or the commit right before, depending on how git bisect converged. At this point, I recommend saving the output of git bisect log to a file like so:\n$ git bisect log \u0026gt; bisect.log It can be handy for reproducing the result later or allowing someone else to confirm the results.\nAfter this, I usually will try to see if I can revert the problematic commit on the current version of the software to confirm that it was the source of the issue. To get back to that point, run git bisect reset, git checkout to the current version of the software, and attempt to git revert the commit. Sometimes this is not always easy, especially if there have been further changes around that area. Use your best judgement when deciding to report the issue.\nSome tips and notes around bisecting git bisect has its quirks but it does also have some kind of hidden things. I am going to call out all of the ones that I can think of below.\ngit bisect converged on a merge commit There are times where git bisect will claim the first bad commit is a merge commit. This can be for a couple of reasons:\nTwo trees are independently fine but break when put together\nThis might seem somewhat obvious but there are times where series of commits are developed completely independently and work fine by themselves; an issue only occurs when they are merged together. This can happen a lot in projects that have subsystems (independently maintained folders/code in one repository).\nFor example, in the Linux kernel, maintainers typically will base their trees on the previous -rc1 (so changes targeting 5.8 will be based on 5.7-rc1). If a change in the tree of maintainer A changes an interface that is used by a new driver in the tree of maintainer B, a bisect would converge on the merge of whatever tree was merged second because each tree is fine by themselves.\nThis is why integration trees (such as linux-next) exist: to try and tease these out so that they can be fixed during the merge instead of afterwards. I reported an issue that occurs from a scenario such as the one described above before the Linux kernel\u0026rsquo;s merge window (where all maintainer trees get merged into the main one) but neither maintainer noticed it so the issue had to be fixed up after the fact.\nGetting around this usually involves cherry-picking the changes from one branch on top of the other and then running a bisect on that so that the problematic commit can be converged on easier (if it is not immediately obvious).\nA conflict resolution caused the issue\nSimilar to the previous note, there are times where doing a merge results in a conflict, which again happens when two trees are developed independently of each other. A quick grep on the logs of the Linux kernel brings up an example of where this happened, commit 4a601f109614 (\u0026ldquo;net: mscc: ocelot: adjust maxlen on NPI port, not CPU\u0026rdquo;).\nThis is why I try to leave what the conflicts were in my commit messages; it makes it easier for others to audit my choices.\nIf you suspect this is the source of a problem, you can redo the merge and see what the conflicts were. For example, we\u0026rsquo;ll use the merge commit above:\n$ git show -s --format=short 1d343579312311aa9875b34d5a921f5e2ec69f0a commit 1d343579312311aa9875b34d5a921f5e2ec69f0a Merge: a8eceea84a3a 0d81a3f29c0a Author: David S. Miller \u0026lt;davem@davemloft.net\u0026gt; Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net $ git checkout 0d81a3f29c0a ... HEAD is now at 0d81a3f29c0a Merge tag \u0026#39;drm-fixes-2020-03-13\u0026#39; of git://anongit.freedesktop.org/drm/drm $ git merge a8eceea84a3a ... CONFLICT (content): Merge conflict in drivers/net/ethernet/mscc/ocelot.c ... I will not go into the details but looking at the conflicts and comparing how they were resolved in the actual commit can help narrow down where the bug is coming from (again, if it is not immediately obvious).\nWhat to do if you chose wrong when bisecting When I bisect, I will often use the arrow key to scroll back to find my last git bisect ... command and hit enter. The problem is I might chose the wrong one (git bisect good when I meant to chose git bisect bad or vice versa). Unfortunately, that will result in my bisect not converging properly. To fix this, I will have to start my bisect all over, right?\nThankfully, you can use git bisect log + git bisect replay to get back to the state before that choice.\nRun git bisect log \u0026gt; bisect.log.\nThis dumps the log of the current bisect, which we will edit to remove that last choice.\nOpen bisect.log and remove everything after the wrong choice.\nFor example, this is the bisect log from one of my recent bisects:\n$ cat bisect.log # bad: [0cc124c186a5211ae5a734fe7708d61b5a150bc2] [llvm-objdump][test] Improve PowerPC branch offset tests # good: [5852475e2c049ce29dcb1f0da3ac33035f8c9156] Bump the trunk major version to 11 git bisect start \u0026#39;origin/master\u0026#39; \u0026#39;llvmorg-11-init\u0026#39; # good: [60fea2713d3f37d70383aacaa75f61344cc3234a] AMDGPU/GlobalISel: Improve 16-bit bswap git bisect good 60fea2713d3f37d70383aacaa75f61344cc3234a # good: [31e03317633909c50ead53edf8a19b60698075cc] [ORC] Skip ST_File symbols in MaterializationUnit interfaces / resolution. git bisect good 31e03317633909c50ead53edf8a19b60698075cc # bad: [263c4a3c75a46996bec1f23264874b7f1334426a] Fix compiler warning when compiling without asserts git bisect bad 263c4a3c75a46996bec1f23264874b7f1334426a # good: [b28ed9cec8dd7225164eb8c0884aa463654ef3fc] [clang-format] cleanup from D75517 git bisect good b28ed9cec8dd7225164eb8c0884aa463654ef3fc # good: [a46dba24fa35ab52e9a1bbaa52666bcc37859927] [AMDGPU] Extend macro fusion for ADDC and SUBB to SUBBREV git bisect good a46dba24fa35ab52e9a1bbaa52666bcc37859927 # bad: [df90a15b1ac938559a8c3af12126559c1e1e9558] [lldb] Clear all settings during a test\u0026#39;s setUp git bisect bad df90a15b1ac938559a8c3af12126559c1e1e9558 # good: [ab69cd0779c529519eb7d26e0fa1b8dfb505f838] [X86] Support intrinsic _mm_cldemote git bisect good ab69cd0779c529519eb7d26e0fa1b8dfb505f838 # bad: [4327a9b46b46d587816f765c619838ea3e01cd19] [AMDGPU] Use progbits type for .AMDGPU.disasm section git bisect bad 4327a9b46b46d587816f765c619838ea3e01cd19 # bad: [c4d23d8854840294bf49c524f93e2be85a401f00] Add a missing include to clang unit tests git bisect bad c4d23d8854840294bf49c524f93e2be85a401f00 # good: [c700e0317c25f3f397a8ba368752c4960f4ab975] [JITLink] Read symbol linkage from the correct field. git bisect good c700e0317c25f3f397a8ba368752c4960f4ab975 # bad: [b47c9f535c8a0fffeb7634a82e3901d416915938] [libc] Add initial assert definition git bisect bad b47c9f535c8a0fffeb7634a82e3901d416915938 # bad: [6aebf0ee56e52afad3887b4230d7ed1beaf0bede] Specify branch probabilities for callbr dests git bisect bad 6aebf0ee56e52afad3887b4230d7ed1beaf0bede # good: [c4cbc5806218bf4232523771805580fa40b83244] [NFC][PowerPC] Add a new MIR file te test ppc-early-ret pass git bisect good c4cbc5806218bf4232523771805580fa40b83244 # first bad commit: [6aebf0ee56e52afad3887b4230d7ed1beaf0bede] Specify branch probabilities for callbr dests Let\u0026rsquo;s say that I meant to mark a46dba24fa35ab52e9a1bbaa52666bcc37859927 as bad instead of good. I would edit bisect.log to look like this:\n$ cat bisect.log # bad: [0cc124c186a5211ae5a734fe7708d61b5a150bc2] [llvm-objdump][test] Improve PowerPC branch offset tests # good: [5852475e2c049ce29dcb1f0da3ac33035f8c9156] Bump the trunk major version to 11 git bisect start \u0026#39;origin/master\u0026#39; \u0026#39;llvmorg-11-init\u0026#39; # good: [60fea2713d3f37d70383aacaa75f61344cc3234a] AMDGPU/GlobalISel: Improve 16-bit bswap git bisect good 60fea2713d3f37d70383aacaa75f61344cc3234a # good: [31e03317633909c50ead53edf8a19b60698075cc] [ORC] Skip ST_File symbols in MaterializationUnit interfaces / resolution. git bisect good 31e03317633909c50ead53edf8a19b60698075cc # bad: [263c4a3c75a46996bec1f23264874b7f1334426a] Fix compiler warning when compiling without asserts git bisect bad 263c4a3c75a46996bec1f23264874b7f1334426a # good: [b28ed9cec8dd7225164eb8c0884aa463654ef3fc] [clang-format] cleanup from D75517 git bisect good b28ed9cec8dd7225164eb8c0884aa463654ef3fc # bad: [a46dba24fa35ab52e9a1bbaa52666bcc37859927] [AMDGPU] Extend macro fusion for ADDC and SUBB to SUBBREV git bisect bad a46dba24fa35ab52e9a1bbaa52666bcc37859927 Basically, you need to remove everything after the incorrect choice and you need to change the line where you made the wrong choice to make the right one. I also edited the comment (lines that start with # are not run as commands) but that is not necessary.\nSave that file once you have properly edited it.\nRestart the bisect using the file.\nTo do this, you will run the following commands:\n$ git bisect reset $ git bisect replay bisect.log The git bisect reset gets us back to where we were when we ran git bisect start and the git bisect replay uses the bisect.log file to get us back to where we should have been been. Continue bisecting from there!\nAutomating bisects If there is anything that you need to know about me, it is that I LOVE automation. If I am going to run a command more than twice, I usually automate it. I could not live without my scripts. As a result, I love using git bisect run.\ngit bisect run takes a shell script and uses it to automate running git bisect good or git bisect bad. This helps avoid issues like in the previous section, where choosing wrong means that you go down the wrong path and end up at the wrong problematic commit.\nI am not going to go into a huge amount of detail about writing shell scripts as I assume if you care about something like this, you understand how to do that.\nTo do an automated bisect, you start the same way (git bisect start \u0026lt;bad_ref\u0026gt; \u0026lt;good_ref\u0026gt;) but instead of running the test case and choosing git bisect good/git bisect bad, you run git bisect run \u0026lt;path_to_script\u0026gt;.\nWhen writing the script, you should make sure that the exit code is 0 if git bisect good should be run and exits with an error code between 1 and 127 if git bisect bad should be run.\nIf the source code is untestable (cannot be built or there was some other breakage independent of the issue being tracked down), the script should exit with 125 so that git bisect skip is run. I will go over that command in the next section.\nYou can see an example of a git bisect run script that I made here. There are a couple in the git bisect documentation as well.\nTo get accurate bisect results, you need to make sure that the script handles all possible outcomes and accurately tests for the problem. This varies widely by projects so I cannot give more specific advice than that.\nDealing with independent breakage There are times when you are bisecting that the revision cannot be tested because of a problem unrelated to the one that you are bisecting. For example, when bisecting an compiler bug, the compiler cannot be tested if it cannot be built. There are two ways to handle this situation:\ngit bisect skip\ngit bisect skip tells git that the revision it has chosen cannot be tested; in other words, it is neither good nor bad due to reasons outside of your control. git will try to find another commit around it to test. The caveat with this option is that if the commit you skipped is right next to the problematic one, git will not be able to tell you which one was the bad one (but that is usually easy enough to deduce).\nApply a fix on top of the tested revision\nI will often do this if there was a fix for the issue later in the history. For example, there was a change in clang 11 that broke building scripts/dtc within the Linux kernel. That was fixed by this commit but any revision in the Linux kernel that does not have that as an ancestor will fail to build, which can make bisecting difficult.\nWhat I will do in this case is temporarily apply that fix on top of whatever revision git is currently testing. I can do this automatically so that git bisect run can handle it.\n$ grep -q \u0026#34;YYLTYPE yylloc\u0026#34; scripts/dtc/dtc-lexer.l \u0026amp;\u0026amp; \\ git format-patch -1 --stdout e33a814e772cdc36436c8c188d8c42d019fda639 | \\ git apply -3v This basically says if the line that was removed by the commit is present in the tree, apply (but do not commit) the change to the index.\nAfter I test this revision, it is important to get rid of that modification before running git bisect \u0026lt;good|bad\u0026gt;, otherwise there will be an error.\n$ git reset --hard $ git bisect good The git bisect documentation that I linked above has an example of doing this with git bisect run.\nFinding the commit that fixed something Sometimes, it might be necessary to see what commit fixed something versus broke something. Unintentional fixes can be just as bad as unintentional breakages. The process is basically the same as the one described in the beginning but involves setting terms that are a little easier to work with.\n$ git bisect start --term-old broken --term-new fixed $ git bisect fixed \u0026lt;fixed_rev\u0026gt; $ git bisect broken \u0026lt;broken_rev\u0026gt; After that, the process is the exact same but git bisect \u0026lt;fixed|broken\u0026gt; is used instead of git bisect \u0026lt;good|bad\u0026gt;.\nReal time example I recently came across a bug in LLVM exposed by building the RISC-V Linux kernel\u0026rsquo;s allyesconfig target. I determined that it was working at the flang merge but it was broken at top of tree (at the time).\nTo bisect this, I used tc-build, an LLVM build script that builds a toolchain able to build the Linux kernel. If you run into an issue with LLVM and the Linux kernel, it can be very helpful (and I am more than willing to give a more in-depth tutorial around this if needed).\nThe basic principle is we build a toolchain and then use that toolchain to build the translation unit that crashes in the kernel and see what happens.\nTo demonstrate everything, I took a screen recording of my bisect (run script here):\nWhen I did this bisect manually, it took me over an hour, between having to make sure that I typed the right command and remembering that I had a bisect running. When I did it automated without ccache (to make sure everything worked before I did the recording), it took 22 minutes, of which I was involved for 30 seconds :)\nHopefully this information was helpful in some way! If you have any questions or comments, please feel free to reach out to me on Twitter\n","permalink":"https://nathanchance.dev/posts/working-with-git-bisect/","summary":"Before Google+ shut down, I had a post on there giving a brief overview of git bisect, which a lot of people found useful. Unfortunately, I forgot to save it and move it somewhere else before the shutdown deadline. As a result, I am going to redo it here and spice it up a bit.\nOne caveat before I start: there is great official documentation for git bisect, from which I have taken quite a bit of information.","title":"Working with git bisect"},{"content":"I have always loved reading good commit messages and I have tried myself to write good commit messages to inspire others to do the same. I see good commit messages as important for two reasons: it allows people who work on a project afterwards to understand the context behind a change (so that you don\u0026rsquo;t have a denvercoder9 situation) and it allows other people to get familiar with your project by fully understanding the why behind a change. I learned a lot about the Linux kernel purely through reading the commit messages in certain subsystems.\nI see some projects (like amateur Android ROMs and kernels) write really good commmit messages for \u0026ldquo;normal\u0026rdquo; commits but leave the default \u0026ldquo;This reverts commit\u0026hellip;\u0026rdquo; message for reverts, with no additional comments. One of the first points I want to make with this post are revert commits are still commits. Just because git fills in the commit message does not mean that it should not be supplemented.\nSome things worth considering when writing a commit message for a revert:\nWhy is the revert actually being done? Is it just not necessary? Did it break something? Leaving out the why of the revert defeats the purpose. Presumably, if the commit was applied in the first place, it had good reason for being there. If it did not, that should be in the commit message of the revert.\nIf it is broken, how would one notice? Forks of a common upstream like AOSP or the Linux kernel will often have overlapping commits. If someone finds an issue with one, the visible effects of that issue should be noted so that others have a chance to do their own investigation. For example, if a commit introduces a crash, the output of the stacktrace would be relevant for the commit message so that other people have the opportunity to analyze it. This allows people to help out without asking for further information. There are times where someone might have figured out a different solution from a revert and a description of the issue can allow them to point them to that out to the person committing the revert.\nHow can issues be avoided in the future? Any time that a revert happens, it is a learning opportunity. Where did the breakdown happen in the original commit\u0026rsquo;s process? Was it not reviewed properly (or at all)? Was it tested? If so, how? Are there tests that can expose an issue in the future? If not, is it worth writing one?\nSome people are very liberal with reverts or removing commits through rebasing and force pushing. Reverts are an opportunity to look at your software development process and improve it so that they do not happen as much in the future. I did this a lot with my custom Android kernels. Initially, I would rebase and force push my repos when I found issues. Over time, I learned that it is best to fully review and test a commit or series of commits before pushing into a release so that reverting/rebasing was not necessary. It made for a much more stable and painless experience for me and as well as my users.\nIn future posts, I will explore some ways to justify a change initially so that reverting it does not happen so stay tuned. If you have any questions or comments, feel free to reach out to me on Twitter.\n","permalink":"https://nathanchance.dev/posts/art-of-git-revert/","summary":"I have always loved reading good commit messages and I have tried myself to write good commit messages to inspire others to do the same. I see good commit messages as important for two reasons: it allows people who work on a project afterwards to understand the context behind a change (so that you don\u0026rsquo;t have a denvercoder9 situation) and it allows other people to get familiar with your project by fully understanding the why behind a change.","title":"The art of git revert"},{"content":"I have been a big fan of Windows Subsystem for Linux 2 as I need Windows for school but I am so used to the command line for remoting into my server and automating various tasks locally. For those of you who do not know, WSL 2 uses a Linux kernel under the hood (which I customize here) and all of the various distributions that you can run are basically containers on top of it.\nThere is a little known option within wsl.exe named --import that allows you to create a WSL distribution from any Linux distribution\u0026rsquo;s rootfs. I use the images available on the LXC Jenkins instance. Here is a basic how-to (assuming you already have WSL 2 installed):\n1. Download and extract LXC image Go to the LXC images page and select a distribution that you want. I will use Alpine Linux because it is really small and nice for doing quick tasks/tests.\nClick on the image link then find the \u0026ldquo;amd64\u0026rdquo; version of the image (assuming you have an Intel or AMD processor) with the particular version that you want (it will probably have a green dot). I am using Alpine\u0026rsquo;s edge version. You should see a link for a rootfs.tar.xz; click on it to download it.\nOnce it is downloaded, extract it using something like 7-Zip (I use the \u0026ldquo;Extract Here\u0026rdquo; option). Once you have the raw rootfs.tar file, we are good to go.\n2. Import the rootfs Open up a PowerShell instance (I use Windows Terminal). The format of wsl.exe --import is:\n\u0026gt; wsl.exe --import \u0026lt;distro_name\u0026gt; \u0026lt;distro_folder\u0026gt; \u0026lt;rootfs\u0026gt; I have a Linux folder in my user account where I house all of my Linux files so that is where I am going to install it. By default, PowerShell spawns me in my user folder so I am going to use relative paths.\n\u0026gt; wsl.exe --import alpine .\\Linux\\alpine .\\Downloads\\rootfs.tar 3. Run the distro and start setting it up Once you have imported the rootfs, the distribution is now available to spawn into with wsl.exe:\n\u0026gt; wsl.exe -d alpine # uname Linux I recommend getting the distribution up to date right out of the gate (Google instructions for the specific distribution you chose):\n# apk update fetch http://dl-cdn.alpinelinux.org/alpine/edge/main/x86_64/APKINDEX.tar.gz fetch http://dl-cdn.alpinelinux.org/alpine/edge/community/x86_64/APKINDEX.tar.gz v20200319-2352-g9a801feaea [http://dl-cdn.alpinelinux.org/alpine/edge/main] v20200319-2346-g9aab507aee [http://dl-cdn.alpinelinux.org/alpine/edge/community] OK: 12421 distinct packages available # apk upgrade OK: 39 MiB in 25 packages After this, I recommend setting up a user account like an official WSL distribution would:\n# adduser nathan Changing password for nathan New password: Retype password: passwd: password for nathan changed by root After this, you should give yourself the ability to use sudo to avoid logging into the root account constantly. It is recommended that you use visudo and insert yourself after the root ALL=(ALL) ALL line. There are plenty of resources on Google for how to give yourself sudo access, follow those instead of me :)\nOnce you have created your user account, you can tell WSL to use it by default when you run wsl.exe -d \u0026lt;name\u0026gt; through /etc/wsl.conf (obviously replace my name with the one you chose with adduser above):\n# cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/wsl.conf [user] default = nathan EOF To have these changes get reflected in the distro, restart it:\n\u0026gt; wsl.exe -d alpine # whoami root # exit \u0026gt; wsl.exe --terminate alpine \u0026gt; wsl.exe -d alpine $ whoami nathan Hopefully this was somewhat informative. This process might work with Docker images as well since they are usually created from a raw rootfs as well (see Debian\u0026rsquo;s for example), feel free to give it a try. I have been uncovering more and more things with WSL 2 lately that I hope to continue to share here. If you have any questions or comments, feel free to reach out to me on Twitter.\n","permalink":"https://nathanchance.dev/posts/wsl2-distros-from-lxc-images/","summary":"I have been a big fan of Windows Subsystem for Linux 2 as I need Windows for school but I am so used to the command line for remoting into my server and automating various tasks locally. For those of you who do not know, WSL 2 uses a Linux kernel under the hood (which I customize here) and all of the various distributions that you can run are basically containers on top of it.","title":"Creating WSL 2 distributions from LXC images"},{"content":"Recently, I stumbled upon a talk that Alistair Delva, a Google engineer, gave at the 2018 Linux Plumbers Conference around Cuttlefish, an Android Virtual Device (AVD) that is used to validate the Android platform virtually (i.e. without a separate device). This is something that is really cool because it makes it easy to follow along with upstream Android development and see what changes they are making under the hood, all from adb shell. Cuttlefish boots in around 20 seconds on my machine and swapping out kernels is as simple as adding two command flags which I will go over later. If you are running Cuttlefish locally, you can even view it with TightVNC.\nA brief demo:\nA few things to note:\nThese commands assume that you understand Linux shell commands and structure; do not blindly copy and paste (even though everything should work without any issues). If you have any questions about what something is specifically doing and I did not make it clear enough here, feel free to reach out to me on Twitter (link on my homepage).\nAll of the commands are specifically for Ubuntu. This is the OS that I use with my Packet servers and all that I really test on. I tested both bash and zsh without any issues. Debian should work but since we are dealing with fairly low level stuff like KVM, there might be minor differences that are not accounted for here.\n1. Getting Cuttlefish running The first thing to do is actually get the images and tools we need downloaded and installed. This has mostly been distilled from the official README. Cuttlefish uses KVM for performance so your device must support virtualization. See this page for how to determine that and consult Google for how to enable it in your BIOS if it is not already.\nTo start, we need to grab a bunch of packages that are essential to this process:\n$ sudo apt install -y build-essential devscripts fakeroot git psmisc qemu-kvm unzip zip Next, we will make a folder to contain all of the work we are doing. This can be anywhere but you will need to adjust the rest of the commands for wherever you put it.\n$ mkdir -p \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src After this, we will clone the android-cuttlefish repo locally. This will configure and install some tools that are necessary to boot Cuttlefish. Most of these tools are for development, the main reason to install this package is to get the groups that Cuttlefish needs configured properly. There is also the option of using a Docker image to do this but when I tried to use it, I could not get it to work.\n$ git clone https://github.com/google/android-cuttlefish \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/android-cuttlefish $ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/android-cuttlefish Once the repo has been successfully cloned, we need to install a couple of prerequisite packages specifically for this package we are about to build.\n$ sudo apt install -y cdbs config-package-dev debhelper After those have been installed, we will build the package:\n$ debuild -i -us -uc -b The package should have built successfully. If it did not, see if it says a package is missing or try Googling the error to get it resolved. Once it is built, try to install it.\n$ sudo dpkg -i ../cuttlefish-common_*_amd64.deb That step will fail. The packages that it depends on can be installed along with it by running the following command:\n$ sudo apt-get install -f -y Once it gets installed successfully, the cuttlefish-* packages can be removed to avoid cluttering up the workspace.\n$ rm ../cuttlefish-* After this, we need to add our user to the cvdnetwork and kvm network so that Cuttlefish is allowed to use KVM to boot and configure its network using vsock.\n$ sudo usermod -aG cvdnetwork \u0026#34;${USER}\u0026#34; $ sudo usermod -aG kvm \u0026#34;${USER}\u0026#34; Once that is done, logout and log back in (or reboot your machine if it is a remote server).\nAfter logging back in, we need to grab prebuilt versions of the Cuttlefish host tools (such as the launch_cvd and stop_cvd commands) as well as the filesystem images, much like a regular Android device, which include super.img, vendor.img, and boot.img. I will show you how to build these from source if you ever want to hack on Cuttlefish later.\nWe will first create an area for all of this to exist.\n$ mkdir -p \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/cuttlefish-fs $ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/cuttlefish-fs The files we need are all available from ci.android.com. There will be a LOT of different options, the one we care about is currently the second column: aosp_cf_x86_phone. If you click on the userdebug button, it will automatically give you the last known good build. From there, click on the button with the arrow then click on Artifacts. The files we need to download are aosp_cf_x86_phone-img-*.zip and cvd-host_package.tar.gz.\nThis one-liner will grab the zip, unzip it, and remove it. I recommend using the latest, known good build, instead of the one that I have linked here.\n$ curl -LSsO https://ci.android.com/builds/submitted/6173731/aosp_cf_x86_phone-userdebug/latest/aosp_cf_x86_phone-img-6173731.zip \u0026amp;\u0026amp; \\ unzip *.zip \u0026amp;\u0026amp; \\ rm *.zip This one-liner will grab the host tools and untar it.\n$ curl -LSs https://ci.android.com/builds/submitted/6173731/aosp_cf_x86_phone-userdebug/latest/cvd-host_package.tar.gz | tar -xzf - Once those have finished downloading, we are ready to run Cuttlefish! We start Cuttlefish using the launch_cvd (Launch Cuttlefish Virtual Device).\n$ HOME=${PWD} ./bin/launch_cvd -daemon The HOME=${PWD} is present so that some Cuttlefish runtime files get contained to this folder. The -daemon flag is so that we can interact with Cuttlefish through adb shell in the same terminal window (i.e. it gets sent to the background). You should see a bunch of text fire up then it end with something like:\nrun_cvd I 01-31 20:07:50 9571 9571 main.cc:198] VIRTUAL_DEVICE_BOOT_COMPLETED launch_cvd I 01-31 20:07:50 9543 9543 launch_cvd.cc:131] run_cvd exited successfully. It takes about 20 seconds for Cuttlefish to boot up for me (which is extremely impressive in my opinion). After that, you can run adb to connect to it. You might need to run the command a couple of times so that adb can start and connect to the device but once you do, you should be able to interact with it like any other Android device.\n$ ./bin/adb shell vsoc_x86:/ $ I like to see what kernel it is running, which at this point is the android-5.4 branch, the latest LTS kernel.\nvsoc_x86:/ $ cat /proc/version Linux version 5.4.15-gb2b96d09ef40 (android-build@abfarm-01061) (Android (6051079 based on r370808) clang version 10.0.1 (https://android.googlesource.com/toolchain/llvm-project b9738d6d99f614c8bf7a3e7c769659b313b88244)) #1 SMP PREEMPT Mon Jan 27 13:04:43 UTC 2020 You can see that it actively running tasks by typing in top. Once you are done exploring and want to move on, shutdown this instance by calling stop_cvd:\n$ HOME=${PWD} ./bin/stop_cvd 2. Building your own kernel Now that we have gotten Cuttlefish running, it\u0026rsquo;s time to explore one of the main reasons that I use it, which is validating Android kernels. Android has cool technologies in the kernel such as LTO and CFI, which are not currently in mainline. Replacing Cuttlefish\u0026rsquo;s prebuilt kernel is extremely easy, which is one of the main selling points; it makes it really easy for kernel hackers to get involved with it, especially with Google\u0026rsquo;s kernel build system. This section is expanded from Google\u0026rsquo;s official documentation.\nFirst, we need to do is grab repo, Google\u0026rsquo;s git management tool. If you already have repo installed, just skip this portion. Alternatively, you can install repo into /usr/local/bin so that it is automatically added to PATH but for the sake of this tutorial, I keep everything localized as much as possible.\nCreate a bin folder within the Cuttlefish area.\n$ mkdir -p \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/bin Download repo into the bin folder.\n$ curl -LSso \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/bin/repo https://storage.googleapis.com/git-repo-downloads/repo Make it executable.\n$ chmod a+x \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/bin/repo Add the bin folder to PATH (NOTE: If you close out of your terminal session or start a new one, you will need to do this everytime):\n$ export PATH=${HOME}/cuttlefish-playground/bin:${PATH} If you have not already configured git with your email address and your full name, do so now:\n$ git config --global user.email \u0026#34;you@domain.com\u0026#34; $ git config --global user.name \u0026#34;Your Name After all of this has been configured, we are going to download the kernel source. Depending on your internet speed, this might take some time.\nWe will create a folder for that source to be saved in. This will also download all of the prebuilt tools we need, such as the compiler and binaries used during the build process.\n$ mkdir -p \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/kernel-common $ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/kernel-common Next, we will download the source. I am using the common-android-mainline branch since it is the latest available and where most of the new development happens but you can use common-android-5.4 or common-android-4.19 branches if you would like. Any time that you want to get the latest new changes, you can just run repo sync.\n$ repo init -u https://android.googlesource.com/kernel/manifest -b common-android-mainline $ repo sync Once it is done downloading, we need to make sure that we have the SSL development headers installed, otherwise our build will error out. Google\u0026rsquo;s build is almost heremetic, except for this:\n$ sudo apt install -y libssl-dev Finally, we are ready to build the kernel. Google\u0026rsquo;s build script takes care of everything as long as we specify a build config, which is build.config.cuttlefish.x86_64 in our case. We need to copy the bzImage into the dist folder because Google\u0026rsquo;s build.config.cuttlefish.x86_64 is only intended to save the initramfs.img; however, the build.config.gki.x86_64 is about to be fully demodularized and we are eventually going to use a different compiler than Google\u0026rsquo;s official one, which will create a mismatch. As a result, we need to do that copy on our own (it isn\u0026rsquo;t strictly necessary, it just makes everything end up in the right spot).\n$ BUILD_CONFIG=common/build.config.cuttlefish.x86_64 ./build/build.sh $ cp out/android-mainline/common/arch/x86/boot/bzImage out/android-mainline/dist/bzImage Once it is done building, we can use that kernel and ramdisk to boot from. launch_cvd has two flags we need to use, -initramfs_path (for the ramdisk that has all of the kernel modules) and -kernel_path for the actual kernel binary. These two files are available in the out/\u0026lt;branch\u0026gt;/dist folder (e.g., out/android-mainline/dist). I would recommend exporting this to a variable that can be easily used later.\n$ DIST_FOLDER=$(readlink -f out/android-mainline/dist) Once you do that, we will move back to the cuttlefish-fs folder and use these freshly built files to boot Cuttlefish from:\n$ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/cuttlefish-fs $ HOME=${PWD} ./bin/launch_cvd -daemon -initramfs_path \u0026#34;${DIST_FOLDER}\u0026#34;/initramfs.img -kernel_path \u0026#34;${DIST_FOLDER}\u0026#34;/bzImage After that, we can use adb shell to see that we indeed used our own kernel since it shows a newer version, different user/hostname, and the repo that we used and that all of the modules properly loaded.\n$ ./bin/adb shell vsoc_x86:/ $ cat /proc/version Linux version 5.5.0-mainline-03266-g1dad8acc36fc (nathan@g2-large-x86) (Android (6051079 based on r370808) clang version 10.0.1 (https://android.googlesource.com/toolchain/llvm-project b9738d6d99f614c8bf7a3e7c769659b313b88244)) #1 repo:common-android-mainline SMP PREEMPT Fri Jan 31 21:42:55 vsoc_x86:/ $ lsmod Module Size Used by vsock_loopback 16384 0 vmw_vsock_virtio_transport 24576 3 vmw_vsock_virtio_transport_common 36864 2 vsock_loopback,vmw_vsock_virtio_transport vsock_diag 16384 0 vsock 53248 16 vsock_loopback,vmw_vsock_virtio_transport,vmw_vsock_virtio_transport_common,vsock_diag can_raw 20480 0 can 28672 1 can_raw snd_intel8x0 45056 1 snd_ac97_codec 229376 1 snd_intel8x0 ac97_bus 16384 1 snd_ac97_codec virtio_input 20480 0 virtio_pci 28672 0 virtio_mmio 20480 0 gnss_cmdline 16384 0 gnss_serial 16384 1 gnss_cmdline virtio_crypto 28672 0 dummy_cpufreq 16384 0 rtc_test 16384 1 dummy_hcd 32768 0 can_dev 32768 0 vcan 16384 0 virtio_net 53248 0 net_failover 24576 1 virtio_net failover 16384 1 net_failover virt_wifi 24576 1 virtio_pmem 16384 1 nd_virtio 16384 1 virtio_pmem virtio_blk 24576 5 virtio_gpu 57344 0 virtio_console 36864 0 virtio_rng 16384 0 virtio_ring 36864 11 vmw_vsock_virtio_transport,virtio_input,virtio_pci,virtio_mmio,virtio_crypto,virtio_net,nd_virtio,virtio_blk,virtio_gpu,virtio_console,virtio_rng virtio 24576 11 vmw_vsock_virtio_transport,virtio_input,virtio_pci,virtio_mmio,virtio_crypto,virtio_net,virtio_pmem,virtio_blk,virtio_gpu,virtio_console,virtio_rng blk_mq_virtio 16384 1 virtio_blk binfmt_misc 20480 0 Once you are done exploring, stop Cuttlefish.\n$ HOME=${PWD} ./bin/stop_cvd 3. Using upstream LLVM One of my hobbies is contributing to ClangBuiltLinux, which involves building various Linux kernels with the master version of Clang (11.0.0 at the time of writing this). As a part of that project, I have developed a script that can build a self-contained version of Clang suitable for building kernels. These steps will show you how to build that version of Clang then use it within the Android build system.\nFirst, we need to install some packages that allow us build Clang efficiently (including Clang itself):\n$ sudo apt install -y bc bison ccache clang cmake flex libelf-dev lld ninja-build python3 u-boot-tools zlib1g-dev Next, we\u0026rsquo;ll grab the repo that contains the Python script:\n$ git clone git://github.com/ClangBuiltLinux/tc-build \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/tc-build By default, the script does a two stage LLVM build (builds a small version of LLVM then uses that to build a full version of LLVM).\n$ \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/tc-build/build-llvm.py If for some reason your machine cannot handle that, you can just do a stage 1 build.\n$ \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/tc-build/build-llvm.py --build-stage1-only --install-stage1-only If you have a machine with good performance, I would recommend using the --pgo flag to build with Profile Guided Optimization; this can result in a 20% speed up when compiling kernels.\n$ \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/tc-build/build-llvm.py --pgo If for some reason there are any issues using the script, please report them here so I can triage them.\nOnce the toolchain has been built, we will make it available to easily use by symlinking the install folder within tc-build into the prebuilts folder in kernel-common.\n$ ln -s \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/tc-build/install \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/kernel-common/prebuilts-master/clang/host/linux-x86/cbl-clang-master After that, we can use sed to automatically use that Clang when building the kernel.\n$ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/kernel-common $ sed -i \u0026#39;s/clang-r.*/cbl-clang-master\\/bin/g\u0026#39; common/build.config.common $ BUILD_CONFIG=common/build.config.cuttlefish.x86_64 ./build/build.sh $ cp out/android-mainline/common/arch/x86/boot/bzImage out/android-mainline/dist/bzImage Once the build is completed, we just use the same commands as before to boot and test:\n$ DIST_FOLDER=$(readlink -f out/android-mainline/dist) $ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/cuttlefish-fs $ HOME=${PWD} ./bin/launch_cvd -daemon -initramfs_path \u0026#34;${DIST_FOLDER}\u0026#34;/initramfs.img -kernel_path \u0026#34;${DIST_FOLDER}\u0026#34;/bzImage $ ./bin/adb shell vsoc_x86:/ $ cat /proc/version Linux version 5.5.0-mainline-03266-g1dad8acc36fc-dirty (nathan@g2-large-x86) (ClangBuiltLinux clang version 11.0.0 (git://github.com/llvm/llvm-project 64cb77b9469207799e570483dadc720dbf12c794)) #1 repo:common-android-mainline SMP PREEMPT Fri Jan 31 23:47:57 vsoc_x86:/ $ exit $ HOME=${PWD} ./bin/stop_cvd 4. Building Cuttlefish userspace from scratch If you want to test the latest and greatest from AOSP\u0026rsquo;s master branch, you can build the things that are in the cuttlefish-fs folder from scratch.\nThis is not small so make sure that you have room on your hard drive for it. A fresh checkout as of today shows:\n$ diskus . 92.68 GB (92,677,562,368 bytes) First, use repo to go and grab the full AOSP source tree.\n$ mkdir -p \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/aosp $ cd \u0026#34;${HOME}\u0026#34;/cuttlefish-playground/src/aosp $ repo init -u https://android.googlesource.com/platform/manifest $ repo sync Next, we need source Android\u0026rsquo;s environment setup script to adjust the PATH variable and add the functions that it uses.\n$ . build/envsetup.sh After that, we need to use the lunch command to tell the build system that we want to build Cuttlefish.\n$ lunch aosp_cf_x86_phone-userdebug Next, we\u0026rsquo;re just going to build the world:\n$ m This will probably take a while since there are usually around 80,000+ files to build. A clean build on g2.large.x86 takes about 38 minutes.\nOnce it is done, you can use the launch_cvd command available in PATH to use the new files you just build. The HOME= assignment should still be used to keep the Cuttlefish runtime files contained but I will keep them in the out folder.\n$ HOME=${PWD}/out launch_cvd -daemon Once it has booted, you can access with the adb that is in the path.\n$ adb shell vsoc_x86:/ $ cat /proc/version Linux version 5.4.15-gb2b96d09ef40 (android-build@abfarm-01061) (Android (6051079 based on r370808) clang version 10.0.1 (https://android.googlesource.com/toolchain/llvm-project b9738d6d99f614c8bf7a3e7c769659b313b88244)) #1 SMP PREEMPT Mon Jan 27 13:04:43 UTC 2020 The kernel is still prebuilt but you can use a kernel that you build earlier with this new userspace just like before.\n$ HOME=${PWD}/out launch_cvd -daemon -initramfs_path \u0026#34;${DIST_FOLDER}\u0026#34;/initramfs.img -kernel_path \u0026#34;${DIST_FOLDER}\u0026#34;/bzImage $ adb shell vsoc_x86:/ $ cat /proc/version Linux version 5.5.0-mainline-03266-g1dad8acc36fc-dirty (nathan@g2-large-x86) (ClangBuiltLinux clang version 11.0.0 (git://github.com/llvm/llvm-project 64cb77b9469207799e570483dadc720dbf12c794)) #1 repo:common-android-mainline SMP PREEMPT Fri Jan 31 23:47:57 Conclusion Hopefully this was informative for you! Some further things to potentially explore are things like adeb, which allow you to use tracing tools and other Linux utilities on Android to poke around its internals and try and improve or break things or looking into some of the new cool things they are doing like Apex. If you have any questions or problems, feel free to reach out to me on Twitter or GitHub, both of which are linked on my homepage.\n","permalink":"https://nathanchance.dev/posts/building-using-cuttlefish/","summary":"Recently, I stumbled upon a talk that Alistair Delva, a Google engineer, gave at the 2018 Linux Plumbers Conference around Cuttlefish, an Android Virtual Device (AVD) that is used to validate the Android platform virtually (i.e. without a separate device). This is something that is really cool because it makes it easy to follow along with upstream Android development and see what changes they are making under the hood, all from adb shell.","title":"Building and using Cuttlefish"},{"content":"Recently, I built a computer for school that I installed Windows 10 Pro on (link to the current specs if you are curious). I was a little bummed about leaving Chrome OS because I was going to lose my local Linux development environment; however, Windows Subsystem for Linux is a thing and it has gotten even better with WSL 2, as it is actually running a Linux kernel so there is full Linux compatibility going forward. I also learned that it is possible to replace the Linux kernel that Microsoft ships with your own. This is a mini guide for what I uncovered because there is not a ton of information around for how to do this.\nBuilding the kernel You can either build the kernel on another machine and download it locally or you can build it within WSL 2 itself. This is a guide for how to do the latter because it is simpler and does not mess with an existing environment you might have working. I am giving the instructions for Debian but these should work for Ubuntu (I just do not want to tear down my current working environment to test\u0026hellip;). I am also going to assume that you are familiar with Linux in general so I am not going to explain every single command.\n1. Download and install the needed tools. First, we are going to grab the utilities needed to build the kernel, along with some other tools to use for installing clang-10 and lld-10 from apt.llvm.org.\n$ sudo apt update $ sudo apt upgrade $ sudo apt install -y --no-install-recommends \\ bc \\ bison \\ build-essential \\ ca-certificates \\ flex \\ git \\ gnupg \\ libelf-dev \\ libssl-dev \\ lsb-release \\ software-properties-common \\ wget Next, we will install a rolling release version of clang-10 and lld-10 from apt.llvm.org. There has been a lot of work done on the LLVM side to make building the Linux kernel a good experience and it is important to have all of those fixes available.\n$ cd ~ $ wget https://apt.llvm.org/llvm.sh $ chmod +x llvm.sh $ sudo ./llvm.sh 10 If you are not on an Ubuntu or Debian based operating system, you can build clang and ld.lld from source easily with my tc-build script. Read the information in that README for how to use it and file issues at that repo if you run into any, I want to fix them!\n2. Download the WSL 2 source code. $ git clone https://github.com/microsoft/WSL2-Linux-Kernel $ cd WSL2-Linux-Kernel 3. Build the kernel. I chose to use an out folder for easy clean up.\n$ make -j$(nproc) -s CC=clang-10 KCONFIG_CONFIG=../Microsoft/config-wsl LD=ld.lld-10 O=out.x86_64 distclean olddefconfig all If you want to just build it in tree:\n$ make -j$(nproc) -s CC=clang-10 KCONFIG_CONFIG=Microsoft/config-wsl LD=ld.lld-10 distclean olddefconfig all You do not have to use clang and ld.lld, you can omit the CC=clang-10 and LD=ld.lld-10 to use gcc and ld respectively but I think that using clang is neat since I work on ClangBuiltLinux.\nUsing the kernel To boot from the kernel we just compiled, we need to move it out of WSL 2 and add a .wslconfig to say that we want to boot from it.\n1. Move the kernel to the Windows file system. I have a separate folder for my kernels within my user folder (e.g., C:\\Users\\natec\\Linux). It does not have to be there. Assuming that you used the out folder like I did above, the command will look something like this:\n$ cp out.x86_64/arch/x86/boot/bzImage /mnt/c/Users/natec/Linux/kernel-4.19-clang 2. Tell WSL 2 to use that kernel when booting up. This was the tricky part that I had to do some reading about, as their documentation is not the best. This .wslconfig file has to be in your user folder\u0026rsquo;s root (e.g., C:\\Users\\natec\\.wslconfig). This is mine:\n$ cat /mnt/c/Users/natec/.wslconfig [wsl2] kernel = C:\\\\Users\\\\natec\\\\Linux\\\\kernel-4.19-clang You can create this with Visual Studio Code or a terminal editor like vim. Basically, you pass it the full path to your kernel binary with the \u0026ldquo;\\\u0026rdquo; characters escaped. After that, you need to shutdown your WSL 2 VM in Powershell or cmd and just reopen it.\n$ wsl --shutdown After you have done that, you can run cat /proc/version to verify that WSL booted from that kernel.\nBefore:\n$ cat /proc/version Linux version 4.19.84-microsoft-standard (oe-user@oe-host) (gcc version 8.2.0 (GCC)) #1 SMP Wed Nov 13 11:44:37 UTC 2019 After:\n$ cat /proc/version Linux version 4.19.84-microsoft-standard+ (nathan@Ryzen-7-3700X) (clang version 10.0.0-+20191217115131+ddd0bb8dba2-1~exp1~20191217105722.470) #1 SMP Tue Dec 17 17:15:48 MST 2019 I have noticed that the VM gets stuck starting with a custom kernel at times; if that happens, run wsl --shutdown and try reopening one of the distributions again, it will usually work after a couple of times.\nFeel free to reach out to me with issues or questions on Twitter or my WSL 2 kernel source on Github.\n","permalink":"https://nathanchance.dev/posts/wsl2-kernel-clang/","summary":"Recently, I built a computer for school that I installed Windows 10 Pro on (link to the current specs if you are curious). I was a little bummed about leaving Chrome OS because I was going to lose my local Linux development environment; however, Windows Subsystem for Linux is a thing and it has gotten even better with WSL 2, as it is actually running a Linux kernel so there is full Linux compatibility going forward.","title":"Building the WSL 2 kernel with Clang"},{"content":"I used to host files on this website but I have offloaded them to other services.\nFlash Kernel downloads can be found in their individual repos:\nNexus 6P OnePlus 5 OnePlus 6 Pixel (XL) Pixel 2 (XL) Note, these are all unmaintained right now so I wouldn\u0026rsquo;t recommend running them in their current form but it\u0026rsquo;s your device.\nTWRP downloads can be found in the threads that referenced them:\nNexus 6 Nexus 6P Anything else wasn\u0026rsquo;t important enough to mention here. I\u0026rsquo;ve updated the links in all the places I could. Contact me using the info on the front page if you need something that isn\u0026rsquo;t here.\n","permalink":"https://nathanchance.dev/downloads/","summary":"I used to host files on this website but I have offloaded them to other services.\nFlash Kernel downloads can be found in their individual repos:\nNexus 6P OnePlus 5 OnePlus 6 Pixel (XL) Pixel 2 (XL) Note, these are all unmaintained right now so I wouldn\u0026rsquo;t recommend running them in their current form but it\u0026rsquo;s your device.\nTWRP downloads can be found in the threads that referenced them:\nNexus 6 Nexus 6P Anything else wasn\u0026rsquo;t important enough to mention here.","title":"Downloads"}]