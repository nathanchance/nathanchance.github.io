<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Clang on Nathan Chancellor</title>
    <link>https://nathanchance.dev/tags/clang/</link>
    <description>Recent content in Clang on Nathan Chancellor</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Nov 2021 10:07:16 -0700</lastBuildDate>
    <atom:link href="https://nathanchance.dev/tags/clang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reducing an LTO Linux kernel bug with cvise</title>
      <link>https://nathanchance.dev/posts/cvise-lto-kernel-bug/</link>
      <pubDate>Mon, 29 Nov 2021 10:07:16 -0700</pubDate>
      <guid>https://nathanchance.dev/posts/cvise-lto-kernel-bug/</guid>
      <description>&lt;p&gt;My co-maintainer Nick Desaulniers wrote &lt;a href=&#34;https://nickdesaulniers.github.io/blog/2019/01/18/finding-compiler-bugs-with-c-reduce/&#34;&gt;a great post&lt;/a&gt; about taking a several thousand line C file that exposed a compiler bug down to 12 lines with &lt;code&gt;creduce&lt;/code&gt;. I thought I would do the same thing with a bug that only happens with link time optimization (LTO) in the Linux kernel, which is a bit of a different beast. Hopefully this post can help others reduce their own bugs and think about the best way to triage a bug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building and using Cuttlefish</title>
      <link>https://nathanchance.dev/posts/building-using-cuttlefish/</link>
      <pubDate>Fri, 31 Jan 2020 18:52:00 -0700</pubDate>
      <guid>https://nathanchance.dev/posts/building-using-cuttlefish/</guid>
      <description>&lt;p&gt;Recently, I stumbled upon &lt;a href=&#34;https://youtu.be/xMtDDEj-02c?t=9502&#34;&gt;a talk&lt;/a&gt; that Alistair Delva, a Google engineer, gave at the 2018 Linux Plumbers Conference around Cuttlefish, an Android Virtual Device (AVD) that is used to validate the Android platform virtually (i.e. without a separate device). This is something that is really cool because it makes it easy to follow along with upstream Android development and see what changes they are making under the hood, all from &lt;code&gt;adb shell&lt;/code&gt;. Cuttlefish boots in around 20 seconds on my machine and swapping out kernels is as simple as adding two command flags which I will go over later. If you are running Cuttlefish locally, you can even &lt;a href=&#34;https://android.googlesource.com/device/google/cuttlefish/#so-you-want-to-see-cuttlefish&#34;&gt;view it&lt;/a&gt; with TightVNC.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building the WSL 2 kernel with Clang</title>
      <link>https://nathanchance.dev/posts/wsl2-kernel-clang/</link>
      <pubDate>Tue, 17 Dec 2019 13:53:23 -0700</pubDate>
      <guid>https://nathanchance.dev/posts/wsl2-kernel-clang/</guid>
      <description>&lt;p&gt;Recently, I built a computer for school that I installed Windows 10 Pro on (&lt;a href=&#34;https://pcpartpicker.com/user/nchancellor/saved/bLjTCJ&#34;&gt;link to the current specs&lt;/a&gt; if you are curious). I was a little bummed about leaving Chrome OS because I was going to lose my local Linux development environment; however, Windows Subsystem for Linux is a thing and it has gotten even better with WSL 2, as it is actually running a Linux kernel so there is full Linux compatibility going forward. I also learned that it is possible to replace the Linux kernel that Microsoft ships with your own. This is a mini guide for what I uncovered because there is not a ton of information around for how to do this.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
