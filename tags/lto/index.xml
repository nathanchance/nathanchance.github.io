<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lto on Nathan Chancellor</title>
    <link>https://nathanchance.dev/tags/lto/</link>
    <description>Recent content in Lto on Nathan Chancellor</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Nov 2021 10:07:16 -0700</lastBuildDate>
    <atom:link href="https://nathanchance.dev/tags/lto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reducing an LTO Linux kernel bug with cvise</title>
      <link>https://nathanchance.dev/posts/cvise-lto-kernel-bug/</link>
      <pubDate>Mon, 29 Nov 2021 10:07:16 -0700</pubDate>
      <guid>https://nathanchance.dev/posts/cvise-lto-kernel-bug/</guid>
      <description>&lt;p&gt;My co-maintainer Nick Desaulniers wrote &lt;a href=&#34;https://nickdesaulniers.github.io/blog/2019/01/18/finding-compiler-bugs-with-c-reduce/&#34;&gt;a great post&lt;/a&gt; about taking a several thousand line C file that exposed a compiler bug down to 12 lines with &lt;code&gt;creduce&lt;/code&gt;. I thought I would do the same thing with a bug that only happens with link time optimization (LTO) in the Linux kernel, which is a bit of a different beast. Hopefully this post can help others reduce their own bugs and think about the best way to triage a bug.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
