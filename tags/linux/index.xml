<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Nathan Chancellor</title>
    <link>https://nathanchance.dev/tags/linux/</link>
    <description>Recent content in linux on Nathan Chancellor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 30 Sep 2021 10:00:00 -0700</lastBuildDate><atom:link href="https://nathanchance.dev/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>September 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/september-2021-cbl-work/</link>
      <pubDate>Thu, 30 Sep 2021 10:00:00 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/september-2021-cbl-work/</guid>
      <description>Linux kernel patches   tools: compiler-gcc.h: Guard error attribute use with __has_attribute (v1): The minimum version of GCC was raised to 5.1, which helped simplify a lot of code but caused issues for older versions of clang. This helps resolve it.
  Harden clang against unknown flag options (v2): A follow up.
  ptp: ocp: Avoid operator precedence warning in ptp_ocp_summary_show() (v1, v2): An interesting warning around operator precedence, which will not be an issue in practice but now that Linus has decreed that warnings are unacceptable, it is important to clean them up!</description>
    </item>
    
    <item>
      <title>August 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/august-2021-cbl-work/</link>
      <pubDate>Tue, 31 Aug 2021 20:38:00 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/august-2021-cbl-work/</guid>
      <description>Linux kernel patches   [PATCH] dmaengine: idxd: Remove unused status variable in irq_process_work_list(): Not a clang specific warning but it impacts builds where I use -Werror, as kernel builds should be as warning clean as possible.
  [PATCH] ASoC: Intel: boards: Fix CONFIG_SND_SOC_SDW_MOCKUP select: Not a clang specific warning but Kconfig warnings such as this can potentially be build errors later due to incorrect dependency selection so it is important to fix them when they pop up.</description>
    </item>
    
    <item>
      <title>July 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/july-2021-cbl-work/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/july-2021-cbl-work/</guid>
      <description>Linux kernel patches   [PATCH] Hexagon: Export raw I/O routines for modules: Hexagon is a digital signal processor architecture by Qualcomm, which is a little special in terms of the Linux kernel because it is the only architecture that does not have a GCC backend so LLVM has to be used to build it, meaning that it is important to keep it building. This patch fixes an issue with allmodconfig, which enables us to build a wide variety of code and verify the compiler is able to handle all of it.</description>
    </item>
    
    <item>
      <title>June 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/june-2021-cbl-work/</link>
      <pubDate>Thu, 01 Jul 2021 13:48:16 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/june-2021-cbl-work/</guid>
      <description>Linux kernel patches   ANDROID: sched: Gate sched_stat tracepoint exports on CONFIG_SCHEDSTATS: One of those instances where a tangential change in the Android trees broke our continuous integration. Our CI tests some 32-bit ARM configurations because certain Android OEMs care about them but these configs are not tested by the actual Android team, meaning we find breakage that they do not.
  [PATCH net-next] net: ks8851: Make ks8851_read_selftest() return void: clang implemented GCC&amp;rsquo;s -Wunused-but-set-variable and this instance was found by Intel&amp;rsquo;s kernel test robot.</description>
    </item>
    
    <item>
      <title>May 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/may-2021-cbl-work/</link>
      <pubDate>Tue, 01 Jun 2021 08:29:00 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/may-2021-cbl-work/</guid>
      <description>This month felt longer than others but I feel like that was because I was a lot more spread out in the work that I was doing. Let&amp;rsquo;s dive in, shall we?
Linux kernel patches / backports   [PATCH] fbmem: Correct position of &#39;__maybe_unused&#39; in proc_fb_seq_ops: A common mistake people make is splitting &amp;ldquo;struct &amp;rdquo; with an attribute, in this case &amp;ldquo;__maybe_unused&amp;rdquo;, which clang warns about while GCC does not.</description>
    </item>
    
    <item>
      <title>April 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/april-2021-cbl-work/</link>
      <pubDate>Fri, 30 Apr 2021 21:14:13 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/april-2021-cbl-work/</guid>
      <description>Another month down! Feels like I just wrote the March 2021 post&amp;hellip; but I suppose that is what happens when your project moves super quickly :)
Linux kernel patches   [PATCH] ACPI / CPPC: Replace cppc_attr with kobj_attribute: I discovered this issue as part of my testing of Sami Tolvanen&amp;rsquo;s Control Flow Integrity series (more on that below). There are probably many more of these lurking because this pattern is hard to spot without runtime testing.</description>
    </item>
    
    <item>
      <title>March 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/march-2021-cbl-work/</link>
      <pubDate>Thu, 01 Apr 2021 10:25:53 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/march-2021-cbl-work/</guid>
      <description>Another month, another post about the work that I have done as a kernel/compiler developer! One of the highlights this month is that I got LLVM commit access so I can merge my own patches into LLVM, which I did twice so far.
Linux kernel patches   powerpc/fadump: Mark fadump_calculate_reserve_size as __init: LLVM 13 switched over to the New Pass Manager (NPM), which has impacted some inlining decisions, which in turn exposed some bugs in section annotations.</description>
    </item>
    
    <item>
      <title>February 2021 ClangBuiltLinux Work</title>
      <link>https://nathanchance.dev/posts/february-2021-cbl-work/</link>
      <pubDate>Sun, 28 Feb 2021 00:01:20 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/february-2021-cbl-work/</guid>
      <description>As some of you may or may not know by now, I am now employed by the Linux Foundation to help improve Linux security. The primary way that I am doing that is through the work I do for ClangBuiltLinux, of which I am an official maintainer.
Linux kernel patches First and foremost, I am a Linux kernel developer, meaning that I love sending kernel patches. Getting familiar with git send-email and the standard Linux kernel workflow can be difficult but now that I am used to it, I find other things cumbersome.</description>
    </item>
    
    <item>
      <title>Working with git bisect</title>
      <link>https://nathanchance.dev/posts/working-with-git-bisect/</link>
      <pubDate>Fri, 17 Apr 2020 15:23:45 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/working-with-git-bisect/</guid>
      <description>Before Google+ shut down, I had a post on there giving a brief overview of git bisect, which a lot of people found useful. Unfortunately, I forgot to save it and move it somewhere else before the shutdown deadline. As a result, I am going to redo it here and spice it up a bit.
One caveat before I start: there is great official documentation for git bisect, from which I have taken quite a bit of information.</description>
    </item>
    
    <item>
      <title>Creating WSL 2 distributions from LXC images</title>
      <link>https://nathanchance.dev/posts/wsl2-distros-from-lxc-images/</link>
      <pubDate>Wed, 15 Apr 2020 12:40:20 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/wsl2-distros-from-lxc-images/</guid>
      <description>I have been a big fan of Windows Subsystem for Linux 2 as I need Windows for school but I am so used to the command line for remoting into my server and automating various tasks locally. For those of you who do not know, WSL 2 uses a Linux kernel under the hood (which I customize here) and all of the various distributions that you can run are basically containers on top of it.</description>
    </item>
    
    <item>
      <title>Building and using Cuttlefish</title>
      <link>https://nathanchance.dev/posts/building-using-cuttlefish/</link>
      <pubDate>Fri, 31 Jan 2020 18:52:00 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/building-using-cuttlefish/</guid>
      <description>Recently, I stumbled upon a talk that Alistair Delva, a Google engineer, gave at the 2018 Linux Plumbers Conference around Cuttlefish, an Android Virtual Device (AVD) that is used to validate the Android platform virtually (i.e. without a separate device). This is something that is really cool because it makes it easy to follow along with upstream Android development and see what changes they are making under the hood, all from adb shell.</description>
    </item>
    
    <item>
      <title>Building the WSL 2 kernel with Clang</title>
      <link>https://nathanchance.dev/posts/wsl2-kernel-clang/</link>
      <pubDate>Tue, 17 Dec 2019 13:53:23 -0700</pubDate>
      
      <guid>https://nathanchance.dev/posts/wsl2-kernel-clang/</guid>
      <description>Recently, I built a computer for school that I installed Windows 10 Pro on (link to the current specs if you are curious). I was a little bummed about leaving Chrome OS because I was going to lose my local Linux development environment; however, Windows Subsystem for Linux is a thing and it has gotten even better with WSL 2, as it is actually running a Linux kernel so there is full Linux compatibility going forward.</description>
    </item>
    
  </channel>
</rss>
